"use strict";(self.webpackChunkmaster_degree=self.webpackChunkmaster_degree||[]).push([[46],{344:(e,n,t)=>{t.d(n,{Z:()=>i});var o=t(7294),r=t(9864);function i(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=[];return o.Children.forEach(e,(function(e){(null!=e||n.keepEmpty)&&(Array.isArray(e)?t=t.concat(i(e)):(0,r.isFragment)(e)&&e.props?t=t.concat(i(e.props.children,n)):t.push(e))})),t}},4019:(e,n,t)=>{t.d(n,{Z:()=>r});var o=t(3935);function r(e,n,t,r){var i=o.unstable_batchedUpdates?function(e){o.unstable_batchedUpdates(t,e)}:t;return e.addEventListener&&e.addEventListener(n,i,r),{remove:function(){e.removeEventListener&&e.removeEventListener(n,i)}}}},8924:(e,n,t)=>{function o(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}t.d(n,{Z:()=>o})},4999:(e,n,t)=>{function o(e,n){return!!e&&e.contains(n)}t.d(n,{Z:()=>o})},7678:(e,n,t)=>{t.d(n,{os:()=>o});function o(e){var n=e.getBoundingClientRect(),t=document.documentElement;return{left:n.left+(window.pageXOffset||t.scrollLeft)-(t.clientLeft||document.body.clientLeft||0),top:n.top+(window.pageYOffset||t.scrollTop)-(t.clientTop||document.body.clientTop||0)}}},4958:(e,n,t)=>{t.d(n,{h:()=>u});var o=t(8924),r="rc-util-key";function i(e){return e.attachTo?e.attachTo:document.querySelector("head")||document.body}function a(e){var n,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,o.Z)())return null;var r,a=document.createElement("style");(null===(n=t.csp)||void 0===n?void 0:n.nonce)&&(a.nonce=null===(r=t.csp)||void 0===r?void 0:r.nonce);a.innerHTML=e;var c=i(t),u=c.firstChild;return t.prepend&&c.prepend?c.prepend(a):t.prepend&&u?c.insertBefore(a,u):c.appendChild(a),a}var c=new Map;function u(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=i(t);if(!c.has(o)){var u=a("",t),d=u.parentNode;c.set(o,d),d.removeChild(u)}var l=Array.from(c.get(o).children).find((function(e){return"STYLE"===e.tagName&&e[r]===n}));if(l){var s,f,p;if((null===(s=t.csp)||void 0===s?void 0:s.nonce)&&l.nonce!==(null===(f=t.csp)||void 0===f?void 0:f.nonce))l.nonce=null===(p=t.csp)||void 0===p?void 0:p.nonce;return l.innerHTML!==e&&(l.innerHTML=e),l}var v=a(e,t);return v[r]=n,v}},4203:(e,n,t)=>{t.d(n,{Z:()=>r});var o=t(3935);function r(e){return e instanceof HTMLElement?e:o.findDOMNode(e)}},8603:(e,n,t)=>{t.d(n,{tS:()=>a});var o=t(3433),r=t(5110);function i(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if((0,r.Z)(e)){var t=e.nodeName.toLowerCase(),o=["input","select","textarea","button"].includes(t)||e.isContentEditable||"a"===t&&!!e.getAttribute("href"),i=e.getAttribute("tabindex"),a=Number(i),c=null;return i&&!Number.isNaN(a)?c=a:o&&null===c&&(c=0),o&&e.disabled&&(c=null),null!==c&&(c>=0||n&&c<0)}return!1}function a(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=(0,o.Z)(e.querySelectorAll("*")).filter((function(e){return i(e,n)}));return i(e,n)&&t.unshift(e),t}},5110:(e,n,t)=>{t.d(n,{Z:()=>o});const o=function(e){if(!e)return!1;if(e.offsetParent)return!0;if(e.getBBox){var n=e.getBBox();if(n.width||n.height)return!0}if(e.getBoundingClientRect){var t=e.getBoundingClientRect();if(t.width||t.height)return!0}return!1}},5105:(e,n,t)=>{t.d(n,{Z:()=>r});var o={MAC_ENTER:3,BACKSPACE:8,TAB:9,NUM_CENTER:12,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCREEN:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,QUESTION_MARK:63,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,META:91,WIN_KEY_RIGHT:92,CONTEXT_MENU:93,NUM_ZERO:96,NUM_ONE:97,NUM_TWO:98,NUM_THREE:99,NUM_FOUR:100,NUM_FIVE:101,NUM_SIX:102,NUM_SEVEN:103,NUM_EIGHT:104,NUM_NINE:105,NUM_MULTIPLY:106,NUM_PLUS:107,NUM_MINUS:109,NUM_PERIOD:110,NUM_DIVISION:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUMLOCK:144,SEMICOLON:186,DASH:189,EQUALS:187,COMMA:188,PERIOD:190,SLASH:191,APOSTROPHE:192,SINGLE_QUOTE:222,OPEN_SQUARE_BRACKET:219,BACKSLASH:220,CLOSE_SQUARE_BRACKET:221,WIN_KEY:224,MAC_FF_META:224,WIN_IME:229,isTextModifyingKeyEvent:function(e){var n=e.keyCode;if(e.altKey&&!e.ctrlKey||e.metaKey||n>=o.F1&&n<=o.F12)return!1;switch(n){case o.ALT:case o.CAPS_LOCK:case o.CONTEXT_MENU:case o.CTRL:case o.DOWN:case o.END:case o.ESC:case o.HOME:case o.INSERT:case o.LEFT:case o.MAC_FF_META:case o.META:case o.NUMLOCK:case o.NUM_CENTER:case o.PAGE_DOWN:case o.PAGE_UP:case o.PAUSE:case o.PRINT_SCREEN:case o.RIGHT:case o.SHIFT:case o.UP:case o.WIN_KEY:case o.WIN_KEY_RIGHT:return!1;default:return!0}},isCharacterKey:function(e){if(e>=o.ZERO&&e<=o.NINE)return!0;if(e>=o.NUM_ZERO&&e<=o.NUM_MULTIPLY)return!0;if(e>=o.A&&e<=o.Z)return!0;if(-1!==window.navigator.userAgent.indexOf("WebKit")&&0===e)return!0;switch(e){case o.SPACE:case o.QUESTION_MARK:case o.NUM_PLUS:case o.NUM_MINUS:case o.NUM_PERIOD:case o.NUM_DIVISION:case o.SEMICOLON:case o.DASH:case o.EQUALS:case o.COMMA:case o.PERIOD:case o.SLASH:case o.APOSTROPHE:case o.SINGLE_QUOTE:case o.OPEN_SQUARE_BRACKET:case o.BACKSLASH:case o.CLOSE_SQUARE_BRACKET:return!0;default:return!1}}};const r=o},9015:(e,n,t)=>{t.d(n,{Z:()=>a});var o=t(7294),r=t(3935),i=t(8924);const a=(0,o.forwardRef)((function(e,n){var t=e.didUpdate,a=e.getContainer,c=e.children,u=(0,o.useRef)();(0,o.useImperativeHandle)(n,(function(){return{}}));var d=(0,o.useRef)(!1);return!d.current&&(0,i.Z)()&&(u.current=a(),d.current=!0),(0,o.useEffect)((function(){null==t||t(e)})),(0,o.useEffect)((function(){return function(){var e,n;null===(e=u.current)||void 0===e||null===(n=e.parentNode)||void 0===n||n.removeChild(u.current)}}),[]),u.current?r.createPortal(c,u.current):null}))},2016:(e,n,t)=>{t.d(n,{Z:()=>k});var o=t(5671),r=t(3144),i=t(9340),a=t(8557),c=t(1002),u=t(7294),d=t(5164),l=t(9015),s=t(8924),f=t(4204);const p=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!e)return{};var t=n.element,o=void 0===t?document.body:t,r={},i=Object.keys(e);return i.forEach((function(e){r[e]=o.style[e]})),i.forEach((function(n){o.style[n]=e[n]})),r};var v={};const m=function(e){if(document.body.scrollHeight>(window.innerHeight||document.documentElement.clientHeight)&&window.innerWidth>document.body.offsetWidth||e){var n="ant-scrolling-effect",t=new RegExp("".concat(n),"g"),o=document.body.className;if(e){if(!t.test(o))return;return p(v),v={},void(document.body.className=o.replace(t,"").trim())}var r=(0,f.Z)();if(r&&(v=p({position:"relative",width:"calc(100% - ".concat(r,"px)")}),!t.test(o))){var i="".concat(o," ").concat(n);document.body.className=i.trim()}}};var h=t(3433),g=[],E="ant-scrolling-effect",y=new RegExp("".concat(E),"g"),w=0,C=new Map,N=function e(n){var t=this;(0,o.Z)(this,e),this.lockTarget=void 0,this.options=void 0,this.getContainer=function(){var e;return null===(e=t.options)||void 0===e?void 0:e.container},this.reLock=function(e){var n=g.find((function(e){return e.target===t.lockTarget}));n&&t.unLock(),t.options=e,n&&(n.options=e,t.lock())},this.lock=function(){var e;if(!g.some((function(e){return e.target===t.lockTarget})))if(g.some((function(e){var n,o=e.options;return(null==o?void 0:o.container)===(null===(n=t.options)||void 0===n?void 0:n.container)})))g=[].concat((0,h.Z)(g),[{target:t.lockTarget,options:t.options}]);else{var n=0,o=(null===(e=t.options)||void 0===e?void 0:e.container)||document.body;(o===document.body&&window.innerWidth-document.documentElement.clientWidth>0||o.scrollHeight>o.clientHeight)&&(n=(0,f.Z)());var r=o.className;if(0===g.filter((function(e){var n,o=e.options;return(null==o?void 0:o.container)===(null===(n=t.options)||void 0===n?void 0:n.container)})).length&&C.set(o,p({width:0!==n?"calc(100% - ".concat(n,"px)"):void 0,overflow:"hidden",overflowX:"hidden",overflowY:"hidden"},{element:o})),!y.test(r)){var i="".concat(r," ").concat(E);o.className=i.trim()}g=[].concat((0,h.Z)(g),[{target:t.lockTarget,options:t.options}])}},this.unLock=function(){var e,n=g.find((function(e){return e.target===t.lockTarget}));if(g=g.filter((function(e){return e.target!==t.lockTarget})),n&&!g.some((function(e){var t,o=e.options;return(null==o?void 0:o.container)===(null===(t=n.options)||void 0===t?void 0:t.container)}))){var o=(null===(e=t.options)||void 0===e?void 0:e.container)||document.body,r=o.className;y.test(r)&&(p(C.get(o),{element:o}),C.delete(o),o.className=o.className.replace(y,"").trim())}},this.lockTarget=w++,this.options=n},b=0,T=(0,s.Z)();var S={},M=function(e){if(!T)return null;if(e){if("string"==typeof e)return document.querySelectorAll(e)[0];if("function"==typeof e)return e();if("object"===(0,c.Z)(e)&&e instanceof window.HTMLElement)return e}return document.body};const k=function(e){(0,i.Z)(t,e);var n=(0,a.Z)(t);function t(e){var r;return(0,o.Z)(this,t),(r=n.call(this,e)).container=void 0,r.componentRef=u.createRef(),r.rafId=void 0,r.scrollLocker=void 0,r.renderComponent=void 0,r.updateScrollLocker=function(e){var n=(e||{}).visible,t=r.props,o=t.getContainer,i=t.visible;i&&i!==n&&T&&M(o)!==r.scrollLocker.getContainer()&&r.scrollLocker.reLock({container:M(o)})},r.updateOpenCount=function(e){var n=e||{},t=n.visible,o=n.getContainer,i=r.props,a=i.visible,c=i.getContainer;a!==t&&T&&M(c)===document.body&&(a&&!t?b+=1:e&&(b-=1)),("function"==typeof c&&"function"==typeof o?c.toString()!==o.toString():c!==o)&&r.removeCurrentContainer()},r.attachToParent=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(e||r.container&&!r.container.parentNode){var n=M(r.props.getContainer);return!!n&&(n.appendChild(r.container),!0)}return!0},r.getContainer=function(){return T?(r.container||(r.container=document.createElement("div"),r.attachToParent(!0)),r.setWrapperClassName(),r.container):null},r.setWrapperClassName=function(){var e=r.props.wrapperClassName;r.container&&e&&e!==r.container.className&&(r.container.className=e)},r.removeCurrentContainer=function(){var e,n;null===(e=r.container)||void 0===e||null===(n=e.parentNode)||void 0===n||n.removeChild(r.container)},r.switchScrollingEffect=function(){1!==b||Object.keys(S).length?b||(p(S),S={},m(!0)):(m(),S=p({overflow:"hidden",overflowX:"hidden",overflowY:"hidden"}))},r.scrollLocker=new N({container:M(e.getContainer)}),r}return(0,r.Z)(t,[{key:"componentDidMount",value:function(){var e=this;this.updateOpenCount(),this.attachToParent()||(this.rafId=(0,d.Z)((function(){e.forceUpdate()})))}},{key:"componentDidUpdate",value:function(e){this.updateOpenCount(e),this.updateScrollLocker(e),this.setWrapperClassName(),this.attachToParent()}},{key:"componentWillUnmount",value:function(){var e=this.props,n=e.visible,t=e.getContainer;T&&M(t)===document.body&&(b=n&&b?b-1:b),this.removeCurrentContainer(),d.Z.cancel(this.rafId)}},{key:"render",value:function(){var e=this.props,n=e.children,t=e.forceRender,o=e.visible,r=null,i={getOpenCount:function(){return b},getContainer:this.getContainer,switchScrollingEffect:this.switchScrollingEffect,scrollLocker:this.scrollLocker};return(t||o||this.componentRef.current)&&(r=u.createElement(l.Z,{getContainer:this.getContainer,ref:this.componentRef},n(i))),r}}]),t}(u.Component)},4204:(e,n,t)=>{var o;function r(e){if("undefined"==typeof document)return 0;if(e||void 0===o){var n=document.createElement("div");n.style.width="100%",n.style.height="200px";var t=document.createElement("div"),r=t.style;r.position="absolute",r.top="0",r.left="0",r.pointerEvents="none",r.visibility="hidden",r.width="200px",r.height="150px",r.overflow="hidden",t.appendChild(n),document.body.appendChild(t);var i=n.offsetWidth;t.style.overflow="scroll";var a=n.offsetWidth;i===a&&(a=t.clientWidth),document.body.removeChild(t),o=i-a}return o}function i(e){var n=e.match(/^(.*)px$/),t=Number(null==n?void 0:n[1]);return Number.isNaN(t)?r():t}function a(e){if(!("undefined"!=typeof document&&e&&e instanceof Element))return{width:0,height:0};var n=getComputedStyle(e,"::-webkit-scrollbar"),t=n.width,o=n.height;return{width:i(t),height:i(o)}}t.d(n,{Z:()=>r,o:()=>a})},6982:(e,n,t)=>{t.d(n,{Z:()=>r});var o=t(7294);function r(e,n,t){var r=o.useRef({});return"value"in r.current&&!t(r.current.condition,n)||(r.current.value=e(),r.current.condition=n),r.current.value}},1770:(e,n,t)=>{t.d(n,{Z:()=>i});var o=t(9439),r=t(7294);function i(e,n){var t=n||{},i=t.defaultValue,a=t.value,c=t.onChange,u=t.postState,d=r.useState((function(){return void 0!==a?a:void 0!==i?"function"==typeof i?i():i:"function"==typeof e?e():e})),l=(0,o.Z)(d,2),s=l[0],f=l[1],p=void 0!==a?a:s;u&&(p=u(p));var v=r.useRef(!0);return r.useEffect((function(){v.current?v.current=!1:void 0===a&&f(a)}),[a]),[p,function(e){f(e),p!==e&&c&&c(e,p)}]}},1131:(e,n,t)=>{t.d(n,{Z:()=>o});const o=function(){if("undefined"==typeof navigator||"undefined"==typeof window)return!1;var e=navigator.userAgent||navigator.vendor||window.opera;return!(!/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(e)&&!/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(null==e?void 0:e.substr(0,4)))}},8423:(e,n,t)=>{t.d(n,{Z:()=>r});var o=t(1413);function r(e,n){var t=(0,o.Z)({},e);return Array.isArray(n)&&n.forEach((function(e){delete t[e]})),t}},4217:(e,n,t)=>{t.d(n,{Z:()=>u});var o=t(1413),r="".concat("accept acceptCharset accessKey action allowFullScreen allowTransparency\n    alt async autoComplete autoFocus autoPlay capture cellPadding cellSpacing challenge\n    charSet checked classID className colSpan cols content contentEditable contextMenu\n    controls coords crossOrigin data dateTime default defer dir disabled download draggable\n    encType form formAction formEncType formMethod formNoValidate formTarget frameBorder\n    headers height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity\n    is keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media\n    mediaGroup method min minLength multiple muted name noValidate nonce open\n    optimum pattern placeholder poster preload radioGroup readOnly rel required\n    reversed role rowSpan rows sandbox scope scoped scrolling seamless selected\n    shape size sizes span spellCheck src srcDoc srcLang srcSet start step style\n    summary tabIndex target title type useMap value width wmode wrap"," ").concat("onCopy onCut onPaste onCompositionEnd onCompositionStart onCompositionUpdate onKeyDown\n    onKeyPress onKeyUp onFocus onBlur onChange onInput onSubmit onClick onContextMenu onDoubleClick\n    onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown\n    onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp onSelect onTouchCancel\n    onTouchEnd onTouchMove onTouchStart onScroll onWheel onAbort onCanPlay onCanPlayThrough\n    onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata\n    onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting onLoad onError").split(/[\s\n]+/),i="aria-",a="data-";function c(e,n){return 0===e.indexOf(n)}function u(e){var n,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];n=!1===t?{aria:!0,data:!0,attr:!0}:!0===t?{aria:!0}:(0,o.Z)({},t);var u={};return Object.keys(e).forEach((function(t){(n.aria&&("role"===t||c(t,i))||n.data&&c(t,a)||n.attr&&r.includes(t))&&(u[t]=e[t])})),u}},5164:(e,n,t)=>{t.d(n,{Z:()=>u});var o=function(e){return+setTimeout(e,16)},r=function(e){return clearTimeout(e)};"undefined"!=typeof window&&"requestAnimationFrame"in window&&(o=function(e){return window.requestAnimationFrame(e)},r=function(e){return window.cancelAnimationFrame(e)});var i=0,a=new Map;function c(e){a.delete(e)}function u(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,t=i+=1;function r(n){if(0===n)c(t),e();else{var i=o((function(){r(n-1)}));a.set(t,i)}}return r(n),t}u.cancel=function(e){var n=a.get(e);return c(n),r(n)}},2550:(e,n,t)=>{t.d(n,{mH:()=>i,sQ:()=>a,Yr:()=>c});var o=t(1002),r=t(9864);function i(e,n){"function"==typeof e?e(n):"object"===(0,o.Z)(e)&&e&&"current"in e&&(e.current=n)}function a(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return function(e){n.forEach((function(n){i(n,e)}))}}function c(e){var n,t,o=(0,r.isMemo)(e)?e.type.type:e.type;return!("function"==typeof o&&!(null===(n=o.prototype)||void 0===n?void 0:n.render))&&!("function"==typeof e&&!(null===(t=e.prototype)||void 0===t?void 0:t.render))}},8306:(e,n,t)=>{function o(e,n){for(var t=e,o=0;o<n.length;o+=1){if(null==t)return;t=t[n[o]]}return t}t.d(n,{Z:()=>o})},8880:(e,n,t)=>{t.d(n,{Z:()=>u});var o=t(1413),r=t(3433),i=t(4506),a=t(8306);function c(e,n,t,a){if(!n.length)return t;var u,d=(0,i.Z)(n),l=d[0],s=d.slice(1);return u=e||"number"!=typeof l?Array.isArray(e)?(0,r.Z)(e):(0,o.Z)({},e):[],a&&void 0===t&&1===s.length?delete u[l][s[0]]:u[l]=c(u[l],s,t,a),u}function u(e,n,t){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return n.length&&o&&void 0===t&&!(0,a.Z)(e,n.slice(0,-1))?e:c(e,n,t,o)}},334:(e,n,t)=>{t.d(n,{ET:()=>c,ZP:()=>u});var o={};function r(e,n){0}function i(e,n){0}function a(e,n,t){n||o[t]||(e(!1,t),o[t]=!0)}function c(e,n){a(i,e,n)}const u=function(e,n){a(r,e,n)}},9158:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}},3399:(e,n,t)=>{var o=t(5318);Object.defineProperty(n,"__esModule",{value:!0}),n.injectCSS=c,n.updateCSS=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=a(t);if(!u.has(o)){var r=c("",t),d=r.parentNode;u.set(o,d),d.removeChild(r)}var l=Array.from(u.get(o).children).find((function(e){return"STYLE"===e.tagName&&e[i]===n}));if(l){var s,f,p;if((null===(s=t.csp)||void 0===s?void 0:s.nonce)&&l.nonce!==(null===(f=t.csp)||void 0===f?void 0:f.nonce))l.nonce=null===(p=t.csp)||void 0===p?void 0:p.nonce;return l.innerHTML!==e&&(l.innerHTML=e),l}var v=c(e,t);return v[i]=n,v};var r=o(t(9158)),i="rc-util-key";function a(e){return e.attachTo?e.attachTo:document.querySelector("head")||document.body}function c(e){var n,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,r.default)())return null;var o,i=document.createElement("style");(null===(n=t.csp)||void 0===n?void 0:n.nonce)&&(i.nonce=null===(o=t.csp)||void 0===o?void 0:o.nonce);i.innerHTML=e;var c=a(t),u=c.firstChild;return t.prepend&&c.prepend?c.prepend(i):t.prepend&&u?c.insertBefore(i,u):c.appendChild(i),i}var u=new Map},5520:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.warning=o,n.note=r,n.resetWarned=function(){t={}},n.call=i,n.warningOnce=a,n.noteOnce=function(e,n){i(r,e,n)},n.default=void 0;var t={};function o(e,n){0}function r(e,n){0}function i(e,n,o){n||t[o]||(e(!1,o),t[o]=!0)}function a(e,n){i(o,e,n)}var c=a;n.default=c}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Iiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVyLWRlZ3JlZS8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0NoaWxkcmVuL3RvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFzdGVyLWRlZ3JlZS8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0RvbS9hZGRFdmVudExpc3RlbmVyLmpzIiwid2VicGFjazovL21hc3Rlci1kZWdyZWUvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9Eb20vY2FuVXNlRG9tLmpzIiwid2VicGFjazovL21hc3Rlci1kZWdyZWUvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9Eb20vY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vbWFzdGVyLWRlZ3JlZS8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0RvbS9jc3MuanMiLCJ3ZWJwYWNrOi8vbWFzdGVyLWRlZ3JlZS8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0RvbS9keW5hbWljQ1NTLmpzIiwid2VicGFjazovL21hc3Rlci1kZWdyZWUvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9Eb20vZmluZERPTU5vZGUuanMiLCJ3ZWJwYWNrOi8vbWFzdGVyLWRlZ3JlZS8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0RvbS9mb2N1cy5qcyIsIndlYnBhY2s6Ly9tYXN0ZXItZGVncmVlLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvRG9tL2lzVmlzaWJsZS5qcyIsIndlYnBhY2s6Ly9tYXN0ZXItZGVncmVlLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvS2V5Q29kZS5qcyIsIndlYnBhY2s6Ly9tYXN0ZXItZGVncmVlLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvUG9ydGFsLmpzIiwid2VicGFjazovL21hc3Rlci1kZWdyZWUvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9zZXRTdHlsZS5qcyIsIndlYnBhY2s6Ly9tYXN0ZXItZGVncmVlLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvc3dpdGNoU2Nyb2xsaW5nRWZmZWN0LmpzIiwid2VicGFjazovL21hc3Rlci1kZWdyZWUvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9Eb20vc2Nyb2xsTG9ja2VyLmpzIiwid2VicGFjazovL21hc3Rlci1kZWdyZWUvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9Qb3J0YWxXcmFwcGVyLmpzIiwid2VicGFjazovL21hc3Rlci1kZWdyZWUvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9nZXRTY3JvbGxCYXJTaXplLmpzIiwid2VicGFjazovL21hc3Rlci1kZWdyZWUvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9ob29rcy91c2VNZW1vLmpzIiwid2VicGFjazovL21hc3Rlci1kZWdyZWUvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9ob29rcy91c2VNZXJnZWRTdGF0ZS5qcyIsIndlYnBhY2s6Ly9tYXN0ZXItZGVncmVlLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvaXNNb2JpbGUuanMiLCJ3ZWJwYWNrOi8vbWFzdGVyLWRlZ3JlZS8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL29taXQuanMiLCJ3ZWJwYWNrOi8vbWFzdGVyLWRlZ3JlZS8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL3BpY2tBdHRycy5qcyIsIndlYnBhY2s6Ly9tYXN0ZXItZGVncmVlLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvcmFmLmpzIiwid2VicGFjazovL21hc3Rlci1kZWdyZWUvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9yZWYuanMiLCJ3ZWJwYWNrOi8vbWFzdGVyLWRlZ3JlZS8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL3V0aWxzL2dldC5qcyIsIndlYnBhY2s6Ly9tYXN0ZXItZGVncmVlLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvdXRpbHMvc2V0LmpzIiwid2VicGFjazovL21hc3Rlci1kZWdyZWUvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy93YXJuaW5nLmpzIiwid2VicGFjazovL21hc3Rlci1kZWdyZWUvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9saWIvRG9tL2NhblVzZURvbS5qcyIsIndlYnBhY2s6Ly9tYXN0ZXItZGVncmVlLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvbGliL0RvbS9keW5hbWljQ1NTLmpzIiwid2VicGFjazovL21hc3Rlci1kZWdyZWUvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9saWIvd2FybmluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvQXJyYXkoY2hpbGRyZW4pIHtcbiAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciByZXQgPSBbXTtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKChjaGlsZCA9PT0gdW5kZWZpbmVkIHx8IGNoaWxkID09PSBudWxsKSAmJiAhb3B0aW9uLmtlZXBFbXB0eSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkKSkge1xuICAgICAgcmV0ID0gcmV0LmNvbmNhdCh0b0FycmF5KGNoaWxkKSk7XG4gICAgfSBlbHNlIGlmIChpc0ZyYWdtZW50KGNoaWxkKSAmJiBjaGlsZC5wcm9wcykge1xuICAgICAgcmV0ID0gcmV0LmNvbmNhdCh0b0FycmF5KGNoaWxkLnByb3BzLmNoaWxkcmVuLCBvcHRpb24pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXQ7XG59IiwiaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyV3JhcCh0YXJnZXQsIGV2ZW50VHlwZSwgY2IsIG9wdGlvbikge1xuICAvKiBlc2xpbnQgY2FtZWxjYXNlOiAyICovXG4gIHZhciBjYWxsYmFjayA9IFJlYWN0RE9NLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzID8gZnVuY3Rpb24gcnVuKGUpIHtcbiAgICBSZWFjdERPTS51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyhjYiwgZSk7XG4gIH0gOiBjYjtcblxuICBpZiAodGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBvcHRpb24pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIGlmICh0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FuVXNlRG9tKCkge1xuICByZXR1cm4gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250YWlucyhyb290LCBuKSB7XG4gIGlmICghcm9vdCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiByb290LmNvbnRhaW5zKG4pO1xufSIsIi8qIGVzbGludC1kaXNhYmxlIG5vLW5lc3RlZC10ZXJuYXJ5ICovXG52YXIgUElYRUxfUEFUVEVSTiA9IC9tYXJnaW58cGFkZGluZ3x3aWR0aHxoZWlnaHR8bWF4fG1pbnxvZmZzZXQvO1xudmFyIHJlbW92ZVBpeGVsID0ge1xuICBsZWZ0OiB0cnVlLFxuICB0b3A6IHRydWVcbn07XG52YXIgZmxvYXRNYXAgPSB7XG4gIGNzc0Zsb2F0OiAxLFxuICBzdHlsZUZsb2F0OiAxLFxuICBmbG9hdDogMVxufTtcblxuZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKSB7XG4gIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAxID8gbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkgOiB7fTtcbn1cblxuZnVuY3Rpb24gZ2V0U3R5bGVWYWx1ZShub2RlLCB0eXBlLCB2YWx1ZSkge1xuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmICh2YWx1ZSA9PT0gJ2F1dG8nKSB7XG4gICAgaWYgKHR5cGUgPT09ICdoZWlnaHQnKSB7XG4gICAgICByZXR1cm4gbm9kZS5vZmZzZXRIZWlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09ICd3aWR0aCcpIHtcbiAgICAgIHJldHVybiBub2RlLm9mZnNldFdpZHRoO1xuICAgIH1cbiAgfVxuXG4gIGlmICghKHR5cGUgaW4gcmVtb3ZlUGl4ZWwpKSB7XG4gICAgcmVtb3ZlUGl4ZWxbdHlwZV0gPSBQSVhFTF9QQVRURVJOLnRlc3QodHlwZSk7XG4gIH1cblxuICByZXR1cm4gcmVtb3ZlUGl4ZWxbdHlwZV0gPyBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwIDogdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQobm9kZSwgbmFtZSkge1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgbmFtZSA9IGZsb2F0TWFwW25hbWVdID8gJ2Nzc0Zsb2F0JyBpbiBub2RlLnN0eWxlID8gJ2Nzc0Zsb2F0JyA6ICdzdHlsZUZsb2F0JyA6IG5hbWU7XG4gIHJldHVybiBsZW5ndGggPT09IDEgPyBzdHlsZSA6IGdldFN0eWxlVmFsdWUobm9kZSwgbmFtZSwgc3R5bGVbbmFtZV0gfHwgbm9kZS5zdHlsZVtuYW1lXSk7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0KG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICBuYW1lID0gZmxvYXRNYXBbbmFtZV0gPyAnY3NzRmxvYXQnIGluIG5vZGUuc3R5bGUgPyAnY3NzRmxvYXQnIDogJ3N0eWxlRmxvYXQnIDogbmFtZTtcblxuICBpZiAobGVuZ3RoID09PSAzKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgUElYRUxfUEFUVEVSTi50ZXN0KG5hbWUpKSB7XG4gICAgICB2YWx1ZSA9IFwiXCIuY29uY2F0KHZhbHVlLCBcInB4XCIpO1xuICAgIH1cblxuICAgIG5vZGUuc3R5bGVbbmFtZV0gPSB2YWx1ZTsgLy8gTnVtYmVyXG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBmb3IgKHZhciB4IGluIG5hbWUpIHtcbiAgICBpZiAobmFtZS5oYXNPd25Qcm9wZXJ0eSh4KSkge1xuICAgICAgc2V0KG5vZGUsIHgsIG5hbWVbeF0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE91dGVyV2lkdGgoZWwpIHtcbiAgaWYgKGVsID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgfVxuXG4gIHJldHVybiBlbC5vZmZzZXRXaWR0aDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRPdXRlckhlaWdodChlbCkge1xuICBpZiAoZWwgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIH1cblxuICByZXR1cm4gZWwub2Zmc2V0SGVpZ2h0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldERvY1NpemUoKSB7XG4gIHZhciB3aWR0aCA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aCwgZG9jdW1lbnQuYm9keS5zY3JvbGxXaWR0aCk7XG4gIHZhciBoZWlnaHQgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0LCBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCk7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2xpZW50U2l6ZSgpIHtcbiAgdmFyIHdpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Nyb2xsKCkge1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQpLFxuICAgIHNjcm9sbFRvcDogTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3ApXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0T2Zmc2V0KG5vZGUpIHtcbiAgdmFyIGJveCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OyAvLyA8IGllOCDkuI3mlK/mjIEgd2luLnBhZ2VYT2Zmc2V0LCDliJnkvb/nlKggZG9jRWxlbS5zY3JvbGxMZWZ0XG5cbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBib3gubGVmdCArICh3aW5kb3cucGFnZVhPZmZzZXQgfHwgZG9jRWxlbS5zY3JvbGxMZWZ0KSAtIChkb2NFbGVtLmNsaWVudExlZnQgfHwgZG9jdW1lbnQuYm9keS5jbGllbnRMZWZ0IHx8IDApLFxuICAgIHRvcDogYm94LnRvcCArICh3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jRWxlbS5zY3JvbGxUb3ApIC0gKGRvY0VsZW0uY2xpZW50VG9wIHx8IGRvY3VtZW50LmJvZHkuY2xpZW50VG9wIHx8IDApXG4gIH07XG59IiwiaW1wb3J0IGNhblVzZURvbSBmcm9tICcuL2NhblVzZURvbSc7XG52YXIgTUFSS19LRVkgPSBcInJjLXV0aWwta2V5XCI7XG5cbmZ1bmN0aW9uIGdldENvbnRhaW5lcihvcHRpb24pIHtcbiAgaWYgKG9wdGlvbi5hdHRhY2hUbykge1xuICAgIHJldHVybiBvcHRpb24uYXR0YWNoVG87XG4gIH1cblxuICB2YXIgaGVhZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKTtcbiAgcmV0dXJuIGhlYWQgfHwgZG9jdW1lbnQuYm9keTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdENTUyhjc3MpIHtcbiAgdmFyIF9vcHRpb24kY3NwO1xuXG4gIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIGlmICghY2FuVXNlRG9tKCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBzdHlsZU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gIGlmICgoX29wdGlvbiRjc3AgPSBvcHRpb24uY3NwKSA9PT0gbnVsbCB8fCBfb3B0aW9uJGNzcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbiRjc3Aubm9uY2UpIHtcbiAgICB2YXIgX29wdGlvbiRjc3AyO1xuXG4gICAgc3R5bGVOb2RlLm5vbmNlID0gKF9vcHRpb24kY3NwMiA9IG9wdGlvbi5jc3ApID09PSBudWxsIHx8IF9vcHRpb24kY3NwMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbiRjc3AyLm5vbmNlO1xuICB9XG5cbiAgc3R5bGVOb2RlLmlubmVySFRNTCA9IGNzcztcbiAgdmFyIGNvbnRhaW5lciA9IGdldENvbnRhaW5lcihvcHRpb24pO1xuICB2YXIgZmlyc3RDaGlsZCA9IGNvbnRhaW5lci5maXJzdENoaWxkO1xuXG4gIGlmIChvcHRpb24ucHJlcGVuZCAmJiBjb250YWluZXIucHJlcGVuZCkge1xuICAgIC8vIFVzZSBgcHJlcGVuZGAgZmlyc3RcbiAgICBjb250YWluZXIucHJlcGVuZChzdHlsZU5vZGUpO1xuICB9IGVsc2UgaWYgKG9wdGlvbi5wcmVwZW5kICYmIGZpcnN0Q2hpbGQpIHtcbiAgICAvLyBGYWxsYmFjayB0byBgaW5zZXJ0QmVmb3JlYCBsaWtlIElFIG5vdCBzdXBwb3J0IGBwcmVwZW5kYFxuICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUoc3R5bGVOb2RlLCBmaXJzdENoaWxkKTtcbiAgfSBlbHNlIHtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoc3R5bGVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZU5vZGU7XG59XG52YXIgY29udGFpbmVyQ2FjaGUgPSBuZXcgTWFwKCk7XG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQ1NTKGNzcywga2V5KSB7XG4gIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICB2YXIgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKG9wdGlvbik7IC8vIEdldCByZWFsIHBhcmVudFxuXG4gIGlmICghY29udGFpbmVyQ2FjaGUuaGFzKGNvbnRhaW5lcikpIHtcbiAgICB2YXIgcGxhY2Vob2xkZXJTdHlsZSA9IGluamVjdENTUygnJywgb3B0aW9uKTtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHBsYWNlaG9sZGVyU3R5bGUucGFyZW50Tm9kZTtcbiAgICBjb250YWluZXJDYWNoZS5zZXQoY29udGFpbmVyLCBwYXJlbnROb2RlKTtcbiAgICBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKHBsYWNlaG9sZGVyU3R5bGUpO1xuICB9XG5cbiAgdmFyIGV4aXN0Tm9kZSA9IEFycmF5LmZyb20oY29udGFpbmVyQ2FjaGUuZ2V0KGNvbnRhaW5lcikuY2hpbGRyZW4pLmZpbmQoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50YWdOYW1lID09PSAnU1RZTEUnICYmIG5vZGVbTUFSS19LRVldID09PSBrZXk7XG4gIH0pO1xuXG4gIGlmIChleGlzdE5vZGUpIHtcbiAgICB2YXIgX29wdGlvbiRjc3AzLCBfb3B0aW9uJGNzcDQ7XG5cbiAgICBpZiAoKChfb3B0aW9uJGNzcDMgPSBvcHRpb24uY3NwKSA9PT0gbnVsbCB8fCBfb3B0aW9uJGNzcDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb24kY3NwMy5ub25jZSkgJiYgZXhpc3ROb2RlLm5vbmNlICE9PSAoKF9vcHRpb24kY3NwNCA9IG9wdGlvbi5jc3ApID09PSBudWxsIHx8IF9vcHRpb24kY3NwNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbiRjc3A0Lm5vbmNlKSkge1xuICAgICAgdmFyIF9vcHRpb24kY3NwNTtcblxuICAgICAgZXhpc3ROb2RlLm5vbmNlID0gKF9vcHRpb24kY3NwNSA9IG9wdGlvbi5jc3ApID09PSBudWxsIHx8IF9vcHRpb24kY3NwNSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbiRjc3A1Lm5vbmNlO1xuICAgIH1cblxuICAgIGlmIChleGlzdE5vZGUuaW5uZXJIVE1MICE9PSBjc3MpIHtcbiAgICAgIGV4aXN0Tm9kZS5pbm5lckhUTUwgPSBjc3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4aXN0Tm9kZTtcbiAgfVxuXG4gIHZhciBuZXdOb2RlID0gaW5qZWN0Q1NTKGNzcywgb3B0aW9uKTtcbiAgbmV3Tm9kZVtNQVJLX0tFWV0gPSBrZXk7XG4gIHJldHVybiBuZXdOb2RlO1xufSIsImltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuLyoqXG4gKiBSZXR1cm4gaWYgYSBub2RlIGlzIGEgRE9NIG5vZGUuIEVsc2Ugd2lsbCByZXR1cm4gYnkgYGZpbmRET01Ob2RlYFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmRET01Ob2RlKG5vZGUpIHtcbiAgaWYgKG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0RE9NLmZpbmRET01Ob2RlKG5vZGUpO1xufSIsImltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgaXNWaXNpYmxlIGZyb20gJy4vaXNWaXNpYmxlJztcblxuZnVuY3Rpb24gZm9jdXNhYmxlKG5vZGUpIHtcbiAgdmFyIGluY2x1ZGVQb3NpdGl2ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgaWYgKGlzVmlzaWJsZShub2RlKSkge1xuICAgIHZhciBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgaXNGb2N1c2FibGVFbGVtZW50ID0gLy8gRm9jdXNhYmxlIGVsZW1lbnRcbiAgICBbJ2lucHV0JywgJ3NlbGVjdCcsICd0ZXh0YXJlYScsICdidXR0b24nXS5pbmNsdWRlcyhub2RlTmFtZSkgfHwgLy8gRWRpdGFibGUgZWxlbWVudFxuICAgIG5vZGUuaXNDb250ZW50RWRpdGFibGUgfHwgbm9kZU5hbWUgPT09ICdhJyAmJiAhIW5vZGUuZ2V0QXR0cmlidXRlKCdocmVmJyk7IC8vIEdldCB0YWJJbmRleFxuXG4gICAgdmFyIHRhYkluZGV4QXR0ciA9IG5vZGUuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpO1xuICAgIHZhciB0YWJJbmRleE51bSA9IE51bWJlcih0YWJJbmRleEF0dHIpOyAvLyBQYXJzZSBhcyBudW1iZXIgaWYgdmFsaWRhdGVcblxuICAgIHZhciB0YWJJbmRleCA9IG51bGw7XG5cbiAgICBpZiAodGFiSW5kZXhBdHRyICYmICFOdW1iZXIuaXNOYU4odGFiSW5kZXhOdW0pKSB7XG4gICAgICB0YWJJbmRleCA9IHRhYkluZGV4TnVtO1xuICAgIH0gZWxzZSBpZiAoaXNGb2N1c2FibGVFbGVtZW50ICYmIHRhYkluZGV4ID09PSBudWxsKSB7XG4gICAgICB0YWJJbmRleCA9IDA7XG4gICAgfSAvLyBCbG9jayBmb2N1c2FibGUgaWYgZGlzYWJsZWRcblxuXG4gICAgaWYgKGlzRm9jdXNhYmxlRWxlbWVudCAmJiBub2RlLmRpc2FibGVkKSB7XG4gICAgICB0YWJJbmRleCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhYkluZGV4ICE9PSBudWxsICYmICh0YWJJbmRleCA+PSAwIHx8IGluY2x1ZGVQb3NpdGl2ZSAmJiB0YWJJbmRleCA8IDApO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9jdXNOb2RlTGlzdChub2RlKSB7XG4gIHZhciBpbmNsdWRlUG9zaXRpdmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciByZXMgPSBfdG9Db25zdW1hYmxlQXJyYXkobm9kZS5xdWVyeVNlbGVjdG9yQWxsKCcqJykpLmZpbHRlcihmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gZm9jdXNhYmxlKGNoaWxkLCBpbmNsdWRlUG9zaXRpdmUpO1xuICB9KTtcblxuICBpZiAoZm9jdXNhYmxlKG5vZGUsIGluY2x1ZGVQb3NpdGl2ZSkpIHtcbiAgICByZXMudW5zaGlmdChub2RlKTtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59XG52YXIgbGFzdEZvY3VzRWxlbWVudCA9IG51bGw7XG4vKiogQGRlcHJlY2F0ZWQgRG8gbm90IHVzZSBzaW5jZSB0aGlzIG1heSBmYWlsZWQgd2hlbiB1c2VkIGluIGFzeW5jICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzYXZlTGFzdEZvY3VzTm9kZSgpIHtcbiAgbGFzdEZvY3VzRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG59XG4vKiogQGRlcHJlY2F0ZWQgRG8gbm90IHVzZSBzaW5jZSB0aGlzIG1heSBmYWlsZWQgd2hlbiB1c2VkIGluIGFzeW5jICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckxhc3RGb2N1c05vZGUoKSB7XG4gIGxhc3RGb2N1c0VsZW1lbnQgPSBudWxsO1xufVxuLyoqIEBkZXByZWNhdGVkIERvIG5vdCB1c2Ugc2luY2UgdGhpcyBtYXkgZmFpbGVkIHdoZW4gdXNlZCBpbiBhc3luYyAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYmFja0xhc3RGb2N1c05vZGUoKSB7XG4gIGlmIChsYXN0Rm9jdXNFbGVtZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIOWFg+e0oOWPr+iDveW3sue7j+iiq+enu+WKqOS6hlxuICAgICAgbGFzdEZvY3VzRWxlbWVudC5mb2N1cygpO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tZW1wdHkgKi9cbiAgICB9IGNhdGNoIChlKSB7Ly8gZW1wdHlcbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1lbXB0eSAqL1xuXG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBsaW1pdFRhYlJhbmdlKG5vZGUsIGUpIHtcbiAgaWYgKGUua2V5Q29kZSA9PT0gOSkge1xuICAgIHZhciB0YWJOb2RlTGlzdCA9IGdldEZvY3VzTm9kZUxpc3Qobm9kZSk7XG4gICAgdmFyIGxhc3RUYWJOb2RlID0gdGFiTm9kZUxpc3RbZS5zaGlmdEtleSA/IDAgOiB0YWJOb2RlTGlzdC5sZW5ndGggLSAxXTtcbiAgICB2YXIgbGVhdmluZ1RhYiA9IGxhc3RUYWJOb2RlID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8IG5vZGUgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cbiAgICBpZiAobGVhdmluZ1RhYikge1xuICAgICAgdmFyIHRhcmdldCA9IHRhYk5vZGVMaXN0W2Uuc2hpZnRLZXkgPyB0YWJOb2RlTGlzdC5sZW5ndGggLSAxIDogMF07XG4gICAgICB0YXJnZXQuZm9jdXMoKTtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGVsZW1lbnQub2Zmc2V0UGFyZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoZWxlbWVudC5nZXRCQm94KSB7XG4gICAgdmFyIGJveCA9IGVsZW1lbnQuZ2V0QkJveCgpO1xuXG4gICAgaWYgKGJveC53aWR0aCB8fCBib3guaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICB2YXIgX2JveCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBpZiAoX2JveC53aWR0aCB8fCBfYm94LmhlaWdodCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSk7IiwiLyoqXG4gKiBAaWdub3JlXG4gKiBzb21lIGtleS1jb2RlcyBkZWZpbml0aW9uIGFuZCB1dGlscyBmcm9tIGNsb3N1cmUtbGlicmFyeVxuICogQGF1dGhvciB5aW1pbmdoZUBnbWFpbC5jb21cbiAqL1xudmFyIEtleUNvZGUgPSB7XG4gIC8qKlxuICAgKiBNQUNfRU5URVJcbiAgICovXG4gIE1BQ19FTlRFUjogMyxcblxuICAvKipcbiAgICogQkFDS1NQQUNFXG4gICAqL1xuICBCQUNLU1BBQ0U6IDgsXG5cbiAgLyoqXG4gICAqIFRBQlxuICAgKi9cbiAgVEFCOiA5LFxuXG4gIC8qKlxuICAgKiBOVU1MT0NLIG9uIEZGL1NhZmFyaSBNYWNcbiAgICovXG4gIE5VTV9DRU5URVI6IDEyLFxuXG4gIC8qKlxuICAgKiBFTlRFUlxuICAgKi9cbiAgRU5URVI6IDEzLFxuXG4gIC8qKlxuICAgKiBTSElGVFxuICAgKi9cbiAgU0hJRlQ6IDE2LFxuXG4gIC8qKlxuICAgKiBDVFJMXG4gICAqL1xuICBDVFJMOiAxNyxcblxuICAvKipcbiAgICogQUxUXG4gICAqL1xuICBBTFQ6IDE4LFxuXG4gIC8qKlxuICAgKiBQQVVTRVxuICAgKi9cbiAgUEFVU0U6IDE5LFxuXG4gIC8qKlxuICAgKiBDQVBTX0xPQ0tcbiAgICovXG4gIENBUFNfTE9DSzogMjAsXG5cbiAgLyoqXG4gICAqIEVTQ1xuICAgKi9cbiAgRVNDOiAyNyxcblxuICAvKipcbiAgICogU1BBQ0VcbiAgICovXG4gIFNQQUNFOiAzMixcblxuICAvKipcbiAgICogUEFHRV9VUFxuICAgKi9cbiAgUEFHRV9VUDogMzMsXG5cbiAgLyoqXG4gICAqIFBBR0VfRE9XTlxuICAgKi9cbiAgUEFHRV9ET1dOOiAzNCxcblxuICAvKipcbiAgICogRU5EXG4gICAqL1xuICBFTkQ6IDM1LFxuXG4gIC8qKlxuICAgKiBIT01FXG4gICAqL1xuICBIT01FOiAzNixcblxuICAvKipcbiAgICogTEVGVFxuICAgKi9cbiAgTEVGVDogMzcsXG5cbiAgLyoqXG4gICAqIFVQXG4gICAqL1xuICBVUDogMzgsXG5cbiAgLyoqXG4gICAqIFJJR0hUXG4gICAqL1xuICBSSUdIVDogMzksXG5cbiAgLyoqXG4gICAqIERPV05cbiAgICovXG4gIERPV046IDQwLFxuXG4gIC8qKlxuICAgKiBQUklOVF9TQ1JFRU5cbiAgICovXG4gIFBSSU5UX1NDUkVFTjogNDQsXG5cbiAgLyoqXG4gICAqIElOU0VSVFxuICAgKi9cbiAgSU5TRVJUOiA0NSxcblxuICAvKipcbiAgICogREVMRVRFXG4gICAqL1xuICBERUxFVEU6IDQ2LFxuXG4gIC8qKlxuICAgKiBaRVJPXG4gICAqL1xuICBaRVJPOiA0OCxcblxuICAvKipcbiAgICogT05FXG4gICAqL1xuICBPTkU6IDQ5LFxuXG4gIC8qKlxuICAgKiBUV09cbiAgICovXG4gIFRXTzogNTAsXG5cbiAgLyoqXG4gICAqIFRIUkVFXG4gICAqL1xuICBUSFJFRTogNTEsXG5cbiAgLyoqXG4gICAqIEZPVVJcbiAgICovXG4gIEZPVVI6IDUyLFxuXG4gIC8qKlxuICAgKiBGSVZFXG4gICAqL1xuICBGSVZFOiA1MyxcblxuICAvKipcbiAgICogU0lYXG4gICAqL1xuICBTSVg6IDU0LFxuXG4gIC8qKlxuICAgKiBTRVZFTlxuICAgKi9cbiAgU0VWRU46IDU1LFxuXG4gIC8qKlxuICAgKiBFSUdIVFxuICAgKi9cbiAgRUlHSFQ6IDU2LFxuXG4gIC8qKlxuICAgKiBOSU5FXG4gICAqL1xuICBOSU5FOiA1NyxcblxuICAvKipcbiAgICogUVVFU1RJT05fTUFSS1xuICAgKi9cbiAgUVVFU1RJT05fTUFSSzogNjMsXG5cbiAgLyoqXG4gICAqIEFcbiAgICovXG4gIEE6IDY1LFxuXG4gIC8qKlxuICAgKiBCXG4gICAqL1xuICBCOiA2NixcblxuICAvKipcbiAgICogQ1xuICAgKi9cbiAgQzogNjcsXG5cbiAgLyoqXG4gICAqIERcbiAgICovXG4gIEQ6IDY4LFxuXG4gIC8qKlxuICAgKiBFXG4gICAqL1xuICBFOiA2OSxcblxuICAvKipcbiAgICogRlxuICAgKi9cbiAgRjogNzAsXG5cbiAgLyoqXG4gICAqIEdcbiAgICovXG4gIEc6IDcxLFxuXG4gIC8qKlxuICAgKiBIXG4gICAqL1xuICBIOiA3MixcblxuICAvKipcbiAgICogSVxuICAgKi9cbiAgSTogNzMsXG5cbiAgLyoqXG4gICAqIEpcbiAgICovXG4gIEo6IDc0LFxuXG4gIC8qKlxuICAgKiBLXG4gICAqL1xuICBLOiA3NSxcblxuICAvKipcbiAgICogTFxuICAgKi9cbiAgTDogNzYsXG5cbiAgLyoqXG4gICAqIE1cbiAgICovXG4gIE06IDc3LFxuXG4gIC8qKlxuICAgKiBOXG4gICAqL1xuICBOOiA3OCxcblxuICAvKipcbiAgICogT1xuICAgKi9cbiAgTzogNzksXG5cbiAgLyoqXG4gICAqIFBcbiAgICovXG4gIFA6IDgwLFxuXG4gIC8qKlxuICAgKiBRXG4gICAqL1xuICBROiA4MSxcblxuICAvKipcbiAgICogUlxuICAgKi9cbiAgUjogODIsXG5cbiAgLyoqXG4gICAqIFNcbiAgICovXG4gIFM6IDgzLFxuXG4gIC8qKlxuICAgKiBUXG4gICAqL1xuICBUOiA4NCxcblxuICAvKipcbiAgICogVVxuICAgKi9cbiAgVTogODUsXG5cbiAgLyoqXG4gICAqIFZcbiAgICovXG4gIFY6IDg2LFxuXG4gIC8qKlxuICAgKiBXXG4gICAqL1xuICBXOiA4NyxcblxuICAvKipcbiAgICogWFxuICAgKi9cbiAgWDogODgsXG5cbiAgLyoqXG4gICAqIFlcbiAgICovXG4gIFk6IDg5LFxuXG4gIC8qKlxuICAgKiBaXG4gICAqL1xuICBaOiA5MCxcblxuICAvKipcbiAgICogTUVUQVxuICAgKi9cbiAgTUVUQTogOTEsXG5cbiAgLyoqXG4gICAqIFdJTl9LRVlfUklHSFRcbiAgICovXG4gIFdJTl9LRVlfUklHSFQ6IDkyLFxuXG4gIC8qKlxuICAgKiBDT05URVhUX01FTlVcbiAgICovXG4gIENPTlRFWFRfTUVOVTogOTMsXG5cbiAgLyoqXG4gICAqIE5VTV9aRVJPXG4gICAqL1xuICBOVU1fWkVSTzogOTYsXG5cbiAgLyoqXG4gICAqIE5VTV9PTkVcbiAgICovXG4gIE5VTV9PTkU6IDk3LFxuXG4gIC8qKlxuICAgKiBOVU1fVFdPXG4gICAqL1xuICBOVU1fVFdPOiA5OCxcblxuICAvKipcbiAgICogTlVNX1RIUkVFXG4gICAqL1xuICBOVU1fVEhSRUU6IDk5LFxuXG4gIC8qKlxuICAgKiBOVU1fRk9VUlxuICAgKi9cbiAgTlVNX0ZPVVI6IDEwMCxcblxuICAvKipcbiAgICogTlVNX0ZJVkVcbiAgICovXG4gIE5VTV9GSVZFOiAxMDEsXG5cbiAgLyoqXG4gICAqIE5VTV9TSVhcbiAgICovXG4gIE5VTV9TSVg6IDEwMixcblxuICAvKipcbiAgICogTlVNX1NFVkVOXG4gICAqL1xuICBOVU1fU0VWRU46IDEwMyxcblxuICAvKipcbiAgICogTlVNX0VJR0hUXG4gICAqL1xuICBOVU1fRUlHSFQ6IDEwNCxcblxuICAvKipcbiAgICogTlVNX05JTkVcbiAgICovXG4gIE5VTV9OSU5FOiAxMDUsXG5cbiAgLyoqXG4gICAqIE5VTV9NVUxUSVBMWVxuICAgKi9cbiAgTlVNX01VTFRJUExZOiAxMDYsXG5cbiAgLyoqXG4gICAqIE5VTV9QTFVTXG4gICAqL1xuICBOVU1fUExVUzogMTA3LFxuXG4gIC8qKlxuICAgKiBOVU1fTUlOVVNcbiAgICovXG4gIE5VTV9NSU5VUzogMTA5LFxuXG4gIC8qKlxuICAgKiBOVU1fUEVSSU9EXG4gICAqL1xuICBOVU1fUEVSSU9EOiAxMTAsXG5cbiAgLyoqXG4gICAqIE5VTV9ESVZJU0lPTlxuICAgKi9cbiAgTlVNX0RJVklTSU9OOiAxMTEsXG5cbiAgLyoqXG4gICAqIEYxXG4gICAqL1xuICBGMTogMTEyLFxuXG4gIC8qKlxuICAgKiBGMlxuICAgKi9cbiAgRjI6IDExMyxcblxuICAvKipcbiAgICogRjNcbiAgICovXG4gIEYzOiAxMTQsXG5cbiAgLyoqXG4gICAqIEY0XG4gICAqL1xuICBGNDogMTE1LFxuXG4gIC8qKlxuICAgKiBGNVxuICAgKi9cbiAgRjU6IDExNixcblxuICAvKipcbiAgICogRjZcbiAgICovXG4gIEY2OiAxMTcsXG5cbiAgLyoqXG4gICAqIEY3XG4gICAqL1xuICBGNzogMTE4LFxuXG4gIC8qKlxuICAgKiBGOFxuICAgKi9cbiAgRjg6IDExOSxcblxuICAvKipcbiAgICogRjlcbiAgICovXG4gIEY5OiAxMjAsXG5cbiAgLyoqXG4gICAqIEYxMFxuICAgKi9cbiAgRjEwOiAxMjEsXG5cbiAgLyoqXG4gICAqIEYxMVxuICAgKi9cbiAgRjExOiAxMjIsXG5cbiAgLyoqXG4gICAqIEYxMlxuICAgKi9cbiAgRjEyOiAxMjMsXG5cbiAgLyoqXG4gICAqIE5VTUxPQ0tcbiAgICovXG4gIE5VTUxPQ0s6IDE0NCxcblxuICAvKipcbiAgICogU0VNSUNPTE9OXG4gICAqL1xuICBTRU1JQ09MT046IDE4NixcblxuICAvKipcbiAgICogREFTSFxuICAgKi9cbiAgREFTSDogMTg5LFxuXG4gIC8qKlxuICAgKiBFUVVBTFNcbiAgICovXG4gIEVRVUFMUzogMTg3LFxuXG4gIC8qKlxuICAgKiBDT01NQVxuICAgKi9cbiAgQ09NTUE6IDE4OCxcblxuICAvKipcbiAgICogUEVSSU9EXG4gICAqL1xuICBQRVJJT0Q6IDE5MCxcblxuICAvKipcbiAgICogU0xBU0hcbiAgICovXG4gIFNMQVNIOiAxOTEsXG5cbiAgLyoqXG4gICAqIEFQT1NUUk9QSEVcbiAgICovXG4gIEFQT1NUUk9QSEU6IDE5MixcblxuICAvKipcbiAgICogU0lOR0xFX1FVT1RFXG4gICAqL1xuICBTSU5HTEVfUVVPVEU6IDIyMixcblxuICAvKipcbiAgICogT1BFTl9TUVVBUkVfQlJBQ0tFVFxuICAgKi9cbiAgT1BFTl9TUVVBUkVfQlJBQ0tFVDogMjE5LFxuXG4gIC8qKlxuICAgKiBCQUNLU0xBU0hcbiAgICovXG4gIEJBQ0tTTEFTSDogMjIwLFxuXG4gIC8qKlxuICAgKiBDTE9TRV9TUVVBUkVfQlJBQ0tFVFxuICAgKi9cbiAgQ0xPU0VfU1FVQVJFX0JSQUNLRVQ6IDIyMSxcblxuICAvKipcbiAgICogV0lOX0tFWVxuICAgKi9cbiAgV0lOX0tFWTogMjI0LFxuXG4gIC8qKlxuICAgKiBNQUNfRkZfTUVUQVxuICAgKi9cbiAgTUFDX0ZGX01FVEE6IDIyNCxcblxuICAvKipcbiAgICogV0lOX0lNRVxuICAgKi9cbiAgV0lOX0lNRTogMjI5LFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT0gRnVuY3Rpb24gPT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgLyoqXG4gICAqIHdoZXRoZXIgdGV4dCBhbmQgbW9kaWZpZWQga2V5IGlzIGVudGVyZWQgYXQgdGhlIHNhbWUgdGltZS5cbiAgICovXG4gIGlzVGV4dE1vZGlmeWluZ0tleUV2ZW50OiBmdW5jdGlvbiBpc1RleHRNb2RpZnlpbmdLZXlFdmVudChlKSB7XG4gICAgdmFyIGtleUNvZGUgPSBlLmtleUNvZGU7XG5cbiAgICBpZiAoZS5hbHRLZXkgJiYgIWUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwga2V5Q29kZSA+PSBLZXlDb2RlLkYxICYmIGtleUNvZGUgPD0gS2V5Q29kZS5GMTIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIFRoZSBmb2xsb3dpbmcga2V5cyBhcmUgcXVpdGUgaGFybWxlc3MsIGV2ZW4gaW4gY29tYmluYXRpb24gd2l0aFxuICAgIC8vIENUUkwsIEFMVCBvciBTSElGVC5cblxuXG4gICAgc3dpdGNoIChrZXlDb2RlKSB7XG4gICAgICBjYXNlIEtleUNvZGUuQUxUOlxuICAgICAgY2FzZSBLZXlDb2RlLkNBUFNfTE9DSzpcbiAgICAgIGNhc2UgS2V5Q29kZS5DT05URVhUX01FTlU6XG4gICAgICBjYXNlIEtleUNvZGUuQ1RSTDpcbiAgICAgIGNhc2UgS2V5Q29kZS5ET1dOOlxuICAgICAgY2FzZSBLZXlDb2RlLkVORDpcbiAgICAgIGNhc2UgS2V5Q29kZS5FU0M6XG4gICAgICBjYXNlIEtleUNvZGUuSE9NRTpcbiAgICAgIGNhc2UgS2V5Q29kZS5JTlNFUlQ6XG4gICAgICBjYXNlIEtleUNvZGUuTEVGVDpcbiAgICAgIGNhc2UgS2V5Q29kZS5NQUNfRkZfTUVUQTpcbiAgICAgIGNhc2UgS2V5Q29kZS5NRVRBOlxuICAgICAgY2FzZSBLZXlDb2RlLk5VTUxPQ0s6XG4gICAgICBjYXNlIEtleUNvZGUuTlVNX0NFTlRFUjpcbiAgICAgIGNhc2UgS2V5Q29kZS5QQUdFX0RPV046XG4gICAgICBjYXNlIEtleUNvZGUuUEFHRV9VUDpcbiAgICAgIGNhc2UgS2V5Q29kZS5QQVVTRTpcbiAgICAgIGNhc2UgS2V5Q29kZS5QUklOVF9TQ1JFRU46XG4gICAgICBjYXNlIEtleUNvZGUuUklHSFQ6XG4gICAgICBjYXNlIEtleUNvZGUuU0hJRlQ6XG4gICAgICBjYXNlIEtleUNvZGUuVVA6XG4gICAgICBjYXNlIEtleUNvZGUuV0lOX0tFWTpcbiAgICAgIGNhc2UgS2V5Q29kZS5XSU5fS0VZX1JJR0hUOlxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogd2hldGhlciBjaGFyYWN0ZXIgaXMgZW50ZXJlZC5cbiAgICovXG4gIGlzQ2hhcmFjdGVyS2V5OiBmdW5jdGlvbiBpc0NoYXJhY3RlcktleShrZXlDb2RlKSB7XG4gICAgaWYgKGtleUNvZGUgPj0gS2V5Q29kZS5aRVJPICYmIGtleUNvZGUgPD0gS2V5Q29kZS5OSU5FKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoa2V5Q29kZSA+PSBLZXlDb2RlLk5VTV9aRVJPICYmIGtleUNvZGUgPD0gS2V5Q29kZS5OVU1fTVVMVElQTFkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChrZXlDb2RlID49IEtleUNvZGUuQSAmJiBrZXlDb2RlIDw9IEtleUNvZGUuWikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSAvLyBTYWZhcmkgc2VuZHMgemVybyBrZXkgY29kZSBmb3Igbm9uLWxhdGluIGNoYXJhY3RlcnMuXG5cblxuICAgIGlmICh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdXZWJLaXQnKSAhPT0gLTEgJiYga2V5Q29kZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc3dpdGNoIChrZXlDb2RlKSB7XG4gICAgICBjYXNlIEtleUNvZGUuU1BBQ0U6XG4gICAgICBjYXNlIEtleUNvZGUuUVVFU1RJT05fTUFSSzpcbiAgICAgIGNhc2UgS2V5Q29kZS5OVU1fUExVUzpcbiAgICAgIGNhc2UgS2V5Q29kZS5OVU1fTUlOVVM6XG4gICAgICBjYXNlIEtleUNvZGUuTlVNX1BFUklPRDpcbiAgICAgIGNhc2UgS2V5Q29kZS5OVU1fRElWSVNJT046XG4gICAgICBjYXNlIEtleUNvZGUuU0VNSUNPTE9OOlxuICAgICAgY2FzZSBLZXlDb2RlLkRBU0g6XG4gICAgICBjYXNlIEtleUNvZGUuRVFVQUxTOlxuICAgICAgY2FzZSBLZXlDb2RlLkNPTU1BOlxuICAgICAgY2FzZSBLZXlDb2RlLlBFUklPRDpcbiAgICAgIGNhc2UgS2V5Q29kZS5TTEFTSDpcbiAgICAgIGNhc2UgS2V5Q29kZS5BUE9TVFJPUEhFOlxuICAgICAgY2FzZSBLZXlDb2RlLlNJTkdMRV9RVU9URTpcbiAgICAgIGNhc2UgS2V5Q29kZS5PUEVOX1NRVUFSRV9CUkFDS0VUOlxuICAgICAgY2FzZSBLZXlDb2RlLkJBQ0tTTEFTSDpcbiAgICAgIGNhc2UgS2V5Q29kZS5DTE9TRV9TUVVBUkVfQlJBQ0tFVDpcbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBLZXlDb2RlOyIsImltcG9ydCB7IHVzZVJlZiwgdXNlRWZmZWN0LCBmb3J3YXJkUmVmLCB1c2VJbXBlcmF0aXZlSGFuZGxlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY2FuVXNlRG9tIGZyb20gJy4vRG9tL2NhblVzZURvbSc7XG52YXIgUG9ydGFsID0gLyojX19QVVJFX18qL2ZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgdmFyIGRpZFVwZGF0ZSA9IHByb3BzLmRpZFVwZGF0ZSxcbiAgICAgIGdldENvbnRhaW5lciA9IHByb3BzLmdldENvbnRhaW5lcixcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG4gIHZhciBjb250YWluZXJSZWYgPSB1c2VSZWYoKTsgLy8gUmVmIHJldHVybiBub3RoaW5nLCBvbmx5IGZvciB3cmFwcGVyIGNoZWNrIGV4aXN0XG5cbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pOyAvLyBDcmVhdGUgY29udGFpbmVyIGluIGNsaWVudCBzaWRlIHdpdGggc3luYyB0byBhdm9pZCB1c2VFZmZlY3Qgbm90IGdldCByZWZcblxuICB2YXIgaW5pdFJlZiA9IHVzZVJlZihmYWxzZSk7XG5cbiAgaWYgKCFpbml0UmVmLmN1cnJlbnQgJiYgY2FuVXNlRG9tKCkpIHtcbiAgICBjb250YWluZXJSZWYuY3VycmVudCA9IGdldENvbnRhaW5lcigpO1xuICAgIGluaXRSZWYuY3VycmVudCA9IHRydWU7XG4gIH0gLy8gW0xlZ2FjeV0gVXNlZCBieSBgcmMtdHJpZ2dlcmBcblxuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZGlkVXBkYXRlID09PSBudWxsIHx8IGRpZFVwZGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGlkVXBkYXRlKHByb3BzKTtcbiAgfSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfY29udGFpbmVyUmVmJGN1cnJlbnQsIF9jb250YWluZXJSZWYkY3VycmVudDI7XG5cbiAgICAgIC8vIFtMZWdhY3ldIFRoaXMgc2hvdWxkIG5vdCBiZSBoYW5kbGUgYnkgUG9ydGFsIGJ1dCBwYXJlbnQgUG9ydGFsV3JhcHBlciBpbnN0ZWFkLlxuICAgICAgLy8gU2luY2Ugc29tZSBjb21wb25lbnQgdXNlIGBQb3J0YWxgIGRpcmVjdGx5LCB3ZSBoYXZlIHRvIGtlZXAgdGhlIGxvZ2ljIGhlcmUuXG4gICAgICAoX2NvbnRhaW5lclJlZiRjdXJyZW50ID0gY29udGFpbmVyUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9jb250YWluZXJSZWYkY3VycmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9jb250YWluZXJSZWYkY3VycmVudDIgPSBfY29udGFpbmVyUmVmJGN1cnJlbnQucGFyZW50Tm9kZSkgPT09IG51bGwgfHwgX2NvbnRhaW5lclJlZiRjdXJyZW50MiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NvbnRhaW5lclJlZiRjdXJyZW50Mi5yZW1vdmVDaGlsZChjb250YWluZXJSZWYuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gY29udGFpbmVyUmVmLmN1cnJlbnQgPyAvKiNfX1BVUkVfXyovUmVhY3RET00uY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBjb250YWluZXJSZWYuY3VycmVudCkgOiBudWxsO1xufSk7XG5leHBvcnQgZGVmYXVsdCBQb3J0YWw7IiwiLyoqXG4gKiBFYXN5IHRvIHNldCBlbGVtZW50IHN0eWxlLCByZXR1cm4gcHJldmlvdXMgc3R5bGVcbiAqIElFIGJyb3dzZXIgY29tcGF0aWJsZShJRSBicm93c2VyIGRvZXNuJ3QgbWVyZ2Ugb3ZlcmZsb3cgc3R5bGUsIG5lZWQgdG8gc2V0IGl0IHNlcGFyYXRlbHkpXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8xOTM5M1xuICpcbiAqL1xuZnVuY3Rpb24gc2V0U3R5bGUoc3R5bGUpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIGlmICghc3R5bGUpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMkZWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudCxcbiAgICAgIGVsZW1lbnQgPSBfb3B0aW9ucyRlbGVtZW50ID09PSB2b2lkIDAgPyBkb2N1bWVudC5ib2R5IDogX29wdGlvbnMkZWxlbWVudDtcbiAgdmFyIG9sZFN0eWxlID0ge307XG4gIHZhciBzdHlsZUtleXMgPSBPYmplY3Qua2V5cyhzdHlsZSk7IC8vIElFIGJyb3dzZXIgY29tcGF0aWJsZVxuXG4gIHN0eWxlS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBvbGRTdHlsZVtrZXldID0gZWxlbWVudC5zdHlsZVtrZXldO1xuICB9KTtcbiAgc3R5bGVLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlW2tleV07XG4gIH0pO1xuICByZXR1cm4gb2xkU3R5bGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNldFN0eWxlOyIsImltcG9ydCBnZXRTY3JvbGxCYXJTaXplIGZyb20gJy4vZ2V0U2Nyb2xsQmFyU2l6ZSc7XG5pbXBvcnQgc2V0U3R5bGUgZnJvbSAnLi9zZXRTdHlsZSc7XG5cbmZ1bmN0aW9uIGlzQm9keU92ZXJmbG93aW5nKCkge1xuICByZXR1cm4gZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQgPiAod2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpICYmIHdpbmRvdy5pbm5lcldpZHRoID4gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aDtcbn1cblxudmFyIGNhY2hlU3R5bGUgPSB7fTtcbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoY2xvc2UpIHtcbiAgaWYgKCFpc0JvZHlPdmVyZmxvd2luZygpICYmICFjbG9zZSkge1xuICAgIHJldHVybjtcbiAgfSAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8xOTcyOVxuXG5cbiAgdmFyIHNjcm9sbGluZ0VmZmVjdENsYXNzTmFtZSA9ICdhbnQtc2Nyb2xsaW5nLWVmZmVjdCc7XG4gIHZhciBzY3JvbGxpbmdFZmZlY3RDbGFzc05hbWVSZWcgPSBuZXcgUmVnRXhwKFwiXCIuY29uY2F0KHNjcm9sbGluZ0VmZmVjdENsYXNzTmFtZSksICdnJyk7XG4gIHZhciBib2R5Q2xhc3NOYW1lID0gZG9jdW1lbnQuYm9keS5jbGFzc05hbWU7XG5cbiAgaWYgKGNsb3NlKSB7XG4gICAgaWYgKCFzY3JvbGxpbmdFZmZlY3RDbGFzc05hbWVSZWcudGVzdChib2R5Q2xhc3NOYW1lKSkgcmV0dXJuO1xuICAgIHNldFN0eWxlKGNhY2hlU3R5bGUpO1xuICAgIGNhY2hlU3R5bGUgPSB7fTtcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSA9IGJvZHlDbGFzc05hbWUucmVwbGFjZShzY3JvbGxpbmdFZmZlY3RDbGFzc05hbWVSZWcsICcnKS50cmltKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNjcm9sbEJhclNpemUgPSBnZXRTY3JvbGxCYXJTaXplKCk7XG5cbiAgaWYgKHNjcm9sbEJhclNpemUpIHtcbiAgICBjYWNoZVN0eWxlID0gc2V0U3R5bGUoe1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICB3aWR0aDogXCJjYWxjKDEwMCUgLSBcIi5jb25jYXQoc2Nyb2xsQmFyU2l6ZSwgXCJweClcIilcbiAgICB9KTtcblxuICAgIGlmICghc2Nyb2xsaW5nRWZmZWN0Q2xhc3NOYW1lUmVnLnRlc3QoYm9keUNsYXNzTmFtZSkpIHtcbiAgICAgIHZhciBhZGRDbGFzc05hbWUgPSBcIlwiLmNvbmNhdChib2R5Q2xhc3NOYW1lLCBcIiBcIikuY29uY2F0KHNjcm9sbGluZ0VmZmVjdENsYXNzTmFtZSk7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSA9IGFkZENsYXNzTmFtZS50cmltKCk7XG4gICAgfVxuICB9XG59KTsiLCJpbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBnZXRTY3JvbGxCYXJTaXplIGZyb20gJy4uL2dldFNjcm9sbEJhclNpemUnO1xuaW1wb3J0IHNldFN0eWxlIGZyb20gJy4uL3NldFN0eWxlJztcbnZhciBsb2NrcyA9IFtdO1xudmFyIHNjcm9sbGluZ0VmZmVjdENsYXNzTmFtZSA9ICdhbnQtc2Nyb2xsaW5nLWVmZmVjdCc7XG52YXIgc2Nyb2xsaW5nRWZmZWN0Q2xhc3NOYW1lUmVnID0gbmV3IFJlZ0V4cChcIlwiLmNvbmNhdChzY3JvbGxpbmdFZmZlY3RDbGFzc05hbWUpLCAnZycpO1xudmFyIHV1aWQgPSAwOyAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8xOTM0MFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMTkzMzJcblxudmFyIGNhY2hlU3R5bGUgPSBuZXcgTWFwKCk7XG5cbnZhciBTY3JvbGxMb2NrZXIgPSBmdW5jdGlvbiBTY3JvbGxMb2NrZXIoX29wdGlvbnMpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2Nyb2xsTG9ja2VyKTtcblxuICB0aGlzLmxvY2tUYXJnZXQgPSB2b2lkIDA7XG4gIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcblxuICB0aGlzLmdldENvbnRhaW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMkb3B0aW9ucztcblxuICAgIHJldHVybiAoX3RoaXMkb3B0aW9ucyA9IF90aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF90aGlzJG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJG9wdGlvbnMuY29udGFpbmVyO1xuICB9O1xuXG4gIHRoaXMucmVMb2NrID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgZmluZExvY2sgPSBsb2Nrcy5maW5kKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gX3JlZi50YXJnZXQ7XG4gICAgICByZXR1cm4gdGFyZ2V0ID09PSBfdGhpcy5sb2NrVGFyZ2V0O1xuICAgIH0pO1xuXG4gICAgaWYgKGZpbmRMb2NrKSB7XG4gICAgICBfdGhpcy51bkxvY2soKTtcbiAgICB9XG5cbiAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIGlmIChmaW5kTG9jaykge1xuICAgICAgZmluZExvY2sub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICAgIF90aGlzLmxvY2soKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5sb2NrID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyRvcHRpb25zMztcblxuICAgIC8vIElmIGxvY2tUYXJnZXQgZXhpc3QgcmV0dXJuXG4gICAgaWYgKGxvY2tzLnNvbWUoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gX3JlZjIudGFyZ2V0O1xuICAgICAgcmV0dXJuIHRhcmdldCA9PT0gX3RoaXMubG9ja1RhcmdldDtcbiAgICB9KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gSWYgc2FtZSBjb250YWluZXIgZWZmZWN0LCByZXR1cm5cblxuXG4gICAgaWYgKGxvY2tzLnNvbWUoZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIgX3RoaXMkb3B0aW9uczI7XG5cbiAgICAgIHZhciBvcHRpb25zID0gX3JlZjMub3B0aW9ucztcbiAgICAgIHJldHVybiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNvbnRhaW5lcikgPT09ICgoX3RoaXMkb3B0aW9uczIgPSBfdGhpcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfdGhpcyRvcHRpb25zMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkb3B0aW9uczIuY29udGFpbmVyKTtcbiAgICB9KSkge1xuICAgICAgbG9ja3MgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGxvY2tzKSwgW3tcbiAgICAgICAgdGFyZ2V0OiBfdGhpcy5sb2NrVGFyZ2V0LFxuICAgICAgICBvcHRpb25zOiBfdGhpcy5vcHRpb25zXG4gICAgICB9XSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbEJhclNpemUgPSAwO1xuICAgIHZhciBjb250YWluZXIgPSAoKF90aGlzJG9wdGlvbnMzID0gX3RoaXMub3B0aW9ucykgPT09IG51bGwgfHwgX3RoaXMkb3B0aW9uczMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJG9wdGlvbnMzLmNvbnRhaW5lcikgfHwgZG9jdW1lbnQuYm9keTtcblxuICAgIGlmIChjb250YWluZXIgPT09IGRvY3VtZW50LmJvZHkgJiYgd2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPiAwIHx8IGNvbnRhaW5lci5zY3JvbGxIZWlnaHQgPiBjb250YWluZXIuY2xpZW50SGVpZ2h0KSB7XG4gICAgICBzY3JvbGxCYXJTaXplID0gZ2V0U2Nyb2xsQmFyU2l6ZSgpO1xuICAgIH1cblxuICAgIHZhciBjb250YWluZXJDbGFzc05hbWUgPSBjb250YWluZXIuY2xhc3NOYW1lO1xuXG4gICAgaWYgKGxvY2tzLmZpbHRlcihmdW5jdGlvbiAoX3JlZjQpIHtcbiAgICAgIHZhciBfdGhpcyRvcHRpb25zNDtcblxuICAgICAgdmFyIG9wdGlvbnMgPSBfcmVmNC5vcHRpb25zO1xuICAgICAgcmV0dXJuIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY29udGFpbmVyKSA9PT0gKChfdGhpcyRvcHRpb25zNCA9IF90aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF90aGlzJG9wdGlvbnM0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRvcHRpb25zNC5jb250YWluZXIpO1xuICAgIH0pLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY2FjaGVTdHlsZS5zZXQoY29udGFpbmVyLCBzZXRTdHlsZSh7XG4gICAgICAgIHdpZHRoOiBzY3JvbGxCYXJTaXplICE9PSAwID8gXCJjYWxjKDEwMCUgLSBcIi5jb25jYXQoc2Nyb2xsQmFyU2l6ZSwgXCJweClcIikgOiB1bmRlZmluZWQsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgICAgICAgb3ZlcmZsb3dZOiAnaGlkZGVuJ1xuICAgICAgfSwge1xuICAgICAgICBlbGVtZW50OiBjb250YWluZXJcbiAgICAgIH0pKTtcbiAgICB9IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzE5NzI5XG5cblxuICAgIGlmICghc2Nyb2xsaW5nRWZmZWN0Q2xhc3NOYW1lUmVnLnRlc3QoY29udGFpbmVyQ2xhc3NOYW1lKSkge1xuICAgICAgdmFyIGFkZENsYXNzTmFtZSA9IFwiXCIuY29uY2F0KGNvbnRhaW5lckNsYXNzTmFtZSwgXCIgXCIpLmNvbmNhdChzY3JvbGxpbmdFZmZlY3RDbGFzc05hbWUpO1xuICAgICAgY29udGFpbmVyLmNsYXNzTmFtZSA9IGFkZENsYXNzTmFtZS50cmltKCk7XG4gICAgfVxuXG4gICAgbG9ja3MgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGxvY2tzKSwgW3tcbiAgICAgIHRhcmdldDogX3RoaXMubG9ja1RhcmdldCxcbiAgICAgIG9wdGlvbnM6IF90aGlzLm9wdGlvbnNcbiAgICB9XSk7XG4gIH07XG5cbiAgdGhpcy51bkxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzJG9wdGlvbnM1O1xuXG4gICAgdmFyIGZpbmRMb2NrID0gbG9ja3MuZmluZChmdW5jdGlvbiAoX3JlZjUpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBfcmVmNS50YXJnZXQ7XG4gICAgICByZXR1cm4gdGFyZ2V0ID09PSBfdGhpcy5sb2NrVGFyZ2V0O1xuICAgIH0pO1xuICAgIGxvY2tzID0gbG9ja3MuZmlsdGVyKGZ1bmN0aW9uIChfcmVmNikge1xuICAgICAgdmFyIHRhcmdldCA9IF9yZWY2LnRhcmdldDtcbiAgICAgIHJldHVybiB0YXJnZXQgIT09IF90aGlzLmxvY2tUYXJnZXQ7XG4gICAgfSk7XG5cbiAgICBpZiAoIWZpbmRMb2NrIHx8IGxvY2tzLnNvbWUoZnVuY3Rpb24gKF9yZWY3KSB7XG4gICAgICB2YXIgX2ZpbmRMb2NrJG9wdGlvbnM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gX3JlZjcub3B0aW9ucztcbiAgICAgIHJldHVybiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNvbnRhaW5lcikgPT09ICgoX2ZpbmRMb2NrJG9wdGlvbnMgPSBmaW5kTG9jay5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZmluZExvY2skb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ZpbmRMb2NrJG9wdGlvbnMuY29udGFpbmVyKTtcbiAgICB9KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gUmVtb3ZlIEVmZmVjdFxuXG5cbiAgICB2YXIgY29udGFpbmVyID0gKChfdGhpcyRvcHRpb25zNSA9IF90aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF90aGlzJG9wdGlvbnM1ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRvcHRpb25zNS5jb250YWluZXIpIHx8IGRvY3VtZW50LmJvZHk7XG4gICAgdmFyIGNvbnRhaW5lckNsYXNzTmFtZSA9IGNvbnRhaW5lci5jbGFzc05hbWU7XG4gICAgaWYgKCFzY3JvbGxpbmdFZmZlY3RDbGFzc05hbWVSZWcudGVzdChjb250YWluZXJDbGFzc05hbWUpKSByZXR1cm47XG4gICAgc2V0U3R5bGUoY2FjaGVTdHlsZS5nZXQoY29udGFpbmVyKSwge1xuICAgICAgZWxlbWVudDogY29udGFpbmVyXG4gICAgfSk7XG4gICAgY2FjaGVTdHlsZS5kZWxldGUoY29udGFpbmVyKTtcbiAgICBjb250YWluZXIuY2xhc3NOYW1lID0gY29udGFpbmVyLmNsYXNzTmFtZS5yZXBsYWNlKHNjcm9sbGluZ0VmZmVjdENsYXNzTmFtZVJlZywgJycpLnRyaW0oKTtcbiAgfTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGx1c3BsdXNcbiAgdGhpcy5sb2NrVGFyZ2V0ID0gdXVpZCsrO1xuICB0aGlzLm9wdGlvbnMgPSBfb3B0aW9ucztcbn07XG5cbmV4cG9ydCB7IFNjcm9sbExvY2tlciBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXJcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUscmVhY3QvcmVxdWlyZS1kZWZhdWx0LXByb3BzICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmFmIGZyb20gJy4vcmFmJztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi9Qb3J0YWwnO1xuaW1wb3J0IGNhblVzZURvbSBmcm9tICcuL0RvbS9jYW5Vc2VEb20nO1xuaW1wb3J0IHN3aXRjaFNjcm9sbGluZ0VmZmVjdCBmcm9tICcuL3N3aXRjaFNjcm9sbGluZ0VmZmVjdCc7XG5pbXBvcnQgc2V0U3R5bGUgZnJvbSAnLi9zZXRTdHlsZSc7XG5pbXBvcnQgU2Nyb2xsTG9ja2VyIGZyb20gJy4vRG9tL3Njcm9sbExvY2tlcic7XG52YXIgb3BlbkNvdW50ID0gMDtcbnZhciBzdXBwb3J0RG9tID0gY2FuVXNlRG9tKCk7XG4vKiogQHByaXZhdGUgVGVzdCB1c2FnZSBvbmx5ICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVuQ291bnQoKSB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnID8gb3BlbkNvdW50IDogMDtcbn0gLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMTkzNDBcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzE5MzMyXG5cbnZhciBjYWNoZU92ZXJmbG93ID0ge307XG5cbnZhciBnZXRQYXJlbnQgPSBmdW5jdGlvbiBnZXRQYXJlbnQoZ2V0Q29udGFpbmVyKSB7XG4gIGlmICghc3VwcG9ydERvbSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGdldENvbnRhaW5lcikge1xuICAgIGlmICh0eXBlb2YgZ2V0Q29udGFpbmVyID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZ2V0Q29udGFpbmVyKVswXTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGdldENvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGdldENvbnRhaW5lcigpO1xuICAgIH1cblxuICAgIGlmIChfdHlwZW9mKGdldENvbnRhaW5lcikgPT09ICdvYmplY3QnICYmIGdldENvbnRhaW5lciBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCkge1xuICAgICAgcmV0dXJuIGdldENvbnRhaW5lcjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbn07XG5cbnZhciBQb3J0YWxXcmFwcGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQb3J0YWxXcmFwcGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFBvcnRhbFdyYXBwZXIpO1xuXG4gIGZ1bmN0aW9uIFBvcnRhbFdyYXBwZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9ydGFsV3JhcHBlcik7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKTtcbiAgICBfdGhpcy5jb250YWluZXIgPSB2b2lkIDA7XG4gICAgX3RoaXMuY29tcG9uZW50UmVmID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZVJlZigpO1xuICAgIF90aGlzLnJhZklkID0gdm9pZCAwO1xuICAgIF90aGlzLnNjcm9sbExvY2tlciA9IHZvaWQgMDtcbiAgICBfdGhpcy5yZW5kZXJDb21wb25lbnQgPSB2b2lkIDA7XG5cbiAgICBfdGhpcy51cGRhdGVTY3JvbGxMb2NrZXIgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgICB2YXIgX3JlZiA9IHByZXZQcm9wcyB8fCB7fSxcbiAgICAgICAgICBwcmV2VmlzaWJsZSA9IF9yZWYudmlzaWJsZTtcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZ2V0Q29udGFpbmVyID0gX3RoaXMkcHJvcHMuZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIHZpc2libGUgPSBfdGhpcyRwcm9wcy52aXNpYmxlO1xuXG4gICAgICBpZiAodmlzaWJsZSAmJiB2aXNpYmxlICE9PSBwcmV2VmlzaWJsZSAmJiBzdXBwb3J0RG9tICYmIGdldFBhcmVudChnZXRDb250YWluZXIpICE9PSBfdGhpcy5zY3JvbGxMb2NrZXIuZ2V0Q29udGFpbmVyKCkpIHtcbiAgICAgICAgX3RoaXMuc2Nyb2xsTG9ja2VyLnJlTG9jayh7XG4gICAgICAgICAgY29udGFpbmVyOiBnZXRQYXJlbnQoZ2V0Q29udGFpbmVyKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMudXBkYXRlT3BlbkNvdW50ID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgICAgdmFyIF9yZWYyID0gcHJldlByb3BzIHx8IHt9LFxuICAgICAgICAgIHByZXZWaXNpYmxlID0gX3JlZjIudmlzaWJsZSxcbiAgICAgICAgICBwcmV2R2V0Q29udGFpbmVyID0gX3JlZjIuZ2V0Q29udGFpbmVyO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgdmlzaWJsZSA9IF90aGlzJHByb3BzMi52aXNpYmxlLFxuICAgICAgICAgIGdldENvbnRhaW5lciA9IF90aGlzJHByb3BzMi5nZXRDb250YWluZXI7IC8vIFVwZGF0ZSBjb3VudFxuXG4gICAgICBpZiAodmlzaWJsZSAhPT0gcHJldlZpc2libGUgJiYgc3VwcG9ydERvbSAmJiBnZXRQYXJlbnQoZ2V0Q29udGFpbmVyKSA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICBpZiAodmlzaWJsZSAmJiAhcHJldlZpc2libGUpIHtcbiAgICAgICAgICBvcGVuQ291bnQgKz0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChwcmV2UHJvcHMpIHtcbiAgICAgICAgICBvcGVuQ291bnQgLT0gMTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBDbGVhbiB1cCBjb250YWluZXIgaWYgbmVlZGVkXG5cblxuICAgICAgdmFyIGdldENvbnRhaW5lcklzRnVuYyA9IHR5cGVvZiBnZXRDb250YWluZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHByZXZHZXRDb250YWluZXIgPT09ICdmdW5jdGlvbic7XG5cbiAgICAgIGlmIChnZXRDb250YWluZXJJc0Z1bmMgPyBnZXRDb250YWluZXIudG9TdHJpbmcoKSAhPT0gcHJldkdldENvbnRhaW5lci50b1N0cmluZygpIDogZ2V0Q29udGFpbmVyICE9PSBwcmV2R2V0Q29udGFpbmVyKSB7XG4gICAgICAgIF90aGlzLnJlbW92ZUN1cnJlbnRDb250YWluZXIoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuYXR0YWNoVG9QYXJlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZm9yY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgICBpZiAoZm9yY2UgfHwgX3RoaXMuY29udGFpbmVyICYmICFfdGhpcy5jb250YWluZXIucGFyZW50Tm9kZSkge1xuICAgICAgICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50KF90aGlzLnByb3BzLmdldENvbnRhaW5lcik7XG5cbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChfdGhpcy5jb250YWluZXIpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0Q29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFzdXBwb3J0RG9tKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV90aGlzLmNvbnRhaW5lcikge1xuICAgICAgICBfdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICBfdGhpcy5hdHRhY2hUb1BhcmVudCh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0V3JhcHBlckNsYXNzTmFtZSgpO1xuXG4gICAgICByZXR1cm4gX3RoaXMuY29udGFpbmVyO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZXRXcmFwcGVyQ2xhc3NOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHdyYXBwZXJDbGFzc05hbWUgPSBfdGhpcy5wcm9wcy53cmFwcGVyQ2xhc3NOYW1lO1xuXG4gICAgICBpZiAoX3RoaXMuY29udGFpbmVyICYmIHdyYXBwZXJDbGFzc05hbWUgJiYgd3JhcHBlckNsYXNzTmFtZSAhPT0gX3RoaXMuY29udGFpbmVyLmNsYXNzTmFtZSkge1xuICAgICAgICBfdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gd3JhcHBlckNsYXNzTmFtZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucmVtb3ZlQ3VycmVudENvbnRhaW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRjb250YWluZXIsIF90aGlzJGNvbnRhaW5lciRwYXJlbjtcblxuICAgICAgLy8gUG9ydGFsIHdpbGwgcmVtb3ZlIGZyb20gYHBhcmVudE5vZGVgLlxuICAgICAgLy8gTGV0J3MgaGFuZGxlIHRoaXMgYWdhaW4gdG8gYXZvaWQgcmVmYWN0b3IgaXNzdWUuXG4gICAgICAoX3RoaXMkY29udGFpbmVyID0gX3RoaXMuY29udGFpbmVyKSA9PT0gbnVsbCB8fCBfdGhpcyRjb250YWluZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfdGhpcyRjb250YWluZXIkcGFyZW4gPSBfdGhpcyRjb250YWluZXIucGFyZW50Tm9kZSkgPT09IG51bGwgfHwgX3RoaXMkY29udGFpbmVyJHBhcmVuID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRjb250YWluZXIkcGFyZW4ucmVtb3ZlQ2hpbGQoX3RoaXMuY29udGFpbmVyKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3dpdGNoU2Nyb2xsaW5nRWZmZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG9wZW5Db3VudCA9PT0gMSAmJiAhT2JqZWN0LmtleXMoY2FjaGVPdmVyZmxvdykubGVuZ3RoKSB7XG4gICAgICAgIHN3aXRjaFNjcm9sbGluZ0VmZmVjdCgpOyAvLyBNdXN0IGJlIHNldCBhZnRlciBzd2l0Y2hTY3JvbGxpbmdFZmZlY3RcblxuICAgICAgICBjYWNoZU92ZXJmbG93ID0gc2V0U3R5bGUoe1xuICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAgICAgICAgIG92ZXJmbG93WTogJ2hpZGRlbidcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKCFvcGVuQ291bnQpIHtcbiAgICAgICAgc2V0U3R5bGUoY2FjaGVPdmVyZmxvdyk7XG4gICAgICAgIGNhY2hlT3ZlcmZsb3cgPSB7fTtcbiAgICAgICAgc3dpdGNoU2Nyb2xsaW5nRWZmZWN0KHRydWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5zY3JvbGxMb2NrZXIgPSBuZXcgU2Nyb2xsTG9ja2VyKHtcbiAgICAgIGNvbnRhaW5lcjogZ2V0UGFyZW50KHByb3BzLmdldENvbnRhaW5lcilcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUG9ydGFsV3JhcHBlciwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy51cGRhdGVPcGVuQ291bnQoKTtcblxuICAgICAgaWYgKCF0aGlzLmF0dGFjaFRvUGFyZW50KCkpIHtcbiAgICAgICAgdGhpcy5yYWZJZCA9IHJhZihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdGhpcy51cGRhdGVPcGVuQ291bnQocHJldlByb3BzKTtcbiAgICAgIHRoaXMudXBkYXRlU2Nyb2xsTG9ja2VyKHByZXZQcm9wcyk7XG4gICAgICB0aGlzLnNldFdyYXBwZXJDbGFzc05hbWUoKTtcbiAgICAgIHRoaXMuYXR0YWNoVG9QYXJlbnQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB2aXNpYmxlID0gX3RoaXMkcHJvcHMzLnZpc2libGUsXG4gICAgICAgICAgZ2V0Q29udGFpbmVyID0gX3RoaXMkcHJvcHMzLmdldENvbnRhaW5lcjtcblxuICAgICAgaWYgKHN1cHBvcnREb20gJiYgZ2V0UGFyZW50KGdldENvbnRhaW5lcikgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgLy8g56a75byA5pe25LiN5LyaIHJlbmRlcu+8jCDlr7zliLDnprvlvIDml7bmlbDlgLzkuI3lj5jvvIzmlLnnlKggZnVuYyDjgILjgIJcbiAgICAgICAgb3BlbkNvdW50ID0gdmlzaWJsZSAmJiBvcGVuQ291bnQgPyBvcGVuQ291bnQgLSAxIDogb3BlbkNvdW50O1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlbW92ZUN1cnJlbnRDb250YWluZXIoKTtcbiAgICAgIHJhZi5jYW5jZWwodGhpcy5yYWZJZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzNC5jaGlsZHJlbixcbiAgICAgICAgICBmb3JjZVJlbmRlciA9IF90aGlzJHByb3BzNC5mb3JjZVJlbmRlcixcbiAgICAgICAgICB2aXNpYmxlID0gX3RoaXMkcHJvcHM0LnZpc2libGU7XG4gICAgICB2YXIgcG9ydGFsID0gbnVsbDtcbiAgICAgIHZhciBjaGlsZFByb3BzID0ge1xuICAgICAgICBnZXRPcGVuQ291bnQ6IGZ1bmN0aW9uIGdldE9wZW5Db3VudCgpIHtcbiAgICAgICAgICByZXR1cm4gb3BlbkNvdW50O1xuICAgICAgICB9LFxuICAgICAgICBnZXRDb250YWluZXI6IHRoaXMuZ2V0Q29udGFpbmVyLFxuICAgICAgICBzd2l0Y2hTY3JvbGxpbmdFZmZlY3Q6IHRoaXMuc3dpdGNoU2Nyb2xsaW5nRWZmZWN0LFxuICAgICAgICBzY3JvbGxMb2NrZXI6IHRoaXMuc2Nyb2xsTG9ja2VyXG4gICAgICB9O1xuXG4gICAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdmlzaWJsZSB8fCB0aGlzLmNvbXBvbmVudFJlZi5jdXJyZW50KSB7XG4gICAgICAgIHBvcnRhbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBvcnRhbCwge1xuICAgICAgICAgIGdldENvbnRhaW5lcjogdGhpcy5nZXRDb250YWluZXIsXG4gICAgICAgICAgcmVmOiB0aGlzLmNvbXBvbmVudFJlZlxuICAgICAgICB9LCBjaGlsZHJlbihjaGlsZFByb3BzKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwb3J0YWw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBvcnRhbFdyYXBwZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IFBvcnRhbFdyYXBwZXI7IiwiLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbnZhciBjYWNoZWQ7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxCYXJTaXplKGZyZXNoKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoZnJlc2ggfHwgY2FjaGVkID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBpbm5lci5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICBpbm5lci5zdHlsZS5oZWlnaHQgPSAnMjAwcHgnO1xuICAgIHZhciBvdXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBvdXRlclN0eWxlID0gb3V0ZXIuc3R5bGU7XG4gICAgb3V0ZXJTdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgb3V0ZXJTdHlsZS50b3AgPSAnMCc7XG4gICAgb3V0ZXJTdHlsZS5sZWZ0ID0gJzAnO1xuICAgIG91dGVyU3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJztcbiAgICBvdXRlclN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICBvdXRlclN0eWxlLndpZHRoID0gJzIwMHB4JztcbiAgICBvdXRlclN0eWxlLmhlaWdodCA9ICcxNTBweCc7XG4gICAgb3V0ZXJTdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgIG91dGVyLmFwcGVuZENoaWxkKGlubmVyKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG91dGVyKTtcbiAgICB2YXIgd2lkdGhDb250YWluZWQgPSBpbm5lci5vZmZzZXRXaWR0aDtcbiAgICBvdXRlci5zdHlsZS5vdmVyZmxvdyA9ICdzY3JvbGwnO1xuICAgIHZhciB3aWR0aFNjcm9sbCA9IGlubmVyLm9mZnNldFdpZHRoO1xuXG4gICAgaWYgKHdpZHRoQ29udGFpbmVkID09PSB3aWR0aFNjcm9sbCkge1xuICAgICAgd2lkdGhTY3JvbGwgPSBvdXRlci5jbGllbnRXaWR0aDtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG91dGVyKTtcbiAgICBjYWNoZWQgPSB3aWR0aENvbnRhaW5lZCAtIHdpZHRoU2Nyb2xsO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlZDtcbn1cblxuZnVuY3Rpb24gZW5zdXJlU2l6ZShzdHIpIHtcbiAgdmFyIG1hdGNoID0gc3RyLm1hdGNoKC9eKC4qKXB4JC8pO1xuICB2YXIgdmFsdWUgPSBOdW1iZXIobWF0Y2ggPT09IG51bGwgfHwgbWF0Y2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1hdGNoWzFdKTtcbiAgcmV0dXJuIE51bWJlci5pc05hTih2YWx1ZSkgPyBnZXRTY3JvbGxCYXJTaXplKCkgOiB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRhcmdldFNjcm9sbEJhclNpemUodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICF0YXJnZXQgfHwgISh0YXJnZXQgaW5zdGFuY2VvZiBFbGVtZW50KSkge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG4gIH1cblxuICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldCwgJzo6LXdlYmtpdC1zY3JvbGxiYXInKSxcbiAgICAgIHdpZHRoID0gX2dldENvbXB1dGVkU3R5bGUud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5oZWlnaHQ7XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogZW5zdXJlU2l6ZSh3aWR0aCksXG4gICAgaGVpZ2h0OiBlbnN1cmVTaXplKGhlaWdodClcbiAgfTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VNZW1vKGdldFZhbHVlLCBjb25kaXRpb24sIHNob3VsZFVwZGF0ZSkge1xuICB2YXIgY2FjaGVSZWYgPSBSZWFjdC51c2VSZWYoe30pO1xuXG4gIGlmICghKCd2YWx1ZScgaW4gY2FjaGVSZWYuY3VycmVudCkgfHwgc2hvdWxkVXBkYXRlKGNhY2hlUmVmLmN1cnJlbnQuY29uZGl0aW9uLCBjb25kaXRpb24pKSB7XG4gICAgY2FjaGVSZWYuY3VycmVudC52YWx1ZSA9IGdldFZhbHVlKCk7XG4gICAgY2FjaGVSZWYuY3VycmVudC5jb25kaXRpb24gPSBjb25kaXRpb247XG4gIH1cblxuICByZXR1cm4gY2FjaGVSZWYuY3VycmVudC52YWx1ZTtcbn0iLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUNvbnRyb2xsZWRTdGF0ZShkZWZhdWx0U3RhdGVWYWx1ZSwgb3B0aW9uKSB7XG4gIHZhciBfcmVmID0gb3B0aW9uIHx8IHt9LFxuICAgICAgZGVmYXVsdFZhbHVlID0gX3JlZi5kZWZhdWx0VmFsdWUsXG4gICAgICB2YWx1ZSA9IF9yZWYudmFsdWUsXG4gICAgICBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICBwb3N0U3RhdGUgPSBfcmVmLnBvc3RTdGF0ZTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZnVuY3Rpb24gKCkge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKGRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGRlZmF1bHRWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IGRlZmF1bHRWYWx1ZSgpIDogZGVmYXVsdFZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlb2YgZGVmYXVsdFN0YXRlVmFsdWUgPT09ICdmdW5jdGlvbicgPyBkZWZhdWx0U3RhdGVWYWx1ZSgpIDogZGVmYXVsdFN0YXRlVmFsdWU7XG4gIH0pLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgICBpbm5lclZhbHVlID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldElubmVyVmFsdWUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBtZXJnZWRWYWx1ZSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGlubmVyVmFsdWU7XG5cbiAgaWYgKHBvc3RTdGF0ZSkge1xuICAgIG1lcmdlZFZhbHVlID0gcG9zdFN0YXRlKG1lcmdlZFZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyaWdnZXJDaGFuZ2UobmV3VmFsdWUpIHtcbiAgICBzZXRJbm5lclZhbHVlKG5ld1ZhbHVlKTtcblxuICAgIGlmIChtZXJnZWRWYWx1ZSAhPT0gbmV3VmFsdWUgJiYgb25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKG5ld1ZhbHVlLCBtZXJnZWRWYWx1ZSk7XG4gICAgfVxuICB9IC8vIEVmZmVjdCBvZiByZXNldCB2YWx1ZSB0byBgdW5kZWZpbmVkYFxuXG5cbiAgdmFyIGZpcnN0UmVuZGVyUmVmID0gUmVhY3QudXNlUmVmKHRydWUpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChmaXJzdFJlbmRlclJlZi5jdXJyZW50KSB7XG4gICAgICBmaXJzdFJlbmRlclJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNldElubmVyVmFsdWUodmFsdWUpO1xuICAgIH1cbiAgfSwgW3ZhbHVlXSk7XG4gIHJldHVybiBbbWVyZ2VkVmFsdWUsIHRyaWdnZXJDaGFuZ2VdO1xufSIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBhZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQgfHwgbmF2aWdhdG9yLnZlbmRvciB8fCB3aW5kb3cub3BlcmE7XG5cbiAgaWYgKC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyBjZXx4ZGF8eGlpbm98YW5kcm9pZHxpcGFkfHBsYXlib29rfHNpbGsvaS50ZXN0KGFnZW50KSB8fCAvMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298cy0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8LW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxidy0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbS18Y2VsbHxjaHRtfGNsZGN8Y21kLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkYy1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfC1kKXxlbCg0OXxhaSl8ZW0obDJ8dWwpfGVyKGljfGswKXxlc2w4fGV6KFs0LTddMHxvc3x3YXx6ZSl8ZmV0Y3xmbHkoLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZi01fGctbW98Z28oXFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZC0obXxwfHQpfGhlaS18aGkocHR8dGEpfGhwKCBpfGlwKXxocy1jfGh0KGMoLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGktKDIwfGdvfG1hKXxpMjMwfGlhYyggfC18XFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFxcLyl8a2xvbnxrcHQgfGt3Yy18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8LVthLXddKXxsaWJ3fGx5bnh8bTEtd3xtM2dhfG01MFxcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG0tY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8LShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwbi0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHQtZ3xxYS1hfHFjKDA3fDEyfDIxfDMyfDYwfC1bMi03XXxpLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcXC98c2EoZ2V8bWF8bW18bXN8bnl8dmEpfHNjKDAxfGgtfG9vfHAtKXxzZGtcXC98c2UoYygtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaC18c2hhcnxzaWUoLXxtKXxzay0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGgtfHYtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsLXx0ZGctfHRlbChpfG0pfHRpbS18dC1tb3x0byhwbHxzaCl8dHMoNzB8bS18bTN8bTUpfHR4LTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXMtfHlvdXJ8emV0b3x6dGUtL2kudGVzdChhZ2VudCA9PT0gbnVsbCB8fCBhZ2VudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWdlbnQuc3Vic3RyKDAsIDQpKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSk7IiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9taXQob2JqLCBmaWVsZHMpIHtcbiAgdmFyIGNsb25lID0gX29iamVjdFNwcmVhZCh7fSwgb2JqKTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShmaWVsZHMpKSB7XG4gICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVsZXRlIGNsb25lW2tleV07XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY2xvbmU7XG59IiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbnZhciBhdHRyaWJ1dGVzID0gXCJhY2NlcHQgYWNjZXB0Q2hhcnNldCBhY2Nlc3NLZXkgYWN0aW9uIGFsbG93RnVsbFNjcmVlbiBhbGxvd1RyYW5zcGFyZW5jeVxcbiAgICBhbHQgYXN5bmMgYXV0b0NvbXBsZXRlIGF1dG9Gb2N1cyBhdXRvUGxheSBjYXB0dXJlIGNlbGxQYWRkaW5nIGNlbGxTcGFjaW5nIGNoYWxsZW5nZVxcbiAgICBjaGFyU2V0IGNoZWNrZWQgY2xhc3NJRCBjbGFzc05hbWUgY29sU3BhbiBjb2xzIGNvbnRlbnQgY29udGVudEVkaXRhYmxlIGNvbnRleHRNZW51XFxuICAgIGNvbnRyb2xzIGNvb3JkcyBjcm9zc09yaWdpbiBkYXRhIGRhdGVUaW1lIGRlZmF1bHQgZGVmZXIgZGlyIGRpc2FibGVkIGRvd25sb2FkIGRyYWdnYWJsZVxcbiAgICBlbmNUeXBlIGZvcm0gZm9ybUFjdGlvbiBmb3JtRW5jVHlwZSBmb3JtTWV0aG9kIGZvcm1Ob1ZhbGlkYXRlIGZvcm1UYXJnZXQgZnJhbWVCb3JkZXJcXG4gICAgaGVhZGVycyBoZWlnaHQgaGlkZGVuIGhpZ2ggaHJlZiBocmVmTGFuZyBodG1sRm9yIGh0dHBFcXVpdiBpY29uIGlkIGlucHV0TW9kZSBpbnRlZ3JpdHlcXG4gICAgaXMga2V5UGFyYW1zIGtleVR5cGUga2luZCBsYWJlbCBsYW5nIGxpc3QgbG9vcCBsb3cgbWFuaWZlc3QgbWFyZ2luSGVpZ2h0IG1hcmdpbldpZHRoIG1heCBtYXhMZW5ndGggbWVkaWFcXG4gICAgbWVkaWFHcm91cCBtZXRob2QgbWluIG1pbkxlbmd0aCBtdWx0aXBsZSBtdXRlZCBuYW1lIG5vVmFsaWRhdGUgbm9uY2Ugb3BlblxcbiAgICBvcHRpbXVtIHBhdHRlcm4gcGxhY2Vob2xkZXIgcG9zdGVyIHByZWxvYWQgcmFkaW9Hcm91cCByZWFkT25seSByZWwgcmVxdWlyZWRcXG4gICAgcmV2ZXJzZWQgcm9sZSByb3dTcGFuIHJvd3Mgc2FuZGJveCBzY29wZSBzY29wZWQgc2Nyb2xsaW5nIHNlYW1sZXNzIHNlbGVjdGVkXFxuICAgIHNoYXBlIHNpemUgc2l6ZXMgc3BhbiBzcGVsbENoZWNrIHNyYyBzcmNEb2Mgc3JjTGFuZyBzcmNTZXQgc3RhcnQgc3RlcCBzdHlsZVxcbiAgICBzdW1tYXJ5IHRhYkluZGV4IHRhcmdldCB0aXRsZSB0eXBlIHVzZU1hcCB2YWx1ZSB3aWR0aCB3bW9kZSB3cmFwXCI7XG52YXIgZXZlbnRzTmFtZSA9IFwib25Db3B5IG9uQ3V0IG9uUGFzdGUgb25Db21wb3NpdGlvbkVuZCBvbkNvbXBvc2l0aW9uU3RhcnQgb25Db21wb3NpdGlvblVwZGF0ZSBvbktleURvd25cXG4gICAgb25LZXlQcmVzcyBvbktleVVwIG9uRm9jdXMgb25CbHVyIG9uQ2hhbmdlIG9uSW5wdXQgb25TdWJtaXQgb25DbGljayBvbkNvbnRleHRNZW51IG9uRG91YmxlQ2xpY2tcXG4gICAgb25EcmFnIG9uRHJhZ0VuZCBvbkRyYWdFbnRlciBvbkRyYWdFeGl0IG9uRHJhZ0xlYXZlIG9uRHJhZ092ZXIgb25EcmFnU3RhcnQgb25Ecm9wIG9uTW91c2VEb3duXFxuICAgIG9uTW91c2VFbnRlciBvbk1vdXNlTGVhdmUgb25Nb3VzZU1vdmUgb25Nb3VzZU91dCBvbk1vdXNlT3ZlciBvbk1vdXNlVXAgb25TZWxlY3Qgb25Ub3VjaENhbmNlbFxcbiAgICBvblRvdWNoRW5kIG9uVG91Y2hNb3ZlIG9uVG91Y2hTdGFydCBvblNjcm9sbCBvbldoZWVsIG9uQWJvcnQgb25DYW5QbGF5IG9uQ2FuUGxheVRocm91Z2hcXG4gICAgb25EdXJhdGlvbkNoYW5nZSBvbkVtcHRpZWQgb25FbmNyeXB0ZWQgb25FbmRlZCBvbkVycm9yIG9uTG9hZGVkRGF0YSBvbkxvYWRlZE1ldGFkYXRhXFxuICAgIG9uTG9hZFN0YXJ0IG9uUGF1c2Ugb25QbGF5IG9uUGxheWluZyBvblByb2dyZXNzIG9uUmF0ZUNoYW5nZSBvblNlZWtlZCBvblNlZWtpbmcgb25TdGFsbGVkIG9uU3VzcGVuZCBvblRpbWVVcGRhdGUgb25Wb2x1bWVDaGFuZ2Ugb25XYWl0aW5nIG9uTG9hZCBvbkVycm9yXCI7XG52YXIgcHJvcExpc3QgPSBcIlwiLmNvbmNhdChhdHRyaWJ1dGVzLCBcIiBcIikuY29uY2F0KGV2ZW50c05hbWUpLnNwbGl0KC9bXFxzXFxuXSsvKTtcbi8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG52YXIgYXJpYVByZWZpeCA9ICdhcmlhLSc7XG52YXIgZGF0YVByZWZpeCA9ICdkYXRhLSc7XG5cbmZ1bmN0aW9uIG1hdGNoKGtleSwgcHJlZml4KSB7XG4gIHJldHVybiBrZXkuaW5kZXhPZihwcmVmaXgpID09PSAwO1xufVxuLyoqXG4gKiBQaWNrZXIgcHJvcHMgZnJvbSBleGlzdCBwcm9wcyB3aXRoIGZpbHRlclxuICogQHBhcmFtIHByb3BzIFBhc3NlZCBwcm9wc1xuICogQHBhcmFtIGFyaWFPbmx5IGJvb2xlYW4gfCB7IGFyaWE/OiBib29sZWFuOyBkYXRhPzogYm9vbGVhbjsgYXR0cj86IGJvb2xlYW47IH0gZmlsdGVyIGNvbmZpZ1xuICovXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGlja0F0dHJzKHByb3BzKSB7XG4gIHZhciBhcmlhT25seSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gIHZhciBtZXJnZWRDb25maWc7XG5cbiAgaWYgKGFyaWFPbmx5ID09PSBmYWxzZSkge1xuICAgIG1lcmdlZENvbmZpZyA9IHtcbiAgICAgIGFyaWE6IHRydWUsXG4gICAgICBkYXRhOiB0cnVlLFxuICAgICAgYXR0cjogdHJ1ZVxuICAgIH07XG4gIH0gZWxzZSBpZiAoYXJpYU9ubHkgPT09IHRydWUpIHtcbiAgICBtZXJnZWRDb25maWcgPSB7XG4gICAgICBhcmlhOiB0cnVlXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtZXJnZWRDb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBhcmlhT25seSk7XG4gIH1cblxuICB2YXIgYXR0cnMgPSB7fTtcbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICggLy8gQXJpYVxuICAgIG1lcmdlZENvbmZpZy5hcmlhICYmIChrZXkgPT09ICdyb2xlJyB8fCBtYXRjaChrZXksIGFyaWFQcmVmaXgpKSB8fCBtZXJnZWRDb25maWcuZGF0YSAmJiBtYXRjaChrZXksIGRhdGFQcmVmaXgpIHx8IG1lcmdlZENvbmZpZy5hdHRyICYmIHByb3BMaXN0LmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIGF0dHJzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhdHRycztcbn0iLCJ2YXIgcmFmID0gZnVuY3Rpb24gcmFmKGNhbGxiYWNrKSB7XG4gIHJldHVybiArc2V0VGltZW91dChjYWxsYmFjaywgMTYpO1xufTtcblxudmFyIGNhZiA9IGZ1bmN0aW9uIGNhZihudW0pIHtcbiAgcmV0dXJuIGNsZWFyVGltZW91dChudW0pO1xufTtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICdyZXF1ZXN0QW5pbWF0aW9uRnJhbWUnIGluIHdpbmRvdykge1xuICByYWYgPSBmdW5jdGlvbiByYWYoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjayk7XG4gIH07XG5cbiAgY2FmID0gZnVuY3Rpb24gY2FmKGhhbmRsZSkge1xuICAgIHJldHVybiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaGFuZGxlKTtcbiAgfTtcbn1cblxudmFyIHJhZlVVSUQgPSAwO1xudmFyIHJhZklkcyA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gY2xlYW51cChpZCkge1xuICByYWZJZHMuZGVsZXRlKGlkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd3JhcHBlclJhZihjYWxsYmFjaykge1xuICB2YXIgdGltZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE7XG4gIHJhZlVVSUQgKz0gMTtcbiAgdmFyIGlkID0gcmFmVVVJRDtcblxuICBmdW5jdGlvbiBjYWxsUmVmKGxlZnRUaW1lcykge1xuICAgIGlmIChsZWZ0VGltZXMgPT09IDApIHtcbiAgICAgIC8vIENsZWFuIHVwXG4gICAgICBjbGVhbnVwKGlkKTsgLy8gVHJpZ2dlclxuXG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOZXh0IHJhZlxuICAgICAgdmFyIHJlYWxJZCA9IHJhZihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxSZWYobGVmdFRpbWVzIC0gMSk7XG4gICAgICB9KTsgLy8gQmluZCByZWFsIHJhZiBpZFxuXG4gICAgICByYWZJZHMuc2V0KGlkLCByZWFsSWQpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxSZWYodGltZXMpO1xuICByZXR1cm4gaWQ7XG59XG5cbndyYXBwZXJSYWYuY2FuY2VsID0gZnVuY3Rpb24gKGlkKSB7XG4gIHZhciByZWFsSWQgPSByYWZJZHMuZ2V0KGlkKTtcbiAgY2xlYW51cChyZWFsSWQpO1xuICByZXR1cm4gY2FmKHJlYWxJZCk7XG59OyIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCB7IGlzTWVtbyB9IGZyb20gJ3JlYWN0LWlzJztcbmV4cG9ydCBmdW5jdGlvbiBmaWxsUmVmKHJlZiwgbm9kZSkge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZihub2RlKTtcbiAgfSBlbHNlIGlmIChfdHlwZW9mKHJlZikgPT09ICdvYmplY3QnICYmIHJlZiAmJiAnY3VycmVudCcgaW4gcmVmKSB7XG4gICAgcmVmLmN1cnJlbnQgPSBub2RlO1xuICB9XG59XG4vKipcbiAqIE1lcmdlIHJlZnMgaW50byBvbmUgcmVmIGZ1bmN0aW9uIHRvIHN1cHBvcnQgcmVmIHBhc3NpbmcuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBvc2VSZWYoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCByZWZzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHJlZnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZWZzLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgICAgZmlsbFJlZihyZWYsIG5vZGUpO1xuICAgIH0pO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRSZWYobm9kZU9yQ29tcG9uZW50KSB7XG4gIHZhciBfdHlwZSRwcm90b3R5cGUsIF9ub2RlT3JDb21wb25lbnQkcHJvdDtcblxuICB2YXIgdHlwZSA9IGlzTWVtbyhub2RlT3JDb21wb25lbnQpID8gbm9kZU9yQ29tcG9uZW50LnR5cGUudHlwZSA6IG5vZGVPckNvbXBvbmVudC50eXBlOyAvLyBGdW5jdGlvbiBjb21wb25lbnQgbm9kZVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiAhKChfdHlwZSRwcm90b3R5cGUgPSB0eXBlLnByb3RvdHlwZSkgPT09IG51bGwgfHwgX3R5cGUkcHJvdG90eXBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdHlwZSRwcm90b3R5cGUucmVuZGVyKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBDbGFzcyBjb21wb25lbnRcblxuXG4gIGlmICh0eXBlb2Ygbm9kZU9yQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmICEoKF9ub2RlT3JDb21wb25lbnQkcHJvdCA9IG5vZGVPckNvbXBvbmVudC5wcm90b3R5cGUpID09PSBudWxsIHx8IF9ub2RlT3JDb21wb25lbnQkcHJvdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25vZGVPckNvbXBvbmVudCRwcm90LnJlbmRlcikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qIGVzbGludC1lbmFibGUgKi8iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXQoZW50aXR5LCBwYXRoKSB7XG4gIHZhciBjdXJyZW50ID0gZW50aXR5O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChjdXJyZW50ID09PSBudWxsIHx8IGN1cnJlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjdXJyZW50ID0gY3VycmVudFtwYXRoW2ldXTtcbiAgfVxuXG4gIHJldHVybiBjdXJyZW50O1xufSIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF90b0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0FycmF5XCI7XG5pbXBvcnQgZ2V0IGZyb20gJy4vZ2V0JztcblxuZnVuY3Rpb24gaW50ZXJuYWxTZXQoZW50aXR5LCBwYXRocywgdmFsdWUsIHJlbW92ZUlmVW5kZWZpbmVkKSB7XG4gIGlmICghcGF0aHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgdmFyIF9wYXRocyA9IF90b0FycmF5KHBhdGhzKSxcbiAgICAgIHBhdGggPSBfcGF0aHNbMF0sXG4gICAgICByZXN0UGF0aCA9IF9wYXRocy5zbGljZSgxKTtcblxuICB2YXIgY2xvbmU7XG5cbiAgaWYgKCFlbnRpdHkgJiYgdHlwZW9mIHBhdGggPT09ICdudW1iZXInKSB7XG4gICAgY2xvbmUgPSBbXTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGVudGl0eSkpIHtcbiAgICBjbG9uZSA9IF90b0NvbnN1bWFibGVBcnJheShlbnRpdHkpO1xuICB9IGVsc2Uge1xuICAgIGNsb25lID0gX29iamVjdFNwcmVhZCh7fSwgZW50aXR5KTtcbiAgfSAvLyBEZWxldGUgcHJvcCBpZiBgcmVtb3ZlSWZVbmRlZmluZWRgIGFuZCB2YWx1ZSBpcyB1bmRlZmluZWRcblxuXG4gIGlmIChyZW1vdmVJZlVuZGVmaW5lZCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIHJlc3RQYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgIGRlbGV0ZSBjbG9uZVtwYXRoXVtyZXN0UGF0aFswXV07XG4gIH0gZWxzZSB7XG4gICAgY2xvbmVbcGF0aF0gPSBpbnRlcm5hbFNldChjbG9uZVtwYXRoXSwgcmVzdFBhdGgsIHZhbHVlLCByZW1vdmVJZlVuZGVmaW5lZCk7XG4gIH1cblxuICByZXR1cm4gY2xvbmU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldChlbnRpdHksIHBhdGhzLCB2YWx1ZSkge1xuICB2YXIgcmVtb3ZlSWZVbmRlZmluZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlO1xuXG4gIC8vIERvIG5vdGhpbmcgaWYgYHJlbW92ZUlmVW5kZWZpbmVkYCBhbmQgcGFyZW50IG9iamVjdCBub3QgZXhpc3RcbiAgaWYgKHBhdGhzLmxlbmd0aCAmJiByZW1vdmVJZlVuZGVmaW5lZCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICFnZXQoZW50aXR5LCBwYXRocy5zbGljZSgwLCAtMSkpKSB7XG4gICAgcmV0dXJuIGVudGl0eTtcbiAgfVxuXG4gIHJldHVybiBpbnRlcm5hbFNldChlbnRpdHksIHBhdGhzLCB2YWx1ZSwgcmVtb3ZlSWZVbmRlZmluZWQpO1xufSIsIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbnZhciB3YXJuZWQgPSB7fTtcbmV4cG9ydCBmdW5jdGlvbiB3YXJuaW5nKHZhbGlkLCBtZXNzYWdlKSB7XG4gIC8vIFN1cHBvcnQgdWdsaWZ5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF2YWxpZCAmJiBjb25zb2xlICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiV2FybmluZzogXCIuY29uY2F0KG1lc3NhZ2UpKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIG5vdGUodmFsaWQsIG1lc3NhZ2UpIHtcbiAgLy8gU3VwcG9ydCB1Z2xpZnlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXZhbGlkICYmIGNvbnNvbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybihcIk5vdGU6IFwiLmNvbmNhdChtZXNzYWdlKSk7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNldFdhcm5lZCgpIHtcbiAgd2FybmVkID0ge307XG59XG5leHBvcnQgZnVuY3Rpb24gY2FsbChtZXRob2QsIHZhbGlkLCBtZXNzYWdlKSB7XG4gIGlmICghdmFsaWQgJiYgIXdhcm5lZFttZXNzYWdlXSkge1xuICAgIG1ldGhvZChmYWxzZSwgbWVzc2FnZSk7XG4gICAgd2FybmVkW21lc3NhZ2VdID0gdHJ1ZTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHdhcm5pbmdPbmNlKHZhbGlkLCBtZXNzYWdlKSB7XG4gIGNhbGwod2FybmluZywgdmFsaWQsIG1lc3NhZ2UpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5vdGVPbmNlKHZhbGlkLCBtZXNzYWdlKSB7XG4gIGNhbGwobm90ZSwgdmFsaWQsIG1lc3NhZ2UpO1xufVxuZXhwb3J0IGRlZmF1bHQgd2FybmluZ09uY2U7XG4vKiBlc2xpbnQtZW5hYmxlICovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjYW5Vc2VEb207XG5cbmZ1bmN0aW9uIGNhblVzZURvbSgpIHtcbiAgcmV0dXJuICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pbmplY3RDU1MgPSBpbmplY3RDU1M7XG5leHBvcnRzLnVwZGF0ZUNTUyA9IHVwZGF0ZUNTUztcblxudmFyIF9jYW5Vc2VEb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NhblVzZURvbVwiKSk7XG5cbnZhciBNQVJLX0tFWSA9IFwicmMtdXRpbC1rZXlcIjtcblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKG9wdGlvbikge1xuICBpZiAob3B0aW9uLmF0dGFjaFRvKSB7XG4gICAgcmV0dXJuIG9wdGlvbi5hdHRhY2hUbztcbiAgfVxuXG4gIHZhciBoZWFkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCcpO1xuICByZXR1cm4gaGVhZCB8fCBkb2N1bWVudC5ib2R5O1xufVxuXG5mdW5jdGlvbiBpbmplY3RDU1MoY3NzKSB7XG4gIHZhciBfb3B0aW9uJGNzcDtcblxuICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICBpZiAoISgwLCBfY2FuVXNlRG9tLmRlZmF1bHQpKCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBzdHlsZU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gIGlmICgoX29wdGlvbiRjc3AgPSBvcHRpb24uY3NwKSA9PT0gbnVsbCB8fCBfb3B0aW9uJGNzcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbiRjc3Aubm9uY2UpIHtcbiAgICB2YXIgX29wdGlvbiRjc3AyO1xuXG4gICAgc3R5bGVOb2RlLm5vbmNlID0gKF9vcHRpb24kY3NwMiA9IG9wdGlvbi5jc3ApID09PSBudWxsIHx8IF9vcHRpb24kY3NwMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbiRjc3AyLm5vbmNlO1xuICB9XG5cbiAgc3R5bGVOb2RlLmlubmVySFRNTCA9IGNzcztcbiAgdmFyIGNvbnRhaW5lciA9IGdldENvbnRhaW5lcihvcHRpb24pO1xuICB2YXIgZmlyc3RDaGlsZCA9IGNvbnRhaW5lci5maXJzdENoaWxkO1xuXG4gIGlmIChvcHRpb24ucHJlcGVuZCAmJiBjb250YWluZXIucHJlcGVuZCkge1xuICAgIC8vIFVzZSBgcHJlcGVuZGAgZmlyc3RcbiAgICBjb250YWluZXIucHJlcGVuZChzdHlsZU5vZGUpO1xuICB9IGVsc2UgaWYgKG9wdGlvbi5wcmVwZW5kICYmIGZpcnN0Q2hpbGQpIHtcbiAgICAvLyBGYWxsYmFjayB0byBgaW5zZXJ0QmVmb3JlYCBsaWtlIElFIG5vdCBzdXBwb3J0IGBwcmVwZW5kYFxuICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUoc3R5bGVOb2RlLCBmaXJzdENoaWxkKTtcbiAgfSBlbHNlIHtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoc3R5bGVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZU5vZGU7XG59XG5cbnZhciBjb250YWluZXJDYWNoZSA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gdXBkYXRlQ1NTKGNzcywga2V5KSB7XG4gIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICB2YXIgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKG9wdGlvbik7IC8vIEdldCByZWFsIHBhcmVudFxuXG4gIGlmICghY29udGFpbmVyQ2FjaGUuaGFzKGNvbnRhaW5lcikpIHtcbiAgICB2YXIgcGxhY2Vob2xkZXJTdHlsZSA9IGluamVjdENTUygnJywgb3B0aW9uKTtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHBsYWNlaG9sZGVyU3R5bGUucGFyZW50Tm9kZTtcbiAgICBjb250YWluZXJDYWNoZS5zZXQoY29udGFpbmVyLCBwYXJlbnROb2RlKTtcbiAgICBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKHBsYWNlaG9sZGVyU3R5bGUpO1xuICB9XG5cbiAgdmFyIGV4aXN0Tm9kZSA9IEFycmF5LmZyb20oY29udGFpbmVyQ2FjaGUuZ2V0KGNvbnRhaW5lcikuY2hpbGRyZW4pLmZpbmQoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50YWdOYW1lID09PSAnU1RZTEUnICYmIG5vZGVbTUFSS19LRVldID09PSBrZXk7XG4gIH0pO1xuXG4gIGlmIChleGlzdE5vZGUpIHtcbiAgICB2YXIgX29wdGlvbiRjc3AzLCBfb3B0aW9uJGNzcDQ7XG5cbiAgICBpZiAoKChfb3B0aW9uJGNzcDMgPSBvcHRpb24uY3NwKSA9PT0gbnVsbCB8fCBfb3B0aW9uJGNzcDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb24kY3NwMy5ub25jZSkgJiYgZXhpc3ROb2RlLm5vbmNlICE9PSAoKF9vcHRpb24kY3NwNCA9IG9wdGlvbi5jc3ApID09PSBudWxsIHx8IF9vcHRpb24kY3NwNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbiRjc3A0Lm5vbmNlKSkge1xuICAgICAgdmFyIF9vcHRpb24kY3NwNTtcblxuICAgICAgZXhpc3ROb2RlLm5vbmNlID0gKF9vcHRpb24kY3NwNSA9IG9wdGlvbi5jc3ApID09PSBudWxsIHx8IF9vcHRpb24kY3NwNSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbiRjc3A1Lm5vbmNlO1xuICAgIH1cblxuICAgIGlmIChleGlzdE5vZGUuaW5uZXJIVE1MICE9PSBjc3MpIHtcbiAgICAgIGV4aXN0Tm9kZS5pbm5lckhUTUwgPSBjc3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4aXN0Tm9kZTtcbiAgfVxuXG4gIHZhciBuZXdOb2RlID0gaW5qZWN0Q1NTKGNzcywgb3B0aW9uKTtcbiAgbmV3Tm9kZVtNQVJLX0tFWV0gPSBrZXk7XG4gIHJldHVybiBuZXdOb2RlO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy53YXJuaW5nID0gd2FybmluZztcbmV4cG9ydHMubm90ZSA9IG5vdGU7XG5leHBvcnRzLnJlc2V0V2FybmVkID0gcmVzZXRXYXJuZWQ7XG5leHBvcnRzLmNhbGwgPSBjYWxsO1xuZXhwb3J0cy53YXJuaW5nT25jZSA9IHdhcm5pbmdPbmNlO1xuZXhwb3J0cy5ub3RlT25jZSA9IG5vdGVPbmNlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG52YXIgd2FybmVkID0ge307XG5cbmZ1bmN0aW9uIHdhcm5pbmcodmFsaWQsIG1lc3NhZ2UpIHtcbiAgLy8gU3VwcG9ydCB1Z2xpZnlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXZhbGlkICYmIGNvbnNvbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJXYXJuaW5nOiBcIi5jb25jYXQobWVzc2FnZSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5vdGUodmFsaWQsIG1lc3NhZ2UpIHtcbiAgLy8gU3VwcG9ydCB1Z2xpZnlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXZhbGlkICYmIGNvbnNvbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybihcIk5vdGU6IFwiLmNvbmNhdChtZXNzYWdlKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzZXRXYXJuZWQoKSB7XG4gIHdhcm5lZCA9IHt9O1xufVxuXG5mdW5jdGlvbiBjYWxsKG1ldGhvZCwgdmFsaWQsIG1lc3NhZ2UpIHtcbiAgaWYgKCF2YWxpZCAmJiAhd2FybmVkW21lc3NhZ2VdKSB7XG4gICAgbWV0aG9kKGZhbHNlLCBtZXNzYWdlKTtcbiAgICB3YXJuZWRbbWVzc2FnZV0gPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdhcm5pbmdPbmNlKHZhbGlkLCBtZXNzYWdlKSB7XG4gIGNhbGwod2FybmluZywgdmFsaWQsIG1lc3NhZ2UpO1xufVxuXG5mdW5jdGlvbiBub3RlT25jZSh2YWxpZCwgbWVzc2FnZSkge1xuICBjYWxsKG5vdGUsIHZhbGlkLCBtZXNzYWdlKTtcbn1cblxudmFyIF9kZWZhdWx0ID0gd2FybmluZ09uY2U7XG4vKiBlc2xpbnQtZW5hYmxlICovXG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJuYW1lcyI6WyJ0b0FycmF5IiwiY2hpbGRyZW4iLCJvcHRpb24iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJyZXQiLCJjaGlsZCIsImtlZXBFbXB0eSIsIkFycmF5IiwiaXNBcnJheSIsImNvbmNhdCIsImlzRnJhZ21lbnQiLCJwcm9wcyIsInB1c2giLCJhZGRFdmVudExpc3RlbmVyV3JhcCIsInRhcmdldCIsImV2ZW50VHlwZSIsImNiIiwiY2FsbGJhY2siLCJlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYW5Vc2VEb20iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjb250YWlucyIsInJvb3QiLCJuIiwiZ2V0T2Zmc2V0Iiwibm9kZSIsImJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImRvY0VsZW0iLCJkb2N1bWVudEVsZW1lbnQiLCJsZWZ0IiwicGFnZVhPZmZzZXQiLCJzY3JvbGxMZWZ0IiwiY2xpZW50TGVmdCIsImJvZHkiLCJ0b3AiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsImNsaWVudFRvcCIsIk1BUktfS0VZIiwiZ2V0Q29udGFpbmVyIiwiYXR0YWNoVG8iLCJxdWVyeVNlbGVjdG9yIiwiaW5qZWN0Q1NTIiwiY3NzIiwiX29wdGlvbiRjc3AiLCJfb3B0aW9uJGNzcDIiLCJzdHlsZU5vZGUiLCJjc3AiLCJub25jZSIsImlubmVySFRNTCIsImNvbnRhaW5lciIsImZpcnN0Q2hpbGQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJjb250YWluZXJDYWNoZSIsIk1hcCIsInVwZGF0ZUNTUyIsImtleSIsImhhcyIsInBsYWNlaG9sZGVyU3R5bGUiLCJwYXJlbnROb2RlIiwic2V0IiwicmVtb3ZlQ2hpbGQiLCJleGlzdE5vZGUiLCJmcm9tIiwiZ2V0IiwiZmluZCIsInRhZ05hbWUiLCJfb3B0aW9uJGNzcDMiLCJfb3B0aW9uJGNzcDQiLCJfb3B0aW9uJGNzcDUiLCJuZXdOb2RlIiwiZmluZERPTU5vZGUiLCJIVE1MRWxlbWVudCIsImZvY3VzYWJsZSIsImluY2x1ZGVQb3NpdGl2ZSIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJpc0ZvY3VzYWJsZUVsZW1lbnQiLCJpbmNsdWRlcyIsImlzQ29udGVudEVkaXRhYmxlIiwiZ2V0QXR0cmlidXRlIiwidGFiSW5kZXhBdHRyIiwidGFiSW5kZXhOdW0iLCJOdW1iZXIiLCJ0YWJJbmRleCIsImlzTmFOIiwiZGlzYWJsZWQiLCJnZXRGb2N1c05vZGVMaXN0IiwicmVzIiwicXVlcnlTZWxlY3RvckFsbCIsImZpbHRlciIsInVuc2hpZnQiLCJlbGVtZW50Iiwib2Zmc2V0UGFyZW50IiwiZ2V0QkJveCIsIndpZHRoIiwiaGVpZ2h0IiwiX2JveCIsIktleUNvZGUiLCJNQUNfRU5URVIiLCJCQUNLU1BBQ0UiLCJUQUIiLCJOVU1fQ0VOVEVSIiwiRU5URVIiLCJTSElGVCIsIkNUUkwiLCJBTFQiLCJQQVVTRSIsIkNBUFNfTE9DSyIsIkVTQyIsIlNQQUNFIiwiUEFHRV9VUCIsIlBBR0VfRE9XTiIsIkVORCIsIkhPTUUiLCJMRUZUIiwiVVAiLCJSSUdIVCIsIkRPV04iLCJQUklOVF9TQ1JFRU4iLCJJTlNFUlQiLCJERUxFVEUiLCJaRVJPIiwiT05FIiwiVFdPIiwiVEhSRUUiLCJGT1VSIiwiRklWRSIsIlNJWCIsIlNFVkVOIiwiRUlHSFQiLCJOSU5FIiwiUVVFU1RJT05fTUFSSyIsIkEiLCJCIiwiQyIsIkQiLCJFIiwiRiIsIkciLCJIIiwiSSIsIkoiLCJLIiwiTCIsIk0iLCJOIiwiTyIsIlAiLCJRIiwiUiIsIlMiLCJUIiwiVSIsIlYiLCJXIiwiWCIsIlkiLCJaIiwiTUVUQSIsIldJTl9LRVlfUklHSFQiLCJDT05URVhUX01FTlUiLCJOVU1fWkVSTyIsIk5VTV9PTkUiLCJOVU1fVFdPIiwiTlVNX1RIUkVFIiwiTlVNX0ZPVVIiLCJOVU1fRklWRSIsIk5VTV9TSVgiLCJOVU1fU0VWRU4iLCJOVU1fRUlHSFQiLCJOVU1fTklORSIsIk5VTV9NVUxUSVBMWSIsIk5VTV9QTFVTIiwiTlVNX01JTlVTIiwiTlVNX1BFUklPRCIsIk5VTV9ESVZJU0lPTiIsIkYxIiwiRjIiLCJGMyIsIkY0IiwiRjUiLCJGNiIsIkY3IiwiRjgiLCJGOSIsIkYxMCIsIkYxMSIsIkYxMiIsIk5VTUxPQ0siLCJTRU1JQ09MT04iLCJEQVNIIiwiRVFVQUxTIiwiQ09NTUEiLCJQRVJJT0QiLCJTTEFTSCIsIkFQT1NUUk9QSEUiLCJTSU5HTEVfUVVPVEUiLCJPUEVOX1NRVUFSRV9CUkFDS0VUIiwiQkFDS1NMQVNIIiwiQ0xPU0VfU1FVQVJFX0JSQUNLRVQiLCJXSU5fS0VZIiwiTUFDX0ZGX01FVEEiLCJXSU5fSU1FIiwiaXNUZXh0TW9kaWZ5aW5nS2V5RXZlbnQiLCJrZXlDb2RlIiwiYWx0S2V5IiwiY3RybEtleSIsIm1ldGFLZXkiLCJpc0NoYXJhY3RlcktleSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImluZGV4T2YiLCJmb3J3YXJkUmVmIiwicmVmIiwiZGlkVXBkYXRlIiwiY29udGFpbmVyUmVmIiwidXNlUmVmIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsImluaXRSZWYiLCJjdXJyZW50IiwidXNlRWZmZWN0IiwiX2NvbnRhaW5lclJlZiRjdXJyZW50IiwiX2NvbnRhaW5lclJlZiRjdXJyZW50MiIsInN0eWxlIiwib3B0aW9ucyIsIl9vcHRpb25zJGVsZW1lbnQiLCJvbGRTdHlsZSIsInN0eWxlS2V5cyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiY2FjaGVTdHlsZSIsImNsb3NlIiwic2Nyb2xsSGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJpbm5lcldpZHRoIiwib2Zmc2V0V2lkdGgiLCJzY3JvbGxpbmdFZmZlY3RDbGFzc05hbWUiLCJzY3JvbGxpbmdFZmZlY3RDbGFzc05hbWVSZWciLCJSZWdFeHAiLCJib2R5Q2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwidGVzdCIsInJlcGxhY2UiLCJ0cmltIiwic2Nyb2xsQmFyU2l6ZSIsImdldFNjcm9sbEJhclNpemUiLCJwb3NpdGlvbiIsImFkZENsYXNzTmFtZSIsImxvY2tzIiwidXVpZCIsIlNjcm9sbExvY2tlciIsIl9vcHRpb25zIiwiX3RoaXMiLCJ0aGlzIiwibG9ja1RhcmdldCIsIl90aGlzJG9wdGlvbnMiLCJyZUxvY2siLCJmaW5kTG9jayIsIl9yZWYiLCJ1bkxvY2siLCJsb2NrIiwiX3RoaXMkb3B0aW9uczMiLCJzb21lIiwiX3JlZjIiLCJfcmVmMyIsIl90aGlzJG9wdGlvbnMyIiwiY2xpZW50V2lkdGgiLCJjb250YWluZXJDbGFzc05hbWUiLCJfcmVmNCIsIl90aGlzJG9wdGlvbnM0Iiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJfdGhpcyRvcHRpb25zNSIsIl9yZWY1IiwiX3JlZjYiLCJfcmVmNyIsIl9maW5kTG9jayRvcHRpb25zIiwiZGVsZXRlIiwib3BlbkNvdW50Iiwic3VwcG9ydERvbSIsImNhY2hlT3ZlcmZsb3ciLCJnZXRQYXJlbnQiLCJfUmVhY3QkQ29tcG9uZW50IiwiUG9ydGFsV3JhcHBlciIsIl9zdXBlciIsImNhbGwiLCJjb21wb25lbnRSZWYiLCJyYWZJZCIsInNjcm9sbExvY2tlciIsInJlbmRlckNvbXBvbmVudCIsInVwZGF0ZVNjcm9sbExvY2tlciIsInByZXZQcm9wcyIsInByZXZWaXNpYmxlIiwidmlzaWJsZSIsIl90aGlzJHByb3BzIiwidXBkYXRlT3BlbkNvdW50IiwicHJldkdldENvbnRhaW5lciIsIl90aGlzJHByb3BzMiIsInRvU3RyaW5nIiwicmVtb3ZlQ3VycmVudENvbnRhaW5lciIsImF0dGFjaFRvUGFyZW50IiwiZm9yY2UiLCJwYXJlbnQiLCJzZXRXcmFwcGVyQ2xhc3NOYW1lIiwid3JhcHBlckNsYXNzTmFtZSIsIl90aGlzJGNvbnRhaW5lciIsIl90aGlzJGNvbnRhaW5lciRwYXJlbiIsInN3aXRjaFNjcm9sbGluZ0VmZmVjdCIsInZhbHVlIiwiX3RoaXMyIiwicmFmIiwiZm9yY2VVcGRhdGUiLCJfdGhpcyRwcm9wczMiLCJfdGhpcyRwcm9wczQiLCJmb3JjZVJlbmRlciIsInBvcnRhbCIsImNoaWxkUHJvcHMiLCJnZXRPcGVuQ291bnQiLCJQb3J0YWwiLCJjYWNoZWQiLCJmcmVzaCIsImlubmVyIiwib3V0ZXIiLCJvdXRlclN0eWxlIiwicG9pbnRlckV2ZW50cyIsInZpc2liaWxpdHkiLCJ3aWR0aENvbnRhaW5lZCIsIndpZHRoU2Nyb2xsIiwiZW5zdXJlU2l6ZSIsInN0ciIsIm1hdGNoIiwiZ2V0VGFyZ2V0U2Nyb2xsQmFyU2l6ZSIsIkVsZW1lbnQiLCJfZ2V0Q29tcHV0ZWRTdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJ1c2VNZW1vIiwiZ2V0VmFsdWUiLCJjb25kaXRpb24iLCJzaG91bGRVcGRhdGUiLCJjYWNoZVJlZiIsInVzZUNvbnRyb2xsZWRTdGF0ZSIsImRlZmF1bHRTdGF0ZVZhbHVlIiwiZGVmYXVsdFZhbHVlIiwib25DaGFuZ2UiLCJwb3N0U3RhdGUiLCJfUmVhY3QkdXNlU3RhdGUiLCJfUmVhY3QkdXNlU3RhdGUyIiwiaW5uZXJWYWx1ZSIsInNldElubmVyVmFsdWUiLCJtZXJnZWRWYWx1ZSIsImZpcnN0UmVuZGVyUmVmIiwibmV3VmFsdWUiLCJhZ2VudCIsInZlbmRvciIsIm9wZXJhIiwic3Vic3RyIiwib21pdCIsIm9iaiIsImZpZWxkcyIsImNsb25lIiwicHJvcExpc3QiLCJzcGxpdCIsImFyaWFQcmVmaXgiLCJkYXRhUHJlZml4IiwicHJlZml4IiwicGlja0F0dHJzIiwibWVyZ2VkQ29uZmlnIiwiYXJpYU9ubHkiLCJhcmlhIiwiZGF0YSIsImF0dHIiLCJhdHRycyIsInNldFRpbWVvdXQiLCJjYWYiLCJudW0iLCJjbGVhclRpbWVvdXQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJoYW5kbGUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJhZlVVSUQiLCJyYWZJZHMiLCJjbGVhbnVwIiwiaWQiLCJ3cmFwcGVyUmFmIiwidGltZXMiLCJjYWxsUmVmIiwibGVmdFRpbWVzIiwicmVhbElkIiwiY2FuY2VsIiwiZmlsbFJlZiIsImNvbXBvc2VSZWYiLCJfbGVuIiwicmVmcyIsIl9rZXkiLCJzdXBwb3J0UmVmIiwibm9kZU9yQ29tcG9uZW50IiwiX3R5cGUkcHJvdG90eXBlIiwiX25vZGVPckNvbXBvbmVudCRwcm90IiwidHlwZSIsImlzTWVtbyIsInByb3RvdHlwZSIsInJlbmRlciIsImVudGl0eSIsInBhdGgiLCJpIiwiaW50ZXJuYWxTZXQiLCJwYXRocyIsInJlbW92ZUlmVW5kZWZpbmVkIiwiX3BhdGhzIiwicmVzdFBhdGgiLCJzbGljZSIsIndhcm5lZCIsIndhcm5pbmciLCJ2YWxpZCIsIm1lc3NhZ2UiLCJub3RlIiwibWV0aG9kIiwibm90ZU9uY2UiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NhblVzZURvbSIsImRlZmF1bHQiLCJyZXNldFdhcm5lZCIsIndhcm5pbmdPbmNlIiwiX2RlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9