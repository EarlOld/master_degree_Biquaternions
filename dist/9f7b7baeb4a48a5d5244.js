"use strict";(self.webpackChunkmaster_degree=self.webpackChunkmaster_degree||[]).push([[14],{8665:(e,t,n)=>{n.d(t,{k:()=>a,Z:()=>o});var r=n(7294),i=n(334),a="RC_FORM_INTERNAL_HOOKS",s=function(){(0,i.ZP)(!1,"Can not find FormContext. Please make sure you wrap Field under Form.")};const o=r.createContext({getFieldValue:s,getFieldsValue:s,getFieldError:s,getFieldsError:s,isFieldsTouched:s,isFieldTouched:s,isFieldValidating:s,isFieldsValidating:s,resetFields:s,setFields:s,setFieldsValue:s,validateFields:s,submit:s,getInternalHooks:function(){return s(),{dispatch:s,initEntityValue:s,registerField:s,useSubscribe:s,setInitialValues:s,setCallbacks:s,getFields:s,setValidateMessages:s,setPreserve:s}}})},3827:(e,t,n)=>{n.d(t,{gN:()=>J,RV:()=>ne,aV:()=>K,ZP:()=>se,cI:()=>ee});var r=n(7294),i=n(7462),a=n(4925),s=n(4942),o=n(1413),u=n(3433),l=n(5671),c=n(3144),d=n(7326),f=n(9340),h=n(8557),v=n(344),g=n(334),m=n(8665);function p(e){return null==e?[]:Array.isArray(e)?e:[e]}var F=n(7757),y=n.n(F),Z=n(5861),V=n(1002),k=n(5715),b=n(8306),P=n(8880);function E(e){return p(e)}function C(e,t){return(0,b.Z)(e,t)}function w(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=(0,P.Z)(e,t,n,r);return i}function x(e,t){var n={};return t.forEach((function(t){var r=C(e,t);n=w(n,t,r)})),n}function N(e,t){return e&&e.some((function(e){return I(e,t)}))}function $(e){return"object"===(0,V.Z)(e)&&null!==e&&Object.getPrototypeOf(e)===Object.prototype}function R(e,t){var n=Array.isArray(e)?(0,u.Z)(e):(0,o.Z)({},e);return t?(Object.keys(t).forEach((function(e){var r=n[e],i=t[e],a=$(r)&&$(i);n[e]=a?R(r,i||{}):i})),n):n}function A(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return n.reduce((function(e,t){return R(e,t)}),e)}function I(e,t){return!(!e||!t||e.length!==t.length)&&e.every((function(e,n){return t[n]===e}))}function M(e){var t=arguments.length<=1?void 0:arguments[1];return t&&t.target&&e in t.target?t.target[e]:t}function T(e,t,n){var r=e.length;if(t<0||t>=r||n<0||n>=r)return e;var i=e[t],a=t-n;return a>0?[].concat((0,u.Z)(e.slice(0,n)),[i],(0,u.Z)(e.slice(n,t)),(0,u.Z)(e.slice(t+1,r))):a<0?[].concat((0,u.Z)(e.slice(0,t)),(0,u.Z)(e.slice(t+1,n+1)),[i],(0,u.Z)(e.slice(n+1,r))):e}var O="'${name}' is not a valid ${type}",U={default:"Validation error on field '${name}'",required:"'${name}' is required",enum:"'${name}' must be one of [${enum}]",whitespace:"'${name}' cannot be empty",date:{format:"'${name}' is invalid for format date",parse:"'${name}' could not be parsed as date",invalid:"'${name}' is invalid date"},types:{string:O,method:O,array:O,object:O,number:O,date:O,boolean:O,integer:O,float:O,regexp:O,email:O,url:O,hex:O},string:{len:"'${name}' must be exactly ${len} characters",min:"'${name}' must be at least ${min} characters",max:"'${name}' cannot be longer than ${max} characters",range:"'${name}' must be between ${min} and ${max} characters"},number:{len:"'${name}' must equal ${len}",min:"'${name}' cannot be less than ${min}",max:"'${name}' cannot be greater than ${max}",range:"'${name}' must be between ${min} and ${max}"},array:{len:"'${name}' must be exactly ${len} in length",min:"'${name}' cannot be less than ${min} in length",max:"'${name}' cannot be greater than ${max} in length",range:"'${name}' must be between ${min} and ${max} in length"},pattern:{mismatch:"'${name}' does not match pattern ${pattern}"}},j=k.Z;function L(e,t,n,r){var i=(0,o.Z)((0,o.Z)({},n),{},{name:t,enum:(n.enum||[]).join(", ")}),a=function(e,t){return function(){return function(e,t){return e.replace(/\$\{\w+\}/g,(function(e){var n=e.slice(2,-1);return t[n]}))}(e,(0,o.Z)((0,o.Z)({},i),t))}};return function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object.keys(t).forEach((function(i){var s=t[i];"string"==typeof s?n[i]=a(s,r):s&&"object"===(0,V.Z)(s)?(n[i]={},e(s,n[i])):n[i]=s})),n}(A({},U,e))}function _(e,t,n,r,i){return S.apply(this,arguments)}function S(){return(S=(0,Z.Z)(y().mark((function e(t,n,i,a,l){var c,d,f,h,v,g;return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return c=(0,o.Z)({},i),d=null,c&&"array"===c.type&&c.defaultField&&(d=c.defaultField,delete c.defaultField),f=new j((0,s.Z)({},t,[c])),h=L(a.validateMessages,t,c,l),f.messages(h),v=[],e.prev=7,e.next=10,Promise.resolve(f.validate((0,s.Z)({},t,n),(0,o.Z)({},a)));case 10:e.next=15;break;case 12:e.prev=12,e.t0=e.catch(7),e.t0.errors?v=e.t0.errors.map((function(e,t){var n=e.message;return r.isValidElement(n)?r.cloneElement(n,{key:"error_".concat(t)}):n})):(console.error(e.t0),v=[h.default()]);case 15:if(v.length||!d){e.next=20;break}return e.next=18,Promise.all(n.map((function(e,n){return _("".concat(t,".").concat(n),e,d,a,l)})));case 18:return g=e.sent,e.abrupt("return",g.reduce((function(e,t){return[].concat((0,u.Z)(e),(0,u.Z)(t))}),[]));case 20:return e.abrupt("return",v);case 21:case"end":return e.stop()}}),e,null,[[7,12]])})))).apply(this,arguments)}function H(e,t,n,r,i,a){var s,u=e.join("."),l=n.map((function(e){var t=e.validator;return t?(0,o.Z)((0,o.Z)({},e),{},{validator:function(e,n,r){var i=!1,a=t(e,n,(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];Promise.resolve().then((function(){(0,g.ZP)(!i,"Your validator function has already return a promise. `callback` will be ignored."),i||r.apply(void 0,t)}))}));i=a&&"function"==typeof a.then&&"function"==typeof a.catch,(0,g.ZP)(i,"`callback` is deprecated. Please return a promise instead."),i&&a.then((function(){r()})).catch((function(e){r(e||" ")}))}}):e}));if(!0===i)s=new Promise(function(){var e=(0,Z.Z)(y().mark((function e(n,i){var s,o;return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:s=0;case 1:if(!(s<l.length)){e.next=11;break}return e.next=4,_(u,t,l[s],r,a);case 4:if(!(o=e.sent).length){e.next=8;break}return i(o),e.abrupt("return");case 8:s+=1,e.next=1;break;case 11:n([]);case 12:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}());else{var c=l.map((function(e){return _(u,t,e,r,a)}));s=(i?function(e){return W.apply(this,arguments)}(c):function(e){return D.apply(this,arguments)}(c)).then((function(e){return e.length?Promise.reject(e):[]}))}return s.catch((function(e){return e})),s}function D(){return(D=(0,Z.Z)(y().mark((function e(t){return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Promise.all(t).then((function(e){var t;return(t=[]).concat.apply(t,(0,u.Z)(e))})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function W(){return(W=(0,Z.Z)(y().mark((function e(t){var n;return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=0,e.abrupt("return",new Promise((function(e){t.forEach((function(r){r.then((function(r){r.length&&e(r),(n+=1)===t.length&&e([])}))}))})));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function q(e,t,n,r,i,a){return"function"==typeof e?e(t,n,"source"in a?{source:a.source}:{}):r!==i}var z=function(e){(0,f.Z)(n,e);var t=(0,h.Z)(n);function n(e){var i;((0,l.Z)(this,n),(i=t.call(this,e)).state={resetCount:0},i.cancelRegisterFunc=null,i.mounted=!1,i.touched=!1,i.dirty=!1,i.validatePromise=null,i.errors=[],i.cancelRegister=function(){var e=i.props,t=e.preserve,n=e.isListField,r=e.name;i.cancelRegisterFunc&&i.cancelRegisterFunc(n,t,E(r)),i.cancelRegisterFunc=null},i.getNamePath=function(){var e=i.props,t=e.name,n=e.fieldContext.prefixName,r=void 0===n?[]:n;return void 0!==t?[].concat((0,u.Z)(r),(0,u.Z)(t)):[]},i.getRules=function(){var e=i.props,t=e.rules,n=void 0===t?[]:t,r=e.fieldContext;return n.map((function(e){return"function"==typeof e?e(r):e}))},i.refresh=function(){i.mounted&&i.setState((function(e){return{resetCount:e.resetCount+1}}))},i.onStoreChange=function(e,t,n){var r=i.props,a=r.shouldUpdate,s=r.dependencies,o=void 0===s?[]:s,u=r.onReset,l=n.store,c=i.getNamePath(),d=i.getValue(e),f=i.getValue(l),h=t&&N(t,c);switch("valueUpdate"===n.type&&"external"===n.source&&d!==f&&(i.touched=!0,i.dirty=!0,i.validatePromise=null,i.errors=[]),n.type){case"reset":if(!t||h)return i.touched=!1,i.dirty=!1,i.validatePromise=null,i.errors=[],u&&u(),void i.refresh();break;case"setField":if(h){var v=n.data;return"touched"in v&&(i.touched=v.touched),"validating"in v&&!("originRCField"in v)&&(i.validatePromise=v.validating?Promise.resolve([]):null),"errors"in v&&(i.errors=v.errors||[]),i.dirty=!0,void i.reRender()}if(a&&!c.length&&q(a,e,l,d,f,n))return void i.reRender();break;case"dependenciesUpdate":if(o.map(E).some((function(e){return N(n.relatedFields,e)})))return void i.reRender();break;default:if(h||(!o.length||c.length||a)&&q(a,e,l,d,f,n))return void i.reRender()}!0===a&&i.reRender()},i.validateRules=function(e){var t=i.getNamePath(),n=i.getValue(),r=Promise.resolve().then((function(){if(!i.mounted)return[];var a=i.props,s=a.validateFirst,o=void 0!==s&&s,u=a.messageVariables,l=(e||{}).triggerName,c=i.getRules();l&&(c=c.filter((function(e){var t=e.validateTrigger;return!t||p(t).includes(l)})));var d=H(t,n,c,e,o,u);return d.catch((function(e){return e})).then((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];i.validatePromise===r&&(i.validatePromise=null,i.errors=e,i.reRender())})),d}));return i.validatePromise=r,i.dirty=!0,i.errors=[],i.reRender(),r},i.isFieldValidating=function(){return!!i.validatePromise},i.isFieldTouched=function(){return i.touched},i.isFieldDirty=function(){return i.dirty},i.getErrors=function(){return i.errors},i.isListField=function(){return i.props.isListField},i.isList=function(){return i.props.isList},i.isPreserve=function(){return i.props.preserve},i.getMeta=function(){return i.prevValidating=i.isFieldValidating(),{touched:i.isFieldTouched(),validating:i.prevValidating,errors:i.errors,name:i.getNamePath()}},i.getOnlyChild=function(e){if("function"==typeof e){var t=i.getMeta();return(0,o.Z)((0,o.Z)({},i.getOnlyChild(e(i.getControlled(),t,i.props.fieldContext))),{},{isFunction:!0})}var n=(0,v.Z)(e);return 1===n.length&&r.isValidElement(n[0])?{child:n[0],isFunction:!1}:{child:n,isFunction:!1}},i.getValue=function(e){var t=i.props.fieldContext.getFieldsValue,n=i.getNamePath();return C(e||t(!0),n)},i.getControlled=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=i.props,n=t.trigger,r=t.validateTrigger,a=t.getValueFromEvent,u=t.normalize,l=t.valuePropName,c=t.getValueProps,d=t.fieldContext,f=void 0!==r?r:d.validateTrigger,h=i.getNamePath(),v=d.getInternalHooks,g=d.getFieldsValue,F=v(m.k),y=F.dispatch,Z=i.getValue(),V=c||function(e){return(0,s.Z)({},l,e)},k=e[n],b=(0,o.Z)((0,o.Z)({},e),V(Z));b[n]=function(){var e;i.touched=!0,i.dirty=!0;for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];e=a?a.apply(void 0,n):M.apply(void 0,[l].concat(n)),u&&(e=u(e,Z,g(!0))),y({type:"updateValue",namePath:h,value:e}),k&&k.apply(void 0,n)};var P=p(f||[]);return P.forEach((function(e){var t=b[e];b[e]=function(){t&&t.apply(void 0,arguments);var n=i.props.rules;n&&n.length&&y({type:"validateField",namePath:h,triggerName:e})}})),b},e.fieldContext)&&(0,(0,e.fieldContext.getInternalHooks)(m.k).initEntityValue)((0,d.Z)(i));return i}return(0,c.Z)(n,[{key:"componentDidMount",value:function(){var e=this.props,t=e.shouldUpdate,n=e.fieldContext;if(this.mounted=!0,n){var r=(0,n.getInternalHooks)(m.k).registerField;this.cancelRegisterFunc=r(this)}!0===t&&this.reRender()}},{key:"componentWillUnmount",value:function(){this.cancelRegister(),this.mounted=!1}},{key:"reRender",value:function(){this.mounted&&this.forceUpdate()}},{key:"render",value:function(){var e,t=this.state.resetCount,n=this.props.children,i=this.getOnlyChild(n),a=i.child;return i.isFunction?e=a:r.isValidElement(a)?e=r.cloneElement(a,this.getControlled(a.props)):((0,g.ZP)(!a,"`children` of Field is not validate ReactElement."),e=a),r.createElement(r.Fragment,{key:t},e)}}]),n}(r.Component);z.contextType=m.Z,z.defaultProps={trigger:"onChange",valuePropName:"value"};const J=function(e){var t=e.name,n=(0,a.Z)(e,["name"]),s=r.useContext(m.Z),o=void 0!==t?E(t):void 0,u="keep";return n.isListField||(u="_".concat((o||[]).join("_"))),r.createElement(z,(0,i.Z)({key:u,name:o},n,{fieldContext:s}))};const K=function(e){var t=e.name,n=e.initialValue,i=e.children,a=e.rules,s=e.validateTrigger,l=r.useContext(m.Z),c=r.useRef({keys:[],id:0}).current;if("function"!=typeof i)return(0,g.ZP)(!1,"Form.List only accepts function as children."),null;var d=E(l.prefixName)||[],f=[].concat((0,u.Z)(d),(0,u.Z)(E(t)));return r.createElement(m.Z.Provider,{value:(0,o.Z)((0,o.Z)({},l),{},{prefixName:f})},r.createElement(J,{name:[],shouldUpdate:function(e,t,n){return"internal"!==n.source&&e!==t},rules:a,validateTrigger:s,initialValue:n,isList:!0},(function(e,t){var n=e.value,r=void 0===n?[]:n,a=e.onChange,s=l.getFieldValue,o=function(){return s(f||[])||[]},d={add:function(e,t){var n=o();t>=0&&t<=n.length?(c.keys=[].concat((0,u.Z)(c.keys.slice(0,t)),[c.id],(0,u.Z)(c.keys.slice(t))),a([].concat((0,u.Z)(n.slice(0,t)),[e],(0,u.Z)(n.slice(t))))):(c.keys=[].concat((0,u.Z)(c.keys),[c.id]),a([].concat((0,u.Z)(n),[e]))),c.id+=1},remove:function(e){var t=o(),n=new Set(Array.isArray(e)?e:[e]);n.size<=0||(c.keys=c.keys.filter((function(e,t){return!n.has(t)})),a(t.filter((function(e,t){return!n.has(t)}))))},move:function(e,t){if(e!==t){var n=o();e<0||e>=n.length||t<0||t>=n.length||(c.keys=T(c.keys,e,t),a(T(n,e,t)))}}},h=r||[];return Array.isArray(h)||(h=[]),i(h.map((function(e,t){var n=c.keys[t];return void 0===n&&(c.keys[t]=c.id,n=c.keys[t],c.id+=1),{name:t,key:n,isListField:!0}})),d,t)})))};var Y=n(9439);var B="__@field_split__";function G(e){return e.map((function(e){return"".concat((0,V.Z)(e),":").concat(e)})).join(B)}const Q=function(){function e(){(0,l.Z)(this,e),this.kvs=new Map}return(0,c.Z)(e,[{key:"set",value:function(e,t){this.kvs.set(G(e),t)}},{key:"get",value:function(e){return this.kvs.get(G(e))}},{key:"update",value:function(e,t){var n=t(this.get(e));n?this.set(e,n):this.delete(e)}},{key:"delete",value:function(e){this.kvs.delete(G(e))}},{key:"map",value:function(e){return(0,u.Z)(this.kvs.entries()).map((function(t){var n=(0,Y.Z)(t,2),r=n[0],i=n[1],a=r.split(B);return e({key:a.map((function(e){var t=e.match(/^([^:]*):(.*)$/),n=(0,Y.Z)(t,3),r=n[1],i=n[2];return"number"===r?Number(i):i})),value:i})}))}},{key:"toJSON",value:function(){var e={};return this.map((function(t){var n=t.key,r=t.value;return e[n.join(".")]=r,null})),e}}]),e}();var X=function e(t){var n=this;(0,l.Z)(this,e),this.formHooked=!1,this.subscribable=!0,this.store={},this.fieldEntities=[],this.initialValues={},this.callbacks={},this.validateMessages=null,this.preserve=null,this.lastValidatePromise=null,this.getForm=function(){return{getFieldValue:n.getFieldValue,getFieldsValue:n.getFieldsValue,getFieldError:n.getFieldError,getFieldsError:n.getFieldsError,isFieldsTouched:n.isFieldsTouched,isFieldTouched:n.isFieldTouched,isFieldValidating:n.isFieldValidating,isFieldsValidating:n.isFieldsValidating,resetFields:n.resetFields,setFields:n.setFields,setFieldsValue:n.setFieldsValue,validateFields:n.validateFields,submit:n.submit,getInternalHooks:n.getInternalHooks}},this.getInternalHooks=function(e){return e===m.k?(n.formHooked=!0,{dispatch:n.dispatch,initEntityValue:n.initEntityValue,registerField:n.registerField,useSubscribe:n.useSubscribe,setInitialValues:n.setInitialValues,setCallbacks:n.setCallbacks,setValidateMessages:n.setValidateMessages,getFields:n.getFields,setPreserve:n.setPreserve}):((0,g.ZP)(!1,"`getInternalHooks` is internal usage. Should not call directly."),null)},this.useSubscribe=function(e){n.subscribable=e},this.setInitialValues=function(e,t){n.initialValues=e||{},t&&(n.store=A({},e,n.store))},this.getInitialValue=function(e){return C(n.initialValues,e)},this.setCallbacks=function(e){n.callbacks=e},this.setValidateMessages=function(e){n.validateMessages=e},this.setPreserve=function(e){n.preserve=e},this.timeoutId=null,this.warningUnhooked=function(){0},this.getFieldEntities=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return e?n.fieldEntities.filter((function(e){return e.getNamePath().length})):n.fieldEntities},this.getFieldsMap=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=new Q;return n.getFieldEntities(e).forEach((function(e){var n=e.getNamePath();t.set(n,e)})),t},this.getFieldEntitiesForNamePathList=function(e){if(!e)return n.getFieldEntities(!0);var t=n.getFieldsMap(!0);return e.map((function(e){var n=E(e);return t.get(n)||{INVALIDATE_NAME_PATH:E(e)}}))},this.getFieldsValue=function(e,t){if(n.warningUnhooked(),!0===e&&!t)return n.store;var r=n.getFieldEntitiesForNamePathList(Array.isArray(e)?e:null),i=[];return r.forEach((function(n){var r,a="INVALIDATE_NAME_PATH"in n?n.INVALIDATE_NAME_PATH:n.getNamePath();if(e||!(null===(r=n.isListField)||void 0===r?void 0:r.call(n)))if(t){var s="getMeta"in n?n.getMeta():null;t(s)&&i.push(a)}else i.push(a)})),x(n.store,i.map(E))},this.getFieldValue=function(e){n.warningUnhooked();var t=E(e);return C(n.store,t)},this.getFieldsError=function(e){return n.warningUnhooked(),n.getFieldEntitiesForNamePathList(e).map((function(t,n){return t&&!("INVALIDATE_NAME_PATH"in t)?{name:t.getNamePath(),errors:t.getErrors()}:{name:E(e[n]),errors:[]}}))},this.getFieldError=function(e){n.warningUnhooked();var t=E(e);return n.getFieldsError([t])[0].errors},this.isFieldsTouched=function(){n.warningUnhooked();for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var i,a=t[0],s=t[1],o=!1;0===t.length?i=null:1===t.length?Array.isArray(a)?(i=a.map(E),o=!1):(i=null,o=a):(i=a.map(E),o=s);var l=n.getFieldEntities(!0),c=function(e){return e.isFieldTouched()};if(!i)return o?l.every(c):l.some(c);var d=new Q;i.forEach((function(e){d.set(e,[])})),l.forEach((function(e){var t=e.getNamePath();i.forEach((function(n){n.every((function(e,n){return t[n]===e}))&&d.update(n,(function(t){return[].concat((0,u.Z)(t),[e])}))}))}));var f=function(e){return e.some(c)},h=d.map((function(e){return e.value}));return o?h.every(f):h.some(f)},this.isFieldTouched=function(e){return n.warningUnhooked(),n.isFieldsTouched([e])},this.isFieldsValidating=function(e){n.warningUnhooked();var t=n.getFieldEntities();if(!e)return t.some((function(e){return e.isFieldValidating()}));var r=e.map(E);return t.some((function(e){var t=e.getNamePath();return N(r,t)&&e.isFieldValidating()}))},this.isFieldValidating=function(e){return n.warningUnhooked(),n.isFieldsValidating([e])},this.resetWithFieldInitialValue=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new Q,r=n.getFieldEntities(!0);r.forEach((function(e){var n=e.props.initialValue,r=e.getNamePath();if(void 0!==n){var i=t.get(r)||new Set;i.add({entity:e,value:n}),t.set(r,i)}}));var i,a=function(r){r.forEach((function(r){if(void 0!==r.props.initialValue){var i=r.getNamePath();if(void 0!==n.getInitialValue(i))(0,g.ZP)(!1,"Form already set 'initialValues' with path '".concat(i.join("."),"'. Field can not overwrite it."));else{var a=t.get(i);if(a&&a.size>1)(0,g.ZP)(!1,"Multiple Field with path '".concat(i.join("."),"' set 'initialValue'. Can not decide which one to pick."));else if(a){var s=n.getFieldValue(i);e.skipExist&&void 0!==s||(n.store=w(n.store,i,(0,u.Z)(a)[0].value))}}}}))};e.entities?i=e.entities:e.namePathList?(i=[],e.namePathList.forEach((function(e){var n,r=t.get(e);r&&(n=i).push.apply(n,(0,u.Z)((0,u.Z)(r).map((function(e){return e.entity}))))}))):i=r,a(i)},this.resetFields=function(e){n.warningUnhooked();var t=n.store;if(!e)return n.store=A({},n.initialValues),n.resetWithFieldInitialValue(),void n.notifyObservers(t,null,{type:"reset"});var r=e.map(E);r.forEach((function(e){var t=n.getInitialValue(e);n.store=w(n.store,e,t)})),n.resetWithFieldInitialValue({namePathList:r}),n.notifyObservers(t,r,{type:"reset"})},this.setFields=function(e){n.warningUnhooked();var t=n.store;e.forEach((function(e){var r=e.name,i=(e.errors,(0,a.Z)(e,["name","errors"])),s=E(r);"value"in i&&(n.store=w(n.store,s,i.value)),n.notifyObservers(t,[s],{type:"setField",data:e})}))},this.getFields=function(){return n.getFieldEntities(!0).map((function(e){var t=e.getNamePath(),r=e.getMeta(),i=(0,o.Z)((0,o.Z)({},r),{},{name:t,value:n.getFieldValue(t)});return Object.defineProperty(i,"originRCField",{value:!0}),i}))},this.initEntityValue=function(e){var t=e.props.initialValue;if(void 0!==t){var r=e.getNamePath();void 0===C(n.store,r)&&(n.store=w(n.store,r,t))}},this.registerField=function(e){if(n.fieldEntities.push(e),void 0!==e.props.initialValue){var t=n.store;n.resetWithFieldInitialValue({entities:[e],skipExist:!0}),n.notifyObservers(t,[e.getNamePath()],{type:"valueUpdate",source:"internal"})}return function(t,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];n.fieldEntities=n.fieldEntities.filter((function(t){return t!==e}));var a=void 0!==r?r:n.preserve;if(!1===a&&(!t||i.length>1)){var s=e.getNamePath(),o=t?void 0:C(n.initialValues,s);s.length&&n.getFieldValue(s)!==o&&n.fieldEntities.every((function(e){return!I(e.getNamePath(),s)}))&&(n.store=w(n.store,s,o,!0))}}},this.dispatch=function(e){switch(e.type){case"updateValue":var t=e.namePath,r=e.value;n.updateValue(t,r);break;case"validateField":var i=e.namePath,a=e.triggerName;n.validateFields([i],{triggerName:a})}},this.notifyObservers=function(e,t,r){if(n.subscribable){var i=(0,o.Z)((0,o.Z)({},r),{},{store:n.getFieldsValue(!0)});n.getFieldEntities().forEach((function(n){(0,n.onStoreChange)(e,t,i)}))}else n.forceRootUpdate()},this.updateValue=function(e,t){var r=E(e),i=n.store;n.store=w(n.store,r,t),n.notifyObservers(i,[r],{type:"valueUpdate",source:"internal"});var a=n.getDependencyChildrenFields(r);a.length&&n.validateFields(a),n.notifyObservers(i,a,{type:"dependenciesUpdate",relatedFields:[r].concat((0,u.Z)(a))});var s=n.callbacks.onValuesChange;s&&s(x(n.store,[r]),n.getFieldsValue());n.triggerOnFieldsChange([r].concat((0,u.Z)(a)))},this.setFieldsValue=function(e){n.warningUnhooked();var t=n.store;e&&(n.store=A(n.store,e)),n.notifyObservers(t,null,{type:"valueUpdate",source:"external"})},this.getDependencyChildrenFields=function(e){var t=new Set,r=[],i=new Q;n.getFieldEntities().forEach((function(e){(e.props.dependencies||[]).forEach((function(t){var n=E(t);i.update(n,(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Set;return t.add(e),t}))}))}));return function e(n){(i.get(n)||new Set).forEach((function(n){if(!t.has(n)){t.add(n);var i=n.getNamePath();n.isFieldDirty()&&i.length&&(r.push(i),e(i))}}))}(e),r},this.triggerOnFieldsChange=function(e,t){var r=n.callbacks.onFieldsChange;if(r){var i=n.getFields();if(t){var a=new Q;t.forEach((function(e){var t=e.name,n=e.errors;a.set(t,n)})),i.forEach((function(e){e.errors=a.get(e.name)||e.errors}))}r(i.filter((function(t){var n=t.name;return N(e,n)})),i)}},this.validateFields=function(e,t){n.warningUnhooked();var r=!!e,i=r?e.map(E):[],a=[];n.getFieldEntities(!0).forEach((function(s){if(r||i.push(s.getNamePath()),(null==t?void 0:t.recursive)&&r){var u=s.getNamePath();u.every((function(t,n){return e[n]===t||void 0===e[n]}))&&i.push(u)}if(s.props.rules&&s.props.rules.length){var l=s.getNamePath();if(!r||N(i,l)){var c=s.validateRules((0,o.Z)({validateMessages:(0,o.Z)((0,o.Z)({},U),n.validateMessages)},t));a.push(c.then((function(){return{name:l,errors:[]}})).catch((function(e){return Promise.reject({name:l,errors:e})})))}}}));var s=function(e){var t=!1,n=e.length,r=[];return e.length?new Promise((function(i,a){e.forEach((function(e,s){e.catch((function(e){return t=!0,e})).then((function(e){n-=1,r[s]=e,n>0||(t&&a(r),i(r))}))}))})):Promise.resolve([])}(a);n.lastValidatePromise=s,s.catch((function(e){return e})).then((function(e){var t=e.map((function(e){return e.name}));n.notifyObservers(n.store,t,{type:"validateFinish"}),n.triggerOnFieldsChange(t,e)}));var u=s.then((function(){return n.lastValidatePromise===s?Promise.resolve(n.getFieldsValue(i)):Promise.reject([])})).catch((function(e){var t=e.filter((function(e){return e&&e.errors.length}));return Promise.reject({values:n.getFieldsValue(i),errorFields:t,outOfDate:n.lastValidatePromise!==s})}));return u.catch((function(e){return e})),u},this.submit=function(){n.warningUnhooked(),n.validateFields().then((function(e){var t=n.callbacks.onFinish;if(t)try{t(e)}catch(e){console.error(e)}})).catch((function(e){var t=n.callbacks.onFinishFailed;t&&t(e)}))},this.forceRootUpdate=t};const ee=function(e){var t=r.useRef(),n=r.useState({}),i=(0,Y.Z)(n,2)[1];if(!t.current)if(e)t.current=e;else{var a=new X((function(){i({})}));t.current=a.getForm()}return[t.current]};var te=r.createContext({triggerFormChange:function(){},triggerFormFinish:function(){},registerForm:function(){},unregisterForm:function(){}}),ne=function(e){var t=e.validateMessages,n=e.onFormChange,i=e.onFormFinish,a=e.children,u=r.useContext(te),l=r.useRef({});return r.createElement(te.Provider,{value:(0,o.Z)((0,o.Z)({},u),{},{validateMessages:(0,o.Z)((0,o.Z)({},u.validateMessages),t),triggerFormChange:function(e,t){n&&n(e,{changedFields:t,forms:l.current}),u.triggerFormChange(e,t)},triggerFormFinish:function(e,t){i&&i(e,{values:t,forms:l.current}),u.triggerFormFinish(e,t)},registerForm:function(e,t){e&&(l.current=(0,o.Z)((0,o.Z)({},l.current),{},(0,s.Z)({},e,t))),u.registerForm(e,t)},unregisterForm:function(e){var t=(0,o.Z)({},l.current);delete t[e],l.current=t,u.unregisterForm(e)}})},a)};const re=te;const ie=function(e,t){var n=e.name,s=e.initialValues,l=e.fields,c=e.form,d=e.preserve,f=e.children,h=e.component,v=void 0===h?"form":h,g=e.validateMessages,p=e.validateTrigger,F=void 0===p?"onChange":p,y=e.onValuesChange,Z=e.onFieldsChange,k=e.onFinish,b=e.onFinishFailed,P=(0,a.Z)(e,["name","initialValues","fields","form","preserve","children","component","validateMessages","validateTrigger","onValuesChange","onFieldsChange","onFinish","onFinishFailed"]),E=r.useContext(re),C=ee(c),w=(0,Y.Z)(C,1)[0],x=w.getInternalHooks(m.k),N=x.useSubscribe,$=x.setInitialValues,R=x.setCallbacks,A=x.setValidateMessages,I=x.setPreserve;r.useImperativeHandle(t,(function(){return w})),r.useEffect((function(){return E.registerForm(n,w),function(){E.unregisterForm(n)}}),[E,w,n]),A((0,o.Z)((0,o.Z)({},E.validateMessages),g)),R({onValuesChange:y,onFieldsChange:function(e){if(E.triggerFormChange(n,e),Z){for(var t=arguments.length,r=new Array(t>1?t-1:0),i=1;i<t;i++)r[i-1]=arguments[i];Z.apply(void 0,[e].concat(r))}},onFinish:function(e){E.triggerFormFinish(n,e),k&&k(e)},onFinishFailed:b}),I(d);var M=r.useRef(null);$(s,!M.current),M.current||(M.current=!0);var T=f,O="function"==typeof f;O&&(T=f(w.getFieldsValue(!0),w));N(!O);var U=r.useRef();r.useEffect((function(){(function(e,t){if(e===t)return!0;if(!e&&t||e&&!t)return!1;if(!e||!t||"object"!==(0,V.Z)(e)||"object"!==(0,V.Z)(t))return!1;var n=Object.keys(e),r=Object.keys(t),i=new Set([].concat((0,u.Z)(n),(0,u.Z)(r)));return(0,u.Z)(i).every((function(n){var r=e[n],i=t[n];return"function"==typeof r&&"function"==typeof i||r===i}))})(U.current||[],l||[])||w.setFields(l||[]),U.current=l}),[l,w]);var j=r.useMemo((function(){return(0,o.Z)((0,o.Z)({},w),{},{validateTrigger:F})}),[w,F]),L=r.createElement(m.Z.Provider,{value:j},T);return!1===v?L:r.createElement(v,(0,i.Z)({},P,{onSubmit:function(e){e.preventDefault(),e.stopPropagation(),w.submit()},onReset:function(e){var t;e.preventDefault(),w.resetFields(),null===(t=P.onReset)||void 0===t||t.call(P,e)}}),L)};var ae=r.forwardRef(ie);ae.FormProvider=ne,ae.Field=J,ae.List=K,ae.useForm=ee;const se=ae}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,