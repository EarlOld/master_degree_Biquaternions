"use strict";(self.webpackChunkmaster_degree=self.webpackChunkmaster_degree||[]).push([[738],{4444:(e,t,n)=>{n.d(t,{Z:()=>Z});var o=n(7462),a=n(4925),r=n(5671),c=n(3144),i=n(9340),l=n(8557),s=n(2016),d=n(7294),m=n(1413),u=n(4942),p=n(7326),h=n(4184),f=n.n(h),v=n(4204),y=n(5105),g=n(8423);var w={transition:"transitionend",WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend"},k=Object.keys(w).filter((function(e){if("undefined"==typeof document)return!1;var t=document.getElementsByTagName("html")[0];return e in(t?t.style:{})}))[0],C=w[k];function b(e,t,n,o){e.addEventListener?e.addEventListener(t,n,o):e.attachEvent&&e.attachEvent("on".concat(t),n)}function E(e,t,n,o){e.removeEventListener?e.removeEventListener(t,n,o):e.attachEvent&&e.detachEvent("on".concat(t),n)}var D=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},N=!("undefined"!=typeof window&&window.document&&window.document.createElement),S=function e(t,n,o,a){if(!n||n===document||n instanceof Document)return!1;if(n===t.parentNode)return!0;var r=Math.max(Math.abs(o),Math.abs(a))===Math.abs(a),c=Math.max(Math.abs(o),Math.abs(a))===Math.abs(o),i=n.scrollHeight-n.clientHeight,l=n.scrollWidth-n.clientWidth,s=document.defaultView.getComputedStyle(n),d="auto"===s.overflowY||"scroll"===s.overflowY,m="auto"===s.overflowX||"scroll"===s.overflowX,u=i&&d,p=l&&m;return!!(r&&(!u||u&&(n.scrollTop>=i&&a<0||n.scrollTop<=0&&a>0))||c&&(!p||p&&(n.scrollLeft>=l&&o<0||n.scrollLeft<=0&&o>0)))&&e(t,n.parentNode,o,a)},T={};const M=function(e){(0,i.Z)(n,e);var t=(0,l.Z)(n);function n(e){var o;return(0,r.Z)(this,n),(o=t.call(this,e)).domFocus=function(){o.dom&&o.dom.focus()},o.removeStartHandler=function(e){e.touches.length>1||(o.startPos={x:e.touches[0].clientX,y:e.touches[0].clientY})},o.removeMoveHandler=function(e){if(!(e.changedTouches.length>1)){var t=e.currentTarget,n=e.changedTouches[0].clientX-o.startPos.x,a=e.changedTouches[0].clientY-o.startPos.y;(t===o.maskDom||t===o.handlerDom||t===o.contentDom&&S(t,e.target,n,a))&&e.cancelable&&e.preventDefault()}},o.transitionEnd=function(e){var t=e.target;E(t,C,o.transitionEnd),t.style.transition=""},o.onKeyDown=function(e){if(e.keyCode===y.Z.ESC){var t=o.props.onClose;e.stopPropagation(),t&&t(e)}},o.onWrapperTransitionEnd=function(e){var t=o.props,n=t.open,a=t.afterVisibleChange;e.target===o.contentWrapper&&e.propertyName.match(/transform$/)&&(o.dom.style.transition="",!n&&o.getCurrentDrawerSome()&&(document.body.style.overflowX="",o.maskDom&&(o.maskDom.style.left="",o.maskDom.style.width="")),a&&a(!!n))},o.openLevelTransition=function(){var e=o.props,t=e.open,n=e.width,a=e.height,r=o.getHorizontalBoolAndPlacementName(),c=r.isHorizontal,i=r.placementName,l=o.contentDom?o.contentDom.getBoundingClientRect()[c?"width":"height"]:0,s=(c?n:a)||l;o.setLevelAndScrolling(t,i,s)},o.setLevelTransform=function(e,t,n,a){var r=o.props,c=r.placement,i=r.levelMove,l=r.duration,s=r.ease,d=r.showMask;o.levelDom.forEach((function(r){r.style.transition="transform ".concat(l," ").concat(s),b(r,C,o.transitionEnd);var m,u,p,h=e?n:0;if(i){var f=(u={target:r,open:e},p="function"==typeof(m=i)?m(u):m,Array.isArray(p)?2===p.length?p:[p[0],p[1]]:[p]);h=e?f[0]:f[1]||0}var v="number"==typeof h?"".concat(h,"px"):h,y="left"===c||"top"===c?v:"-".concat(v);y=d&&"right"===c&&a?"calc(".concat(y," + ").concat(a,"px)"):y,r.style.transform=h?"".concat(t,"(").concat(y,")"):""}))},o.setLevelAndScrolling=function(e,t,n){var a=o.props.onChange;if(!N){var r=document.body.scrollHeight>(window.innerHeight||document.documentElement.clientHeight)&&window.innerWidth>document.body.offsetWidth?(0,v.Z)(!0):0;o.setLevelTransform(e,t,n,r),o.toggleScrollingToDrawerAndBody(r)}a&&a(e)},o.toggleScrollingToDrawerAndBody=function(e){var t=o.props,n=t.getContainer,a=t.showMask,r=t.open,c=n&&n();if(c&&c.parentNode===document.body&&a){var i=["touchstart"],l=[document.body,o.maskDom,o.handlerDom,o.contentDom];r&&"hidden"!==document.body.style.overflow?(e&&o.addScrollingEffect(e),document.body.style.touchAction="none",l.forEach((function(e,t){e&&b(e,i[t]||"touchmove",t?o.removeMoveHandler:o.removeStartHandler,o.passive)}))):o.getCurrentDrawerSome()&&(document.body.style.touchAction="",e&&o.remScrollingEffect(e),l.forEach((function(e,t){e&&E(e,i[t]||"touchmove",t?o.removeMoveHandler:o.removeStartHandler,o.passive)})))}},o.addScrollingEffect=function(e){var t=o.props,n=t.placement,a=t.duration,r=t.ease,c="width ".concat(a," ").concat(r),i="transform ".concat(a," ").concat(r);switch(o.dom.style.transition="none",n){case"right":o.dom.style.transform="translateX(-".concat(e,"px)");break;case"top":case"bottom":o.dom.style.width="calc(100% - ".concat(e,"px)"),o.dom.style.transform="translateZ(0)"}clearTimeout(o.timeout),o.timeout=setTimeout((function(){o.dom&&(o.dom.style.transition="".concat(i,",").concat(c),o.dom.style.width="",o.dom.style.transform="")}))},o.remScrollingEffect=function(e){var t,n=o.props,a=n.placement,r=n.duration,c=n.ease;k&&(document.body.style.overflowX="hidden"),o.dom.style.transition="none";var i="width ".concat(r," ").concat(c),l="transform ".concat(r," ").concat(c);switch(a){case"left":o.dom.style.width="100%",i="width 0s ".concat(c," ").concat(r);break;case"right":o.dom.style.transform="translateX(".concat(e,"px)"),o.dom.style.width="100%",i="width 0s ".concat(c," ").concat(r),o.maskDom&&(o.maskDom.style.left="-".concat(e,"px"),o.maskDom.style.width="calc(100% + ".concat(e,"px)"));break;case"top":case"bottom":o.dom.style.width="calc(100% + ".concat(e,"px)"),o.dom.style.height="100%",o.dom.style.transform="translateZ(0)",t="height 0s ".concat(c," ").concat(r)}clearTimeout(o.timeout),o.timeout=setTimeout((function(){o.dom&&(o.dom.style.transition="".concat(l,",").concat(t?"".concat(t,","):"").concat(i),o.dom.style.transform="",o.dom.style.width="",o.dom.style.height="")}))},o.getCurrentDrawerSome=function(){return!Object.keys(T).some((function(e){return T[e]}))},o.getLevelDom=function(e){var t=e.level,n=e.getContainer;if(!N){var a,r=n&&n(),c=r?r.parentNode:null;if(o.levelDom=[],"all"===t)(c?Array.prototype.slice.call(c.children):[]).forEach((function(e){"SCRIPT"!==e.nodeName&&"STYLE"!==e.nodeName&&"LINK"!==e.nodeName&&e!==r&&o.levelDom.push(e)}));else t&&(a=t,Array.isArray(a)?a:[a]).forEach((function(e){document.querySelectorAll(e).forEach((function(e){o.levelDom.push(e)}))}))}},o.getHorizontalBoolAndPlacementName=function(){var e=o.props.placement,t="left"===e||"right"===e;return{isHorizontal:t,placementName:"translate".concat(t?"X":"Y")}},o.state={_self:(0,p.Z)(o)},o}return(0,c.Z)(n,[{key:"componentDidMount",value:function(){var e=this;if(!N){var t=!1;try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){return t=!0,null}}))}catch(e){}this.passive=!!t&&{passive:!1}}var n,o=this.props,a=o.open,r=o.getContainer,c=o.showMask,i=r&&r();(this.drawerId="drawer_id_".concat(Number((Date.now()+Math.random()).toString().replace(".",Math.round(9*Math.random()).toString())).toString(16)),this.getLevelDom(this.props),a)&&(i&&i.parentNode===document.body&&(T[this.drawerId]=a),this.openLevelTransition(),this.forceUpdate((function(){e.domFocus()})),c&&(null===(n=this.props.scrollLocker)||void 0===n||n.lock()))}},{key:"componentDidUpdate",value:function(e){var t=this.props,n=t.open,o=t.getContainer,a=t.scrollLocker,r=t.showMask,c=o&&o();n!==e.open&&(c&&c.parentNode===document.body&&(T[this.drawerId]=!!n),this.openLevelTransition(),n?(this.domFocus(),r&&(null==a||a.lock())):null==a||a.unLock())}},{key:"componentWillUnmount",value:function(){var e=this.props,t=e.open,n=e.scrollLocker;delete T[this.drawerId],t&&(this.setLevelTransform(!1),document.body.style.touchAction=""),null==n||n.unLock()}},{key:"render",value:function(){var e,t=this,n=this.props,r=n.className,c=n.children,i=n.style,l=n.width,s=n.height,p=(n.defaultOpen,n.open),h=n.prefixCls,v=n.placement,y=(n.level,n.levelMove,n.ease,n.duration,n.getContainer,n.handler),w=(n.onChange,n.afterVisibleChange,n.showMask),k=n.maskClosable,C=n.maskStyle,b=n.onClose,E=n.onHandleClick,N=n.keyboard,S=(n.getOpenCount,n.scrollLocker,n.contentWrapperStyle),T=(0,a.Z)(n,["className","children","style","width","height","defaultOpen","open","prefixCls","placement","level","levelMove","ease","duration","getContainer","handler","onChange","afterVisibleChange","showMask","maskClosable","maskStyle","onClose","onHandleClick","keyboard","getOpenCount","scrollLocker","contentWrapperStyle"]),M=!!this.dom&&p,L=f()(h,(e={},(0,u.Z)(e,"".concat(h,"-").concat(v),!0),(0,u.Z)(e,"".concat(h,"-open"),M),(0,u.Z)(e,r||"",!!r),(0,u.Z)(e,"no-mask",!w),e)),Z=this.getHorizontalBoolAndPlacementName().placementName,H="left"===v||"top"===v?"-100%":"100%",x=M?"":"".concat(Z,"(").concat(H,")"),A=y&&d.cloneElement(y,{onClick:function(e){y.props.onClick&&y.props.onClick(),E&&E(e)},ref:function(e){t.handlerDom=e}});return d.createElement("div",(0,o.Z)({},(0,g.Z)(T,["switchScrollingEffect"]),{tabIndex:-1,className:L,style:i,ref:function(e){t.dom=e},onKeyDown:M&&N?this.onKeyDown:void 0,onTransitionEnd:this.onWrapperTransitionEnd}),w&&d.createElement("div",{className:"".concat(h,"-mask"),onClick:k?b:void 0,style:C,ref:function(e){t.maskDom=e}}),d.createElement("div",{className:"".concat(h,"-content-wrapper"),style:(0,m.Z)({transform:x,msTransform:x,width:D(l)?"".concat(l,"px"):l,height:D(s)?"".concat(s,"px"):s},S),ref:function(e){t.contentWrapper=e}},d.createElement("div",{className:"".concat(h,"-content"),ref:function(e){t.contentDom=e},onTouchStart:M&&w?this.removeStartHandler:void 0,onTouchMove:M&&w?this.removeMoveHandler:void 0},c),A))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=t.prevProps,o=t._self,a={prevProps:e};if(void 0!==n){var r=e.placement,c=e.level;r!==n.placement&&(o.contentDom=null),c!==n.level&&o.getLevelDom(e)}return a}}]),n}(d.Component);var L=function(e){(0,i.Z)(n,e);var t=(0,l.Z)(n);function n(e){var o;(0,r.Z)(this,n),(o=t.call(this,e)).onHandleClick=function(e){var t=o.props,n=t.onHandleClick,a=t.open;if(n&&n(e),void 0===a){var r=o.state.open;o.setState({open:!r})}},o.onClose=function(e){var t=o.props,n=t.onClose,a=t.open;n&&n(e),void 0===a&&o.setState({open:!1})};var a=void 0!==e.open?e.open:!!e.defaultOpen;return o.state={open:a},"onMaskClick"in e&&console.warn("`onMaskClick` are removed, please use `onClose` instead."),o}return(0,c.Z)(n,[{key:"render",value:function(){var e=this,t=this.props,n=(t.defaultOpen,t.getContainer),r=t.wrapperClassName,c=t.forceRender,i=t.handler,l=(0,a.Z)(t,["defaultOpen","getContainer","wrapperClassName","forceRender","handler"]),m=this.state.open;if(!n)return d.createElement("div",{className:r,ref:function(t){e.dom=t}},d.createElement(M,(0,o.Z)({},l,{open:m,handler:i,getContainer:function(){return e.dom},onClose:this.onClose,onHandleClick:this.onHandleClick})));var u=!!i||c;return d.createElement(s.Z,{visible:m,forceRender:u,getContainer:n,wrapperClassName:r},(function(t){var n=t.visible,r=t.afterClose,c=(0,a.Z)(t,["visible","afterClose"]);return d.createElement(M,(0,o.Z)({},l,c,{open:void 0!==n?n:m,afterVisibleChange:void 0!==r?r:l.afterVisibleChange,handler:i,onClose:e.onClose,onHandleClick:e.onHandleClick}))}))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=t.prevProps,o={prevProps:e};return void 0!==n&&e.open!==n.open&&(o.open=e.open),o}}]),n}(d.Component);L.defaultProps={prefixCls:"drawer",placement:"left",getContainer:"body",defaultOpen:!1,level:"all",duration:".3s",ease:"cubic-bezier(0.78, 0.14, 0.15, 0.86)",onChange:function(){},afterVisibleChange:function(){},handler:d.createElement("div",{className:"drawer-handle"},d.createElement("i",{className:"drawer-handle-icon"})),showMask:!0,maskClosable:!0,maskStyle:{},wrapperClassName:"",className:"",keyboard:!0,forceRender:!1};const Z=L}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVcvSCxHQU9iLFlBSnlCLElBQWQrSCxHQUE2Qi9ILEVBQU00QixPQUFTbUcsRUFBVW5HLE9BQy9ENkksRUFBUzdJLEtBQU81QixFQUFNNEIsTUFHakI2SSxNQUlKVixFQXBJd0IsQ0FxSS9CLGFBRUZBLEVBQWNXLGFBQWUsQ0FDM0JqQyxVQUFXLFNBQ1h2RixVQUFXLE9BQ1h5QixhQUFjLE9BQ2Q2RCxhQUFhLEVBQ2J2QyxNQUFPLE1BQ1A3QyxTQUFVLE1BQ1ZDLEtBQU0sdUNBQ05jLFNBQVUsYUFDVnRDLG1CQUFvQixhQUNwQjZHLFFBQXNCLGdCQUFvQixNQUFPLENBQy9DSixVQUFXLGlCQUNHLGdCQUFvQixJQUFLLENBQ3ZDQSxVQUFXLHdCQUViaEYsVUFBVSxFQUNWcUYsY0FBYyxFQUNkQyxVQUFXLEdBQ1hLLGlCQUFrQixHQUNsQlgsVUFBVyxHQUNYUSxVQUFVLEVBQ1ZzQixhQUFhLEdBRWYsTUN0S0EsRURzS0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXItZGVncmVlLy4vbm9kZV9tb2R1bGVzL3JjLWRyYXdlci9lcy91dGlscy5qcyIsIndlYnBhY2s6Ly9tYXN0ZXItZGVncmVlLy4vbm9kZV9tb2R1bGVzL3JjLWRyYXdlci9lcy9EcmF3ZXJDaGlsZC5qcyIsIndlYnBhY2s6Ly9tYXN0ZXItZGVncmVlLy4vbm9kZV9tb2R1bGVzL3JjLWRyYXdlci9lcy9EcmF3ZXJXcmFwcGVyLmpzIiwid2VicGFjazovL21hc3Rlci1kZWdyZWUvLi9ub2RlX21vZHVsZXMvcmMtZHJhd2VyL2VzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBkYXRhVG9BcnJheSh2YXJzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhcnMpKSB7XG4gICAgcmV0dXJuIHZhcnM7XG4gIH1cblxuICByZXR1cm4gW3ZhcnNdO1xufVxudmFyIHRyYW5zaXRpb25FbmRPYmplY3QgPSB7XG4gIHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJyxcbiAgV2Via2l0VHJhbnNpdGlvbjogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICBNb3pUcmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXG4gIE9UcmFuc2l0aW9uOiAnb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQnXG59O1xuZXhwb3J0IHZhciB0cmFuc2l0aW9uU3RyID0gT2JqZWN0LmtleXModHJhbnNpdGlvbkVuZE9iamVjdCkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgaHRtbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdodG1sJylbMF07XG4gIHJldHVybiBrZXkgaW4gKGh0bWwgPyBodG1sLnN0eWxlIDoge30pO1xufSlbMF07XG5leHBvcnQgdmFyIHRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kT2JqZWN0W3RyYW5zaXRpb25TdHJdO1xuZXhwb3J0IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIodGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIG9wdGlvbnMpO1xuICB9IGVsc2UgaWYgKHRhcmdldC5hdHRhY2hFdmVudCkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgICB0YXJnZXQuYXR0YWNoRXZlbnQoXCJvblwiLmNvbmNhdChldmVudFR5cGUpLCBjYWxsYmFjayk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIodGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIGlmICh0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIG9wdGlvbnMpO1xuICB9IGVsc2UgaWYgKHRhcmdldC5hdHRhY2hFdmVudCkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgICB0YXJnZXQuZGV0YWNoRXZlbnQoXCJvblwiLmNvbmNhdChldmVudFR5cGUpLCBjYWxsYmFjayk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybUFyZ3VtZW50cyhhcmcsIGNiKSB7XG4gIHZhciByZXN1bHQgPSB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nID8gYXJnKGNiKSA6IGFyZztcblxuICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtyZXN1bHRbMF0sIHJlc3VsdFsxXV07XG4gIH1cblxuICByZXR1cm4gW3Jlc3VsdF07XG59XG5leHBvcnQgdmFyIGlzTnVtZXJpYyA9IGZ1bmN0aW9uIGlzTnVtZXJpYyh2YWx1ZSkge1xuICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKSAmJiBpc0Zpbml0ZSh2YWx1ZSk7XG59O1xuZXhwb3J0IHZhciB3aW5kb3dJc1VuZGVmaW5lZCA9ICEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmV4cG9ydCB2YXIgZ2V0VG91Y2hQYXJlbnRTY3JvbGwgPSBmdW5jdGlvbiBnZXRUb3VjaFBhcmVudFNjcm9sbChyb290LCBjdXJyZW50VGFyZ2V0LCBkaWZmZXJYLCBkaWZmZXJZKSB7XG4gIGlmICghY3VycmVudFRhcmdldCB8fCBjdXJyZW50VGFyZ2V0ID09PSBkb2N1bWVudCB8fCBjdXJyZW50VGFyZ2V0IGluc3RhbmNlb2YgRG9jdW1lbnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gcm9vdCDkuLogZHJhd2VyLWNvbnRlbnQg6K6+5a6a5LqGIG92ZXJmbG93LCDliKTmlq3kuLogcm9vdCDnmoQgcGFyZW50IOaXtue7k+adn+a7muWKqO+8m1xuXG5cbiAgaWYgKGN1cnJlbnRUYXJnZXQgPT09IHJvb3QucGFyZW50Tm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIGlzWSA9IE1hdGgubWF4KE1hdGguYWJzKGRpZmZlclgpLCBNYXRoLmFicyhkaWZmZXJZKSkgPT09IE1hdGguYWJzKGRpZmZlclkpO1xuICB2YXIgaXNYID0gTWF0aC5tYXgoTWF0aC5hYnMoZGlmZmVyWCksIE1hdGguYWJzKGRpZmZlclkpKSA9PT0gTWF0aC5hYnMoZGlmZmVyWCk7XG4gIHZhciBzY3JvbGxZID0gY3VycmVudFRhcmdldC5zY3JvbGxIZWlnaHQgLSBjdXJyZW50VGFyZ2V0LmNsaWVudEhlaWdodDtcbiAgdmFyIHNjcm9sbFggPSBjdXJyZW50VGFyZ2V0LnNjcm9sbFdpZHRoIC0gY3VycmVudFRhcmdldC5jbGllbnRXaWR0aDtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50VGFyZ2V0KTtcbiAgdmFyIG92ZXJmbG93WSA9IHN0eWxlLm92ZXJmbG93WSA9PT0gJ2F1dG8nIHx8IHN0eWxlLm92ZXJmbG93WSA9PT0gJ3Njcm9sbCc7XG4gIHZhciBvdmVyZmxvd1ggPSBzdHlsZS5vdmVyZmxvd1ggPT09ICdhdXRvJyB8fCBzdHlsZS5vdmVyZmxvd1ggPT09ICdzY3JvbGwnO1xuICB2YXIgeSA9IHNjcm9sbFkgJiYgb3ZlcmZsb3dZO1xuICB2YXIgeCA9IHNjcm9sbFggJiYgb3ZlcmZsb3dYO1xuXG4gIGlmIChpc1kgJiYgKCF5IHx8IHkgJiYgKGN1cnJlbnRUYXJnZXQuc2Nyb2xsVG9wID49IHNjcm9sbFkgJiYgZGlmZmVyWSA8IDAgfHwgY3VycmVudFRhcmdldC5zY3JvbGxUb3AgPD0gMCAmJiBkaWZmZXJZID4gMCkpIHx8IGlzWCAmJiAoIXggfHwgeCAmJiAoY3VycmVudFRhcmdldC5zY3JvbGxMZWZ0ID49IHNjcm9sbFggJiYgZGlmZmVyWCA8IDAgfHwgY3VycmVudFRhcmdldC5zY3JvbGxMZWZ0IDw9IDAgJiYgZGlmZmVyWCA+IDApKSkge1xuICAgIHJldHVybiBnZXRUb3VjaFBhcmVudFNjcm9sbChyb290LCBjdXJyZW50VGFyZ2V0LnBhcmVudE5vZGUsIGRpZmZlclgsIGRpZmZlclkpO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNcIjtcbmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBnZXRTY3JvbGxCYXJTaXplIGZyb20gXCJyYy11dGlsL2VzL2dldFNjcm9sbEJhclNpemVcIjtcbmltcG9ydCBLZXlDb2RlIGZyb20gXCJyYy11dGlsL2VzL0tleUNvZGVcIjtcbmltcG9ydCBvbWl0IGZyb20gXCJyYy11dGlsL2VzL29taXRcIjtcbmltcG9ydCB7IGFkZEV2ZW50TGlzdGVuZXIsIGRhdGFUb0FycmF5LCBnZXRUb3VjaFBhcmVudFNjcm9sbCwgaXNOdW1lcmljLCByZW1vdmVFdmVudExpc3RlbmVyLCB0cmFuc2Zvcm1Bcmd1bWVudHMsIHRyYW5zaXRpb25FbmQsIHRyYW5zaXRpb25TdHIsIHdpbmRvd0lzVW5kZWZpbmVkIH0gZnJvbSAnLi91dGlscyc7XG52YXIgY3VycmVudERyYXdlciA9IHt9O1xuXG52YXIgRHJhd2VyQ2hpbGQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERyYXdlckNoaWxkLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKERyYXdlckNoaWxkKTtcblxuICBmdW5jdGlvbiBEcmF3ZXJDaGlsZChwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEcmF3ZXJDaGlsZCk7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKTtcblxuICAgIF90aGlzLmRvbUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmRvbSkge1xuICAgICAgICBfdGhpcy5kb20uZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucmVtb3ZlU3RhcnRIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLnRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnN0YXJ0UG9zID0ge1xuICAgICAgICB4OiBlLnRvdWNoZXNbMF0uY2xpZW50WCxcbiAgICAgICAgeTogZS50b3VjaGVzWzBdLmNsaWVudFlcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF90aGlzLnJlbW92ZU1vdmVIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY3VycmVudFRhcmdldCA9IGUuY3VycmVudFRhcmdldDtcbiAgICAgIHZhciBkaWZmZXJYID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYIC0gX3RoaXMuc3RhcnRQb3MueDtcbiAgICAgIHZhciBkaWZmZXJZID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZIC0gX3RoaXMuc3RhcnRQb3MueTtcblxuICAgICAgaWYgKChjdXJyZW50VGFyZ2V0ID09PSBfdGhpcy5tYXNrRG9tIHx8IGN1cnJlbnRUYXJnZXQgPT09IF90aGlzLmhhbmRsZXJEb20gfHwgY3VycmVudFRhcmdldCA9PT0gX3RoaXMuY29udGVudERvbSAmJiBnZXRUb3VjaFBhcmVudFNjcm9sbChjdXJyZW50VGFyZ2V0LCBlLnRhcmdldCwgZGlmZmVyWCwgZGlmZmVyWSkpICYmIGUuY2FuY2VsYWJsZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGRvbSA9IGUudGFyZ2V0O1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihkb20sIHRyYW5zaXRpb25FbmQsIF90aGlzLnRyYW5zaXRpb25FbmQpO1xuICAgICAgZG9tLnN0eWxlLnRyYW5zaXRpb24gPSAnJztcbiAgICB9O1xuXG4gICAgX3RoaXMub25LZXlEb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLmtleUNvZGUgPT09IEtleUNvZGUuRVNDKSB7XG4gICAgICAgIHZhciBvbkNsb3NlID0gX3RoaXMucHJvcHMub25DbG9zZTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBpZiAob25DbG9zZSkge1xuICAgICAgICAgIG9uQ2xvc2UoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvcGVuID0gX3RoaXMkcHJvcHMub3BlbixcbiAgICAgICAgICBhZnRlclZpc2libGVDaGFuZ2UgPSBfdGhpcyRwcm9wcy5hZnRlclZpc2libGVDaGFuZ2U7XG5cbiAgICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXMuY29udGVudFdyYXBwZXIgJiYgZS5wcm9wZXJ0eU5hbWUubWF0Y2goL3RyYW5zZm9ybSQvKSkge1xuICAgICAgICBfdGhpcy5kb20uc3R5bGUudHJhbnNpdGlvbiA9ICcnO1xuXG4gICAgICAgIGlmICghb3BlbiAmJiBfdGhpcy5nZXRDdXJyZW50RHJhd2VyU29tZSgpKSB7XG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvd1ggPSAnJztcblxuICAgICAgICAgIGlmIChfdGhpcy5tYXNrRG9tKSB7XG4gICAgICAgICAgICBfdGhpcy5tYXNrRG9tLnN0eWxlLmxlZnQgPSAnJztcbiAgICAgICAgICAgIF90aGlzLm1hc2tEb20uc3R5bGUud2lkdGggPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWZ0ZXJWaXNpYmxlQ2hhbmdlKSB7XG4gICAgICAgICAgYWZ0ZXJWaXNpYmxlQ2hhbmdlKCEhb3Blbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub3BlbkxldmVsVHJhbnNpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvcGVuID0gX3RoaXMkcHJvcHMyLm9wZW4sXG4gICAgICAgICAgd2lkdGggPSBfdGhpcyRwcm9wczIud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gX3RoaXMkcHJvcHMyLmhlaWdodDtcblxuICAgICAgdmFyIF90aGlzJGdldEhvcml6b250YWxCbyA9IF90aGlzLmdldEhvcml6b250YWxCb29sQW5kUGxhY2VtZW50TmFtZSgpLFxuICAgICAgICAgIGlzSG9yaXpvbnRhbCA9IF90aGlzJGdldEhvcml6b250YWxCby5pc0hvcml6b250YWwsXG4gICAgICAgICAgcGxhY2VtZW50TmFtZSA9IF90aGlzJGdldEhvcml6b250YWxCby5wbGFjZW1lbnROYW1lO1xuXG4gICAgICB2YXIgY29udGVudFZhbHVlID0gX3RoaXMuY29udGVudERvbSA/IF90aGlzLmNvbnRlbnREb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbaXNIb3Jpem9udGFsID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA6IDA7XG4gICAgICB2YXIgdmFsdWUgPSAoaXNIb3Jpem9udGFsID8gd2lkdGggOiBoZWlnaHQpIHx8IGNvbnRlbnRWYWx1ZTtcblxuICAgICAgX3RoaXMuc2V0TGV2ZWxBbmRTY3JvbGxpbmcob3BlbiwgcGxhY2VtZW50TmFtZSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZXRMZXZlbFRyYW5zZm9ybSA9IGZ1bmN0aW9uIChvcGVuLCBwbGFjZW1lbnROYW1lLCB2YWx1ZSwgcmlnaHQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBwbGFjZW1lbnQgPSBfdGhpcyRwcm9wczMucGxhY2VtZW50LFxuICAgICAgICAgIGxldmVsTW92ZSA9IF90aGlzJHByb3BzMy5sZXZlbE1vdmUsXG4gICAgICAgICAgZHVyYXRpb24gPSBfdGhpcyRwcm9wczMuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZSA9IF90aGlzJHByb3BzMy5lYXNlLFxuICAgICAgICAgIHNob3dNYXNrID0gX3RoaXMkcHJvcHMzLnNob3dNYXNrOyAvLyByb3V0ZXIg5YiH5o2i5pe25Y+v6IO95Lya5a+86Iez6aG16Z2i5aSx5Y675rua5Yqo5p2h77yM5omA5Lul6ZyA6KaB5pe25pe26I635Y+W44CCXG5cbiAgICAgIF90aGlzLmxldmVsRG9tLmZvckVhY2goZnVuY3Rpb24gKGRvbSkge1xuICAgICAgICBkb20uc3R5bGUudHJhbnNpdGlvbiA9IFwidHJhbnNmb3JtIFwiLmNvbmNhdChkdXJhdGlvbiwgXCIgXCIpLmNvbmNhdChlYXNlKTtcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihkb20sIHRyYW5zaXRpb25FbmQsIF90aGlzLnRyYW5zaXRpb25FbmQpO1xuICAgICAgICB2YXIgbGV2ZWxWYWx1ZSA9IG9wZW4gPyB2YWx1ZSA6IDA7XG5cbiAgICAgICAgaWYgKGxldmVsTW92ZSkge1xuICAgICAgICAgIHZhciAkbGV2ZWxNb3ZlID0gdHJhbnNmb3JtQXJndW1lbnRzKGxldmVsTW92ZSwge1xuICAgICAgICAgICAgdGFyZ2V0OiBkb20sXG4gICAgICAgICAgICBvcGVuOiBvcGVuXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbGV2ZWxWYWx1ZSA9IG9wZW4gPyAkbGV2ZWxNb3ZlWzBdIDogJGxldmVsTW92ZVsxXSB8fCAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyICR2YWx1ZSA9IHR5cGVvZiBsZXZlbFZhbHVlID09PSAnbnVtYmVyJyA/IFwiXCIuY29uY2F0KGxldmVsVmFsdWUsIFwicHhcIikgOiBsZXZlbFZhbHVlO1xuICAgICAgICB2YXIgcGxhY2VtZW50UG9zID0gcGxhY2VtZW50ID09PSAnbGVmdCcgfHwgcGxhY2VtZW50ID09PSAndG9wJyA/ICR2YWx1ZSA6IFwiLVwiLmNvbmNhdCgkdmFsdWUpO1xuICAgICAgICBwbGFjZW1lbnRQb3MgPSBzaG93TWFzayAmJiBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgcmlnaHQgPyBcImNhbGMoXCIuY29uY2F0KHBsYWNlbWVudFBvcywgXCIgKyBcIikuY29uY2F0KHJpZ2h0LCBcInB4KVwiKSA6IHBsYWNlbWVudFBvcztcbiAgICAgICAgZG9tLnN0eWxlLnRyYW5zZm9ybSA9IGxldmVsVmFsdWUgPyBcIlwiLmNvbmNhdChwbGFjZW1lbnROYW1lLCBcIihcIikuY29uY2F0KHBsYWNlbWVudFBvcywgXCIpXCIpIDogJyc7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0TGV2ZWxBbmRTY3JvbGxpbmcgPSBmdW5jdGlvbiAob3BlbiwgcGxhY2VtZW50TmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBvbkNoYW5nZSA9IF90aGlzLnByb3BzLm9uQ2hhbmdlO1xuXG4gICAgICBpZiAoIXdpbmRvd0lzVW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciByaWdodCA9IGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0ID4gKHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSAmJiB3aW5kb3cuaW5uZXJXaWR0aCA+IGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGggPyBnZXRTY3JvbGxCYXJTaXplKHRydWUpIDogMDtcblxuICAgICAgICBfdGhpcy5zZXRMZXZlbFRyYW5zZm9ybShvcGVuLCBwbGFjZW1lbnROYW1lLCB2YWx1ZSwgcmlnaHQpO1xuXG4gICAgICAgIF90aGlzLnRvZ2dsZVNjcm9sbGluZ1RvRHJhd2VyQW5kQm9keShyaWdodCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgICBvbkNoYW5nZShvcGVuKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMudG9nZ2xlU2Nyb2xsaW5nVG9EcmF3ZXJBbmRCb2R5ID0gZnVuY3Rpb24gKHJpZ2h0KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZ2V0Q29udGFpbmVyID0gX3RoaXMkcHJvcHM0LmdldENvbnRhaW5lcixcbiAgICAgICAgICBzaG93TWFzayA9IF90aGlzJHByb3BzNC5zaG93TWFzayxcbiAgICAgICAgICBvcGVuID0gX3RoaXMkcHJvcHM0Lm9wZW47XG4gICAgICB2YXIgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyICYmIGdldENvbnRhaW5lcigpOyAvLyDlpITnkIYgYm9keSDmu5rliqhcblxuICAgICAgaWYgKGNvbnRhaW5lciAmJiBjb250YWluZXIucGFyZW50Tm9kZSA9PT0gZG9jdW1lbnQuYm9keSAmJiBzaG93TWFzaykge1xuICAgICAgICB2YXIgZXZlbnRBcnJheSA9IFsndG91Y2hzdGFydCddO1xuICAgICAgICB2YXIgZG9tQXJyYXkgPSBbZG9jdW1lbnQuYm9keSwgX3RoaXMubWFza0RvbSwgX3RoaXMuaGFuZGxlckRvbSwgX3RoaXMuY29udGVudERvbV07XG5cbiAgICAgICAgaWYgKG9wZW4gJiYgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyAhPT0gJ2hpZGRlbicpIHtcbiAgICAgICAgICBpZiAocmlnaHQpIHtcbiAgICAgICAgICAgIF90aGlzLmFkZFNjcm9sbGluZ0VmZmVjdChyaWdodCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS50b3VjaEFjdGlvbiA9ICdub25lJzsgLy8g5omL5py656aB5ruaXG5cbiAgICAgICAgICBkb21BcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGl0ZW0sIGV2ZW50QXJyYXlbaV0gfHwgJ3RvdWNobW92ZScsIGkgPyBfdGhpcy5yZW1vdmVNb3ZlSGFuZGxlciA6IF90aGlzLnJlbW92ZVN0YXJ0SGFuZGxlciwgX3RoaXMucGFzc2l2ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMuZ2V0Q3VycmVudERyYXdlclNvbWUoKSkge1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUudG91Y2hBY3Rpb24gPSAnJztcblxuICAgICAgICAgIGlmIChyaWdodCkge1xuICAgICAgICAgICAgX3RoaXMucmVtU2Nyb2xsaW5nRWZmZWN0KHJpZ2h0KTtcbiAgICAgICAgICB9IC8vIOaBouWkjeS6i+S7tlxuXG5cbiAgICAgICAgICBkb21BcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKGl0ZW0sIGV2ZW50QXJyYXlbaV0gfHwgJ3RvdWNobW92ZScsIGkgPyBfdGhpcy5yZW1vdmVNb3ZlSGFuZGxlciA6IF90aGlzLnJlbW92ZVN0YXJ0SGFuZGxlciwgX3RoaXMucGFzc2l2ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuYWRkU2Nyb2xsaW5nRWZmZWN0ID0gZnVuY3Rpb24gKHJpZ2h0KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM1ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgcGxhY2VtZW50ID0gX3RoaXMkcHJvcHM1LnBsYWNlbWVudCxcbiAgICAgICAgICBkdXJhdGlvbiA9IF90aGlzJHByb3BzNS5kdXJhdGlvbixcbiAgICAgICAgICBlYXNlID0gX3RoaXMkcHJvcHM1LmVhc2U7XG4gICAgICB2YXIgd2lkdGhUcmFuc2l0aW9uID0gXCJ3aWR0aCBcIi5jb25jYXQoZHVyYXRpb24sIFwiIFwiKS5jb25jYXQoZWFzZSk7XG4gICAgICB2YXIgdHJhbnNmb3JtVHJhbnNpdGlvbiA9IFwidHJhbnNmb3JtIFwiLmNvbmNhdChkdXJhdGlvbiwgXCIgXCIpLmNvbmNhdChlYXNlKTtcbiAgICAgIF90aGlzLmRvbS5zdHlsZS50cmFuc2l0aW9uID0gJ25vbmUnO1xuXG4gICAgICBzd2l0Y2ggKHBsYWNlbWVudCkge1xuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgX3RoaXMuZG9tLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlWCgtXCIuY29uY2F0KHJpZ2h0LCBcInB4KVwiKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgIF90aGlzLmRvbS5zdHlsZS53aWR0aCA9IFwiY2FsYygxMDAlIC0gXCIuY29uY2F0KHJpZ2h0LCBcInB4KVwiKTtcbiAgICAgICAgICBfdGhpcy5kb20uc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVooMCknO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLmRvbSkge1xuICAgICAgICAgIF90aGlzLmRvbS5zdHlsZS50cmFuc2l0aW9uID0gXCJcIi5jb25jYXQodHJhbnNmb3JtVHJhbnNpdGlvbiwgXCIsXCIpLmNvbmNhdCh3aWR0aFRyYW5zaXRpb24pO1xuICAgICAgICAgIF90aGlzLmRvbS5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgICAgIF90aGlzLmRvbS5zdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbVNjcm9sbGluZ0VmZmVjdCA9IGZ1bmN0aW9uIChyaWdodCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHBsYWNlbWVudCA9IF90aGlzJHByb3BzNi5wbGFjZW1lbnQsXG4gICAgICAgICAgZHVyYXRpb24gPSBfdGhpcyRwcm9wczYuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZSA9IF90aGlzJHByb3BzNi5lYXNlO1xuXG4gICAgICBpZiAodHJhbnNpdGlvblN0cikge1xuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93WCA9ICdoaWRkZW4nO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5kb20uc3R5bGUudHJhbnNpdGlvbiA9ICdub25lJztcbiAgICAgIHZhciBoZWlnaHRUcmFuc2l0aW9uO1xuICAgICAgdmFyIHdpZHRoVHJhbnNpdGlvbiA9IFwid2lkdGggXCIuY29uY2F0KGR1cmF0aW9uLCBcIiBcIikuY29uY2F0KGVhc2UpO1xuICAgICAgdmFyIHRyYW5zZm9ybVRyYW5zaXRpb24gPSBcInRyYW5zZm9ybSBcIi5jb25jYXQoZHVyYXRpb24sIFwiIFwiKS5jb25jYXQoZWFzZSk7XG5cbiAgICAgIHN3aXRjaCAocGxhY2VtZW50KSB7XG4gICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIF90aGlzLmRvbS5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgICAgIHdpZHRoVHJhbnNpdGlvbiA9IFwid2lkdGggMHMgXCIuY29uY2F0KGVhc2UsIFwiIFwiKS5jb25jYXQoZHVyYXRpb24pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBfdGhpcy5kb20uc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGVYKFwiLmNvbmNhdChyaWdodCwgXCJweClcIik7XG4gICAgICAgICAgICBfdGhpcy5kb20uc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgICAgICB3aWR0aFRyYW5zaXRpb24gPSBcIndpZHRoIDBzIFwiLmNvbmNhdChlYXNlLCBcIiBcIikuY29uY2F0KGR1cmF0aW9uKTtcblxuICAgICAgICAgICAgaWYgKF90aGlzLm1hc2tEb20pIHtcbiAgICAgICAgICAgICAgX3RoaXMubWFza0RvbS5zdHlsZS5sZWZ0ID0gXCItXCIuY29uY2F0KHJpZ2h0LCBcInB4XCIpO1xuICAgICAgICAgICAgICBfdGhpcy5tYXNrRG9tLnN0eWxlLndpZHRoID0gXCJjYWxjKDEwMCUgKyBcIi5jb25jYXQocmlnaHQsIFwicHgpXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBfdGhpcy5kb20uc3R5bGUud2lkdGggPSBcImNhbGMoMTAwJSArIFwiLmNvbmNhdChyaWdodCwgXCJweClcIik7XG4gICAgICAgICAgICBfdGhpcy5kb20uc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICAgICAgX3RoaXMuZG9tLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVaKDApJztcbiAgICAgICAgICAgIGhlaWdodFRyYW5zaXRpb24gPSBcImhlaWdodCAwcyBcIi5jb25jYXQoZWFzZSwgXCIgXCIpLmNvbmNhdChkdXJhdGlvbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVvdXQpO1xuICAgICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoX3RoaXMuZG9tKSB7XG4gICAgICAgICAgX3RoaXMuZG9tLnN0eWxlLnRyYW5zaXRpb24gPSBcIlwiLmNvbmNhdCh0cmFuc2Zvcm1UcmFuc2l0aW9uLCBcIixcIikuY29uY2F0KGhlaWdodFRyYW5zaXRpb24gPyBcIlwiLmNvbmNhdChoZWlnaHRUcmFuc2l0aW9uLCBcIixcIikgOiAnJykuY29uY2F0KHdpZHRoVHJhbnNpdGlvbik7XG4gICAgICAgICAgX3RoaXMuZG9tLnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xuICAgICAgICAgIF90aGlzLmRvbS5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgICAgIF90aGlzLmRvbS5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmdldEN1cnJlbnREcmF3ZXJTb21lID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICFPYmplY3Qua2V5cyhjdXJyZW50RHJhd2VyKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnREcmF3ZXJba2V5XTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRMZXZlbERvbSA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgbGV2ZWwgPSBfcmVmLmxldmVsLFxuICAgICAgICAgIGdldENvbnRhaW5lciA9IF9yZWYuZ2V0Q29udGFpbmVyO1xuXG4gICAgICBpZiAod2luZG93SXNVbmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyICYmIGdldENvbnRhaW5lcigpO1xuICAgICAgdmFyIHBhcmVudCA9IGNvbnRhaW5lciA/IGNvbnRhaW5lci5wYXJlbnROb2RlIDogbnVsbDtcbiAgICAgIF90aGlzLmxldmVsRG9tID0gW107XG5cbiAgICAgIGlmIChsZXZlbCA9PT0gJ2FsbCcpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gcGFyZW50ID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwocGFyZW50LmNoaWxkcmVuKSA6IFtdO1xuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgIGlmIChjaGlsZC5ub2RlTmFtZSAhPT0gJ1NDUklQVCcgJiYgY2hpbGQubm9kZU5hbWUgIT09ICdTVFlMRScgJiYgY2hpbGQubm9kZU5hbWUgIT09ICdMSU5LJyAmJiBjaGlsZCAhPT0gY29udGFpbmVyKSB7XG4gICAgICAgICAgICBfdGhpcy5sZXZlbERvbS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChsZXZlbCkge1xuICAgICAgICBkYXRhVG9BcnJheShsZXZlbCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChrZXkpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIF90aGlzLmxldmVsRG9tLnB1c2goaXRlbSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5nZXRIb3Jpem9udGFsQm9vbEFuZFBsYWNlbWVudE5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGxhY2VtZW50ID0gX3RoaXMucHJvcHMucGxhY2VtZW50O1xuICAgICAgdmFyIGlzSG9yaXpvbnRhbCA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JztcbiAgICAgIHZhciBwbGFjZW1lbnROYW1lID0gXCJ0cmFuc2xhdGVcIi5jb25jYXQoaXNIb3Jpem9udGFsID8gJ1gnIDogJ1knKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzSG9yaXpvbnRhbDogaXNIb3Jpem9udGFsLFxuICAgICAgICBwbGFjZW1lbnROYW1lOiBwbGFjZW1lbnROYW1lXG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIF9zZWxmOiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERyYXdlckNoaWxkLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAoIXdpbmRvd0lzVW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBwYXNzaXZlU3VwcG9ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgcGFzc2l2ZVN1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuXG4gICAgICAgIHRoaXMucGFzc2l2ZSA9IHBhc3NpdmVTdXBwb3J0ZWQgPyB7XG4gICAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgICAgfSA6IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3RoaXMkcHJvcHM3ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBvcGVuID0gX3RoaXMkcHJvcHM3Lm9wZW4sXG4gICAgICAgICAgZ2V0Q29udGFpbmVyID0gX3RoaXMkcHJvcHM3LmdldENvbnRhaW5lcixcbiAgICAgICAgICBzaG93TWFzayA9IF90aGlzJHByb3BzNy5zaG93TWFzaztcbiAgICAgIHZhciBjb250YWluZXIgPSBnZXRDb250YWluZXIgJiYgZ2V0Q29udGFpbmVyKCk7XG4gICAgICB0aGlzLmRyYXdlcklkID0gXCJkcmF3ZXJfaWRfXCIuY29uY2F0KE51bWJlcigoRGF0ZS5ub3coKSArIE1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKCkucmVwbGFjZSgnLicsIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDkpLnRvU3RyaW5nKCkpKS50b1N0cmluZygxNikpO1xuICAgICAgdGhpcy5nZXRMZXZlbERvbSh0aGlzLnByb3BzKTtcblxuICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgaWYgKGNvbnRhaW5lciAmJiBjb250YWluZXIucGFyZW50Tm9kZSA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgIGN1cnJlbnREcmF3ZXJbdGhpcy5kcmF3ZXJJZF0gPSBvcGVuO1xuICAgICAgICB9IC8vIOm7mOiupOaJk+W8gOeKtuaAgeaXtuaOqOWHuiBsZXZlbDtcblxuXG4gICAgICAgIHRoaXMub3BlbkxldmVsVHJhbnNpdGlvbigpO1xuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIuZG9tRm9jdXMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHNob3dNYXNrKSB7XG4gICAgICAgICAgdmFyIF90aGlzJHByb3BzJHNjcm9sbExvYztcblxuICAgICAgICAgIChfdGhpcyRwcm9wcyRzY3JvbGxMb2MgPSB0aGlzLnByb3BzLnNjcm9sbExvY2tlcikgPT09IG51bGwgfHwgX3RoaXMkcHJvcHMkc2Nyb2xsTG9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRwcm9wcyRzY3JvbGxMb2MubG9jaygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM4ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBvcGVuID0gX3RoaXMkcHJvcHM4Lm9wZW4sXG4gICAgICAgICAgZ2V0Q29udGFpbmVyID0gX3RoaXMkcHJvcHM4LmdldENvbnRhaW5lcixcbiAgICAgICAgICBzY3JvbGxMb2NrZXIgPSBfdGhpcyRwcm9wczguc2Nyb2xsTG9ja2VyLFxuICAgICAgICAgIHNob3dNYXNrID0gX3RoaXMkcHJvcHM4LnNob3dNYXNrO1xuICAgICAgdmFyIGNvbnRhaW5lciA9IGdldENvbnRhaW5lciAmJiBnZXRDb250YWluZXIoKTtcblxuICAgICAgaWYgKG9wZW4gIT09IHByZXZQcm9wcy5vcGVuKSB7XG4gICAgICAgIGlmIChjb250YWluZXIgJiYgY29udGFpbmVyLnBhcmVudE5vZGUgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICBjdXJyZW50RHJhd2VyW3RoaXMuZHJhd2VySWRdID0gISFvcGVuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcGVuTGV2ZWxUcmFuc2l0aW9uKCk7XG5cbiAgICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgICB0aGlzLmRvbUZvY3VzKCk7XG5cbiAgICAgICAgICBpZiAoc2hvd01hc2spIHtcbiAgICAgICAgICAgIHNjcm9sbExvY2tlciA9PT0gbnVsbCB8fCBzY3JvbGxMb2NrZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNjcm9sbExvY2tlci5sb2NrKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNjcm9sbExvY2tlciA9PT0gbnVsbCB8fCBzY3JvbGxMb2NrZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNjcm9sbExvY2tlci51bkxvY2soKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczkgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIG9wZW4gPSBfdGhpcyRwcm9wczkub3BlbixcbiAgICAgICAgICBzY3JvbGxMb2NrZXIgPSBfdGhpcyRwcm9wczkuc2Nyb2xsTG9ja2VyO1xuICAgICAgZGVsZXRlIGN1cnJlbnREcmF3ZXJbdGhpcy5kcmF3ZXJJZF07XG5cbiAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgIHRoaXMuc2V0TGV2ZWxUcmFuc2Zvcm0oZmFsc2UpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnRvdWNoQWN0aW9uID0gJyc7XG4gICAgICB9XG5cbiAgICAgIHNjcm9sbExvY2tlciA9PT0gbnVsbCB8fCBzY3JvbGxMb2NrZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNjcm9sbExvY2tlci51bkxvY2soKTtcbiAgICB9IC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptZW1iZXItb3JkZXJpbmdcblxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX2NsYXNzbmFtZXMsXG4gICAgICAgICAgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzMTAgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMTAuY2xhc3NOYW1lLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMxMC5jaGlsZHJlbixcbiAgICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzMTAuc3R5bGUsXG4gICAgICAgICAgd2lkdGggPSBfdGhpcyRwcm9wczEwLndpZHRoLFxuICAgICAgICAgIGhlaWdodCA9IF90aGlzJHByb3BzMTAuaGVpZ2h0LFxuICAgICAgICAgIGRlZmF1bHRPcGVuID0gX3RoaXMkcHJvcHMxMC5kZWZhdWx0T3BlbixcbiAgICAgICAgICAkb3BlbiA9IF90aGlzJHByb3BzMTAub3BlbixcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfdGhpcyRwcm9wczEwLnByZWZpeENscyxcbiAgICAgICAgICBwbGFjZW1lbnQgPSBfdGhpcyRwcm9wczEwLnBsYWNlbWVudCxcbiAgICAgICAgICBsZXZlbCA9IF90aGlzJHByb3BzMTAubGV2ZWwsXG4gICAgICAgICAgbGV2ZWxNb3ZlID0gX3RoaXMkcHJvcHMxMC5sZXZlbE1vdmUsXG4gICAgICAgICAgZWFzZSA9IF90aGlzJHByb3BzMTAuZWFzZSxcbiAgICAgICAgICBkdXJhdGlvbiA9IF90aGlzJHByb3BzMTAuZHVyYXRpb24sXG4gICAgICAgICAgZ2V0Q29udGFpbmVyID0gX3RoaXMkcHJvcHMxMC5nZXRDb250YWluZXIsXG4gICAgICAgICAgaGFuZGxlciA9IF90aGlzJHByb3BzMTAuaGFuZGxlcixcbiAgICAgICAgICBvbkNoYW5nZSA9IF90aGlzJHByb3BzMTAub25DaGFuZ2UsXG4gICAgICAgICAgYWZ0ZXJWaXNpYmxlQ2hhbmdlID0gX3RoaXMkcHJvcHMxMC5hZnRlclZpc2libGVDaGFuZ2UsXG4gICAgICAgICAgc2hvd01hc2sgPSBfdGhpcyRwcm9wczEwLnNob3dNYXNrLFxuICAgICAgICAgIG1hc2tDbG9zYWJsZSA9IF90aGlzJHByb3BzMTAubWFza0Nsb3NhYmxlLFxuICAgICAgICAgIG1hc2tTdHlsZSA9IF90aGlzJHByb3BzMTAubWFza1N0eWxlLFxuICAgICAgICAgIG9uQ2xvc2UgPSBfdGhpcyRwcm9wczEwLm9uQ2xvc2UsXG4gICAgICAgICAgb25IYW5kbGVDbGljayA9IF90aGlzJHByb3BzMTAub25IYW5kbGVDbGljayxcbiAgICAgICAgICBrZXlib2FyZCA9IF90aGlzJHByb3BzMTAua2V5Ym9hcmQsXG4gICAgICAgICAgZ2V0T3BlbkNvdW50ID0gX3RoaXMkcHJvcHMxMC5nZXRPcGVuQ291bnQsXG4gICAgICAgICAgc2Nyb2xsTG9ja2VyID0gX3RoaXMkcHJvcHMxMC5zY3JvbGxMb2NrZXIsXG4gICAgICAgICAgY29udGVudFdyYXBwZXJTdHlsZSA9IF90aGlzJHByb3BzMTAuY29udGVudFdyYXBwZXJTdHlsZSxcbiAgICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wczEwLCBbXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiLCBcInN0eWxlXCIsIFwid2lkdGhcIiwgXCJoZWlnaHRcIiwgXCJkZWZhdWx0T3BlblwiLCBcIm9wZW5cIiwgXCJwcmVmaXhDbHNcIiwgXCJwbGFjZW1lbnRcIiwgXCJsZXZlbFwiLCBcImxldmVsTW92ZVwiLCBcImVhc2VcIiwgXCJkdXJhdGlvblwiLCBcImdldENvbnRhaW5lclwiLCBcImhhbmRsZXJcIiwgXCJvbkNoYW5nZVwiLCBcImFmdGVyVmlzaWJsZUNoYW5nZVwiLCBcInNob3dNYXNrXCIsIFwibWFza0Nsb3NhYmxlXCIsIFwibWFza1N0eWxlXCIsIFwib25DbG9zZVwiLCBcIm9uSGFuZGxlQ2xpY2tcIiwgXCJrZXlib2FyZFwiLCBcImdldE9wZW5Db3VudFwiLCBcInNjcm9sbExvY2tlclwiLCBcImNvbnRlbnRXcmFwcGVyU3R5bGVcIl0pOyAvLyDpppbmrKHmuLLmn5Ppg73lsIbmmK/lhbPpl63nirbmgIHjgIJcblxuXG4gICAgICB2YXIgb3BlbiA9IHRoaXMuZG9tID8gJG9wZW4gOiBmYWxzZTtcbiAgICAgIHZhciB3cmFwcGVyQ2xhc3NOYW1lID0gY2xhc3NuYW1lcyhwcmVmaXhDbHMsIChfY2xhc3NuYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChwbGFjZW1lbnQpLCB0cnVlKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc25hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLW9wZW5cIiksIG9wZW4pLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsIGNsYXNzTmFtZSB8fCAnJywgISFjbGFzc05hbWUpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsICduby1tYXNrJywgIXNob3dNYXNrKSwgX2NsYXNzbmFtZXMpKTtcblxuICAgICAgdmFyIF90aGlzJGdldEhvcml6b250YWxCbzIgPSB0aGlzLmdldEhvcml6b250YWxCb29sQW5kUGxhY2VtZW50TmFtZSgpLFxuICAgICAgICAgIHBsYWNlbWVudE5hbWUgPSBfdGhpcyRnZXRIb3Jpem9udGFsQm8yLnBsYWNlbWVudE5hbWU7IC8vIOeZvuWIhuavlOS4juWDj+e0oOWKqOeUu+S4jeWQjOatpe+8jOesrOS4gOasoeaJk+eUqOWQjuWFqOeUqOWDj+e0oOWKqOeUu+OAglxuICAgICAgLy8gY29uc3QgZGVmYXVsdFZhbHVlID0gIXRoaXMuY29udGVudERvbSB8fCAhbGV2ZWwgPyAnMTAwJScgOiBgJHt2YWx1ZX1weGA7XG5cblxuICAgICAgdmFyIHBsYWNlbWVudFBvcyA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnIHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgPyAnLTEwMCUnIDogJzEwMCUnO1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IG9wZW4gPyAnJyA6IFwiXCIuY29uY2F0KHBsYWNlbWVudE5hbWUsIFwiKFwiKS5jb25jYXQocGxhY2VtZW50UG9zLCBcIilcIik7XG4gICAgICB2YXIgaGFuZGxlckNoaWxkcmVuID0gaGFuZGxlciAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGhhbmRsZXIsIHtcbiAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgaWYgKGhhbmRsZXIucHJvcHMub25DbGljaykge1xuICAgICAgICAgICAgaGFuZGxlci5wcm9wcy5vbkNsaWNrKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG9uSGFuZGxlQ2xpY2spIHtcbiAgICAgICAgICAgIG9uSGFuZGxlQ2xpY2soZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihjKSB7XG4gICAgICAgICAgX3RoaXMzLmhhbmRsZXJEb20gPSBjO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgb21pdChwcm9wcywgWydzd2l0Y2hTY3JvbGxpbmdFZmZlY3QnXSksIHtcbiAgICAgICAgdGFiSW5kZXg6IC0xLFxuICAgICAgICBjbGFzc05hbWU6IHdyYXBwZXJDbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoYykge1xuICAgICAgICAgIF90aGlzMy5kb20gPSBjO1xuICAgICAgICB9LFxuICAgICAgICBvbktleURvd246IG9wZW4gJiYga2V5Ym9hcmQgPyB0aGlzLm9uS2V5RG93biA6IHVuZGVmaW5lZCxcbiAgICAgICAgb25UcmFuc2l0aW9uRW5kOiB0aGlzLm9uV3JhcHBlclRyYW5zaXRpb25FbmRcbiAgICAgIH0pLCBzaG93TWFzayAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1tYXNrXCIpLFxuICAgICAgICBvbkNsaWNrOiBtYXNrQ2xvc2FibGUgPyBvbkNsb3NlIDogdW5kZWZpbmVkLFxuICAgICAgICBzdHlsZTogbWFza1N0eWxlLFxuICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihjKSB7XG4gICAgICAgICAgX3RoaXMzLm1hc2tEb20gPSBjO1xuICAgICAgICB9XG4gICAgICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29udGVudC13cmFwcGVyXCIpLFxuICAgICAgICBzdHlsZTogX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICAgICAgbXNUcmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgICAgICB3aWR0aDogaXNOdW1lcmljKHdpZHRoKSA/IFwiXCIuY29uY2F0KHdpZHRoLCBcInB4XCIpIDogd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBpc051bWVyaWMoaGVpZ2h0KSA/IFwiXCIuY29uY2F0KGhlaWdodCwgXCJweFwiKSA6IGhlaWdodFxuICAgICAgICB9LCBjb250ZW50V3JhcHBlclN0eWxlKSxcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoYykge1xuICAgICAgICAgIF90aGlzMy5jb250ZW50V3JhcHBlciA9IGM7XG4gICAgICAgIH1cbiAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNvbnRlbnRcIiksXG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGMpIHtcbiAgICAgICAgICBfdGhpczMuY29udGVudERvbSA9IGM7XG4gICAgICAgIH0sXG4gICAgICAgIG9uVG91Y2hTdGFydDogb3BlbiAmJiBzaG93TWFzayA/IHRoaXMucmVtb3ZlU3RhcnRIYW5kbGVyIDogdW5kZWZpbmVkIC8vIOi3keeUqOS+i+eUqFxuICAgICAgICAsXG4gICAgICAgIG9uVG91Y2hNb3ZlOiBvcGVuICYmIHNob3dNYXNrID8gdGhpcy5yZW1vdmVNb3ZlSGFuZGxlciA6IHVuZGVmaW5lZCAvLyDot5HnlKjkvovnlKhcblxuICAgICAgfSwgY2hpbGRyZW4pLCBoYW5kbGVyQ2hpbGRyZW4pKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBfcmVmMikge1xuICAgICAgdmFyIHByZXZQcm9wcyA9IF9yZWYyLnByZXZQcm9wcyxcbiAgICAgICAgICBfc2VsZiA9IF9yZWYyLl9zZWxmO1xuICAgICAgdmFyIG5leHRTdGF0ZSA9IHtcbiAgICAgICAgcHJldlByb3BzOiBwcm9wc1xuICAgICAgfTtcblxuICAgICAgaWYgKHByZXZQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBwbGFjZW1lbnQgPSBwcm9wcy5wbGFjZW1lbnQsXG4gICAgICAgICAgICBsZXZlbCA9IHByb3BzLmxldmVsO1xuXG4gICAgICAgIGlmIChwbGFjZW1lbnQgIT09IHByZXZQcm9wcy5wbGFjZW1lbnQpIHtcbiAgICAgICAgICAvLyB0ZXN0IOeahCBidWcsIOacieWKqOeUu+i/h+Wcuu+8jOWIoOmZpCBkb21cbiAgICAgICAgICBfc2VsZi5jb250ZW50RG9tID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsZXZlbCAhPT0gcHJldlByb3BzLmxldmVsKSB7XG4gICAgICAgICAgX3NlbGYuZ2V0TGV2ZWxEb20ocHJvcHMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXh0U3RhdGU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERyYXdlckNoaWxkO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBEcmF3ZXJDaGlsZDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzXCI7XG5pbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlclwiO1xuaW1wb3J0IFBvcnRhbCBmcm9tIFwicmMtdXRpbC9lcy9Qb3J0YWxXcmFwcGVyXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ2hpbGQgZnJvbSAnLi9EcmF3ZXJDaGlsZCc7XG5cbnZhciBEcmF3ZXJXcmFwcGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEcmF3ZXJXcmFwcGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKERyYXdlcldyYXBwZXIpO1xuXG4gIGZ1bmN0aW9uIERyYXdlcldyYXBwZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHJhd2VyV3JhcHBlcik7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKTtcblxuICAgIF90aGlzLm9uSGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25IYW5kbGVDbGljayA9IF90aGlzJHByb3BzLm9uSGFuZGxlQ2xpY2ssXG4gICAgICAgICAgJG9wZW4gPSBfdGhpcyRwcm9wcy5vcGVuO1xuXG4gICAgICBpZiAob25IYW5kbGVDbGljaykge1xuICAgICAgICBvbkhhbmRsZUNsaWNrKGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mICRvcGVuID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgX29wZW4gPSBfdGhpcy5zdGF0ZS5vcGVuO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBvcGVuOiAhX29wZW5cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uQ2xvc2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIG9uQ2xvc2UgPSBfdGhpcyRwcm9wczIub25DbG9zZSxcbiAgICAgICAgICBvcGVuID0gX3RoaXMkcHJvcHMyLm9wZW47XG5cbiAgICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgIG9uQ2xvc2UoZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygb3BlbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG9wZW46IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgb3BlbiA9IHR5cGVvZiBwcm9wcy5vcGVuICE9PSAndW5kZWZpbmVkJyA/IHByb3BzLm9wZW4gOiAhIXByb3BzLmRlZmF1bHRPcGVuO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgb3Blbjogb3BlblxuICAgIH07XG5cbiAgICBpZiAoJ29uTWFza0NsaWNrJyBpbiBwcm9wcykge1xuICAgICAgY29uc29sZS53YXJuKCdgb25NYXNrQ2xpY2tgIGFyZSByZW1vdmVkLCBwbGVhc2UgdXNlIGBvbkNsb3NlYCBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEcmF3ZXJXcmFwcGVyLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1lbWJlci1vcmRlcmluZ1xuICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBkZWZhdWx0T3BlbiA9IF90aGlzJHByb3BzMy5kZWZhdWx0T3BlbixcbiAgICAgICAgICBnZXRDb250YWluZXIgPSBfdGhpcyRwcm9wczMuZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIHdyYXBwZXJDbGFzc05hbWUgPSBfdGhpcyRwcm9wczMud3JhcHBlckNsYXNzTmFtZSxcbiAgICAgICAgICBmb3JjZVJlbmRlciA9IF90aGlzJHByb3BzMy5mb3JjZVJlbmRlcixcbiAgICAgICAgICBoYW5kbGVyID0gX3RoaXMkcHJvcHMzLmhhbmRsZXIsXG4gICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHMzLCBbXCJkZWZhdWx0T3BlblwiLCBcImdldENvbnRhaW5lclwiLCBcIndyYXBwZXJDbGFzc05hbWVcIiwgXCJmb3JjZVJlbmRlclwiLCBcImhhbmRsZXJcIl0pO1xuXG4gICAgICB2YXIgb3BlbiA9IHRoaXMuc3RhdGUub3BlbjsgLy8g5riy5p+T5Zyo5b2T5YmNIGRvbSDph4zvvJtcblxuICAgICAgaWYgKCFnZXRDb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IHdyYXBwZXJDbGFzc05hbWUsXG4gICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoYykge1xuICAgICAgICAgICAgX3RoaXMyLmRvbSA9IGM7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDaGlsZCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgb3Blbjogb3BlbixcbiAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgICAgICAgIGdldENvbnRhaW5lcjogZnVuY3Rpb24gZ2V0Q29udGFpbmVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5kb207XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbkNsb3NlOiB0aGlzLm9uQ2xvc2UsXG4gICAgICAgICAgb25IYW5kbGVDbGljazogdGhpcy5vbkhhbmRsZUNsaWNrXG4gICAgICAgIH0pKSk7XG4gICAgICB9IC8vIOWmguaenOaciSBoYW5kbGVyIOS4uuWGhee9ruW8uuWItua4suafk++8m1xuXG5cbiAgICAgIHZhciAkZm9yY2VSZW5kZXIgPSAhIWhhbmRsZXIgfHwgZm9yY2VSZW5kZXI7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUG9ydGFsLCB7XG4gICAgICAgIHZpc2libGU6IG9wZW4sXG4gICAgICAgIGZvcmNlUmVuZGVyOiAkZm9yY2VSZW5kZXIsXG4gICAgICAgIGdldENvbnRhaW5lcjogZ2V0Q29udGFpbmVyLFxuICAgICAgICB3cmFwcGVyQ2xhc3NOYW1lOiB3cmFwcGVyQ2xhc3NOYW1lXG4gICAgICB9LCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgdmlzaWJsZSA9IF9yZWYudmlzaWJsZSxcbiAgICAgICAgICAgIGFmdGVyQ2xvc2UgPSBfcmVmLmFmdGVyQ2xvc2UsXG4gICAgICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcInZpc2libGVcIiwgXCJhZnRlckNsb3NlXCJdKTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgICAvLyByZWFjdCAxNe+8jGNvbXBvbmVudFdpbGxVbm1vdW50IOaXtiBQb3J0YWwg6L+U5ZueIGFmdGVyQ2xvc2UsIHZpc2libGUuXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChDaGlsZCwgX2V4dGVuZHMoe30sIHByb3BzLCByZXN0LCB7XG4gICAgICAgICAgICBvcGVuOiB2aXNpYmxlICE9PSB1bmRlZmluZWQgPyB2aXNpYmxlIDogb3BlbixcbiAgICAgICAgICAgIGFmdGVyVmlzaWJsZUNoYW5nZTogYWZ0ZXJDbG9zZSAhPT0gdW5kZWZpbmVkID8gYWZ0ZXJDbG9zZSA6IHByb3BzLmFmdGVyVmlzaWJsZUNoYW5nZSxcbiAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgICAgICAgICBvbkNsb3NlOiBfdGhpczIub25DbG9zZSxcbiAgICAgICAgICAgIG9uSGFuZGxlQ2xpY2s6IF90aGlzMi5vbkhhbmRsZUNsaWNrXG4gICAgICAgICAgfSkpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBfcmVmMikge1xuICAgICAgdmFyIHByZXZQcm9wcyA9IF9yZWYyLnByZXZQcm9wcztcbiAgICAgIHZhciBuZXdTdGF0ZSA9IHtcbiAgICAgICAgcHJldlByb3BzOiBwcm9wc1xuICAgICAgfTtcblxuICAgICAgaWYgKHR5cGVvZiBwcmV2UHJvcHMgIT09ICd1bmRlZmluZWQnICYmIHByb3BzLm9wZW4gIT09IHByZXZQcm9wcy5vcGVuKSB7XG4gICAgICAgIG5ld1N0YXRlLm9wZW4gPSBwcm9wcy5vcGVuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERyYXdlcldyYXBwZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkRyYXdlcldyYXBwZXIuZGVmYXVsdFByb3BzID0ge1xuICBwcmVmaXhDbHM6ICdkcmF3ZXInLFxuICBwbGFjZW1lbnQ6ICdsZWZ0JyxcbiAgZ2V0Q29udGFpbmVyOiAnYm9keScsXG4gIGRlZmF1bHRPcGVuOiBmYWxzZSxcbiAgbGV2ZWw6ICdhbGwnLFxuICBkdXJhdGlvbjogJy4zcycsXG4gIGVhc2U6ICdjdWJpYy1iZXppZXIoMC43OCwgMC4xNCwgMC4xNSwgMC44NiknLFxuICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoKSB7fSxcbiAgYWZ0ZXJWaXNpYmxlQ2hhbmdlOiBmdW5jdGlvbiBhZnRlclZpc2libGVDaGFuZ2UoKSB7fSxcbiAgaGFuZGxlcjogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJkcmF3ZXItaGFuZGxlXCJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiZHJhd2VyLWhhbmRsZS1pY29uXCJcbiAgfSkpLFxuICBzaG93TWFzazogdHJ1ZSxcbiAgbWFza0Nsb3NhYmxlOiB0cnVlLFxuICBtYXNrU3R5bGU6IHt9LFxuICB3cmFwcGVyQ2xhc3NOYW1lOiAnJyxcbiAgY2xhc3NOYW1lOiAnJyxcbiAga2V5Ym9hcmQ6IHRydWUsXG4gIGZvcmNlUmVuZGVyOiBmYWxzZVxufTtcbmV4cG9ydCBkZWZhdWx0IERyYXdlcldyYXBwZXI7IiwiLy8gZXhwb3J0IHRoaXMgcGFja2FnZSdzIGFwaVxuaW1wb3J0IERyYXdlciBmcm9tICcuL0RyYXdlcldyYXBwZXInO1xuZXhwb3J0IGRlZmF1bHQgRHJhd2VyOyJdLCJuYW1lcyI6WyJ0cmFuc2l0aW9uRW5kT2JqZWN0IiwidHJhbnNpdGlvbiIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJ0cmFuc2l0aW9uU3RyIiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsImtleSIsImRvY3VtZW50IiwiaHRtbCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic3R5bGUiLCJ0cmFuc2l0aW9uRW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRhcmdldCIsImV2ZW50VHlwZSIsImNhbGxiYWNrIiwib3B0aW9ucyIsImF0dGFjaEV2ZW50IiwiY29uY2F0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRldGFjaEV2ZW50IiwiaXNOdW1lcmljIiwidmFsdWUiLCJpc05hTiIsInBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsIndpbmRvd0lzVW5kZWZpbmVkIiwid2luZG93IiwiY3JlYXRlRWxlbWVudCIsImdldFRvdWNoUGFyZW50U2Nyb2xsIiwicm9vdCIsImN1cnJlbnRUYXJnZXQiLCJkaWZmZXJYIiwiZGlmZmVyWSIsIkRvY3VtZW50IiwicGFyZW50Tm9kZSIsImlzWSIsIk1hdGgiLCJtYXgiLCJhYnMiLCJpc1giLCJzY3JvbGxZIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0Iiwic2Nyb2xsWCIsInNjcm9sbFdpZHRoIiwiY2xpZW50V2lkdGgiLCJkZWZhdWx0VmlldyIsImdldENvbXB1dGVkU3R5bGUiLCJvdmVyZmxvd1kiLCJvdmVyZmxvd1giLCJ5IiwieCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJjdXJyZW50RHJhd2VyIiwiX1JlYWN0JENvbXBvbmVudCIsIkRyYXdlckNoaWxkIiwiX3N1cGVyIiwicHJvcHMiLCJfdGhpcyIsInRoaXMiLCJjYWxsIiwiZG9tRm9jdXMiLCJkb20iLCJmb2N1cyIsInJlbW92ZVN0YXJ0SGFuZGxlciIsImUiLCJ0b3VjaGVzIiwibGVuZ3RoIiwic3RhcnRQb3MiLCJjbGllbnRYIiwiY2xpZW50WSIsInJlbW92ZU1vdmVIYW5kbGVyIiwiY2hhbmdlZFRvdWNoZXMiLCJtYXNrRG9tIiwiaGFuZGxlckRvbSIsImNvbnRlbnREb20iLCJjYW5jZWxhYmxlIiwicHJldmVudERlZmF1bHQiLCJvbktleURvd24iLCJrZXlDb2RlIiwiS2V5Q29kZSIsIm9uQ2xvc2UiLCJzdG9wUHJvcGFnYXRpb24iLCJvbldyYXBwZXJUcmFuc2l0aW9uRW5kIiwiX3RoaXMkcHJvcHMiLCJvcGVuIiwiYWZ0ZXJWaXNpYmxlQ2hhbmdlIiwiY29udGVudFdyYXBwZXIiLCJwcm9wZXJ0eU5hbWUiLCJtYXRjaCIsImdldEN1cnJlbnREcmF3ZXJTb21lIiwiYm9keSIsImxlZnQiLCJ3aWR0aCIsIm9wZW5MZXZlbFRyYW5zaXRpb24iLCJfdGhpcyRwcm9wczIiLCJoZWlnaHQiLCJfdGhpcyRnZXRIb3Jpem9udGFsQm8iLCJnZXRIb3Jpem9udGFsQm9vbEFuZFBsYWNlbWVudE5hbWUiLCJpc0hvcml6b250YWwiLCJwbGFjZW1lbnROYW1lIiwiY29udGVudFZhbHVlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2V0TGV2ZWxBbmRTY3JvbGxpbmciLCJzZXRMZXZlbFRyYW5zZm9ybSIsInJpZ2h0IiwiX3RoaXMkcHJvcHMzIiwicGxhY2VtZW50IiwibGV2ZWxNb3ZlIiwiZHVyYXRpb24iLCJlYXNlIiwic2hvd01hc2siLCJsZXZlbERvbSIsImZvckVhY2giLCJhcmciLCJjYiIsInJlc3VsdCIsImxldmVsVmFsdWUiLCIkbGV2ZWxNb3ZlIiwiQXJyYXkiLCJpc0FycmF5IiwiJHZhbHVlIiwicGxhY2VtZW50UG9zIiwidHJhbnNmb3JtIiwib25DaGFuZ2UiLCJpbm5lckhlaWdodCIsImRvY3VtZW50RWxlbWVudCIsImlubmVyV2lkdGgiLCJvZmZzZXRXaWR0aCIsImdldFNjcm9sbEJhclNpemUiLCJ0b2dnbGVTY3JvbGxpbmdUb0RyYXdlckFuZEJvZHkiLCJfdGhpcyRwcm9wczQiLCJnZXRDb250YWluZXIiLCJjb250YWluZXIiLCJldmVudEFycmF5IiwiZG9tQXJyYXkiLCJvdmVyZmxvdyIsImFkZFNjcm9sbGluZ0VmZmVjdCIsInRvdWNoQWN0aW9uIiwiaXRlbSIsImkiLCJwYXNzaXZlIiwicmVtU2Nyb2xsaW5nRWZmZWN0IiwiX3RoaXMkcHJvcHM1Iiwid2lkdGhUcmFuc2l0aW9uIiwidHJhbnNmb3JtVHJhbnNpdGlvbiIsImNsZWFyVGltZW91dCIsInRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiaGVpZ2h0VHJhbnNpdGlvbiIsIl90aGlzJHByb3BzNiIsInNvbWUiLCJnZXRMZXZlbERvbSIsIl9yZWYiLCJsZXZlbCIsInZhcnMiLCJwYXJlbnQiLCJwcm90b3R5cGUiLCJzbGljZSIsImNoaWxkcmVuIiwiY2hpbGQiLCJub2RlTmFtZSIsInB1c2giLCJxdWVyeVNlbGVjdG9yQWxsIiwic3RhdGUiLCJfc2VsZiIsIl90aGlzMiIsInBhc3NpdmVTdXBwb3J0ZWQiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImVyciIsIl90aGlzJHByb3BzJHNjcm9sbExvYyIsIl90aGlzJHByb3BzNyIsImRyYXdlcklkIiwiTnVtYmVyIiwiRGF0ZSIsIm5vdyIsInJhbmRvbSIsInRvU3RyaW5nIiwicmVwbGFjZSIsInJvdW5kIiwiZm9yY2VVcGRhdGUiLCJzY3JvbGxMb2NrZXIiLCJsb2NrIiwicHJldlByb3BzIiwiX3RoaXMkcHJvcHM4IiwidW5Mb2NrIiwiX3RoaXMkcHJvcHM5IiwiX2NsYXNzbmFtZXMiLCJfdGhpczMiLCJfdGhpcyRwcm9wczEwIiwiY2xhc3NOYW1lIiwiJG9wZW4iLCJkZWZhdWx0T3BlbiIsInByZWZpeENscyIsImhhbmRsZXIiLCJtYXNrQ2xvc2FibGUiLCJtYXNrU3R5bGUiLCJvbkhhbmRsZUNsaWNrIiwia2V5Ym9hcmQiLCJjb250ZW50V3JhcHBlclN0eWxlIiwiZ2V0T3BlbkNvdW50Iiwid3JhcHBlckNsYXNzTmFtZSIsImhhbmRsZXJDaGlsZHJlbiIsIm9uQ2xpY2siLCJyZWYiLCJjIiwib21pdCIsInRhYkluZGV4IiwidW5kZWZpbmVkIiwib25UcmFuc2l0aW9uRW5kIiwibXNUcmFuc2Zvcm0iLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoTW92ZSIsIl9yZWYyIiwibmV4dFN0YXRlIiwiRHJhd2VyV3JhcHBlciIsIl9vcGVuIiwic2V0U3RhdGUiLCJjb25zb2xlIiwid2FybiIsImZvcmNlUmVuZGVyIiwiJGZvcmNlUmVuZGVyIiwidmlzaWJsZSIsImFmdGVyQ2xvc2UiLCJyZXN0IiwibmV3U3RhdGUiLCJkZWZhdWx0UHJvcHMiXSwic291cmNlUm9vdCI6IiJ9