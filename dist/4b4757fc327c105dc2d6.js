"use strict";(self.webpackChunkmaster_degree=self.webpackChunkmaster_degree||[]).push([[420],{2239:(e,n,t)=>{t.d(n,{L0:()=>E,_5:()=>C,NL:()=>N,bt:()=>S});var o=t(7294),r=(t(334),t(7462)),a=t(4942),c=t(4925),i=t(1413),d=t(5671),s=t(3144),l=t(7326),p=t(9340),f=t(8557),u=t(4184),h=t.n(u),v=o.createContext(null);const g=function(e){for(var n=e.prefixCls,t=e.level,r=e.isStart,c=e.isEnd,i="".concat(n,"-indent-unit"),d=[],s=0;s<t;s+=1){var l;d.push(o.createElement("span",{key:s,className:h()(i,(l={},(0,a.Z)(l,"".concat(i,"-start"),r[s]),(0,a.Z)(l,"".concat(i,"-end"),c[s]),l))}))}return o.createElement("span",{"aria-hidden":"true",className:"".concat(n,"-indent")},d)};var k=t(1089),x=["eventKey","className","style","dragOver","dragOverGapTop","dragOverGapBottom","isLeaf","isStart","isEnd","expanded","selected","checked","halfChecked","loading","domRef","active","data","onMouseMove"],y="open",m="close",b=function(e){(0,p.Z)(t,e);var n=(0,f.Z)(t);function t(){var e;(0,d.Z)(this,t);for(var r=arguments.length,a=new Array(r),c=0;c<r;c++)a[c]=arguments[c];return(e=n.call.apply(n,[this].concat(a))).state={dragNodeHighlight:!1},e.selectHandle=void 0,e.onSelectorClick=function(n){(0,e.props.context.onNodeClick)(n,(0,k.F)(e.props)),e.isSelectable()?e.onSelect(n):e.onCheck(n)},e.onSelectorDoubleClick=function(n){(0,e.props.context.onNodeDoubleClick)(n,(0,k.F)(e.props))},e.onSelect=function(n){if(!e.isDisabled()){var t=e.props.context.onNodeSelect;n.preventDefault(),t(n,(0,k.F)(e.props))}},e.onCheck=function(n){if(!e.isDisabled()){var t=e.props,o=t.disableCheckbox,r=t.checked,a=e.props.context.onNodeCheck;if(e.isCheckable()&&!o){n.preventDefault();var c=!r;a(n,(0,k.F)(e.props),c)}}},e.onMouseEnter=function(n){(0,e.props.context.onNodeMouseEnter)(n,(0,k.F)(e.props))},e.onMouseLeave=function(n){(0,e.props.context.onNodeMouseLeave)(n,(0,k.F)(e.props))},e.onContextMenu=function(n){(0,e.props.context.onNodeContextMenu)(n,(0,k.F)(e.props))},e.onDragStart=function(n){var t=e.props.context.onNodeDragStart;n.stopPropagation(),e.setState({dragNodeHighlight:!0}),t(n,(0,l.Z)(e));try{n.dataTransfer.setData("text/plain","")}catch(e){}},e.onDragEnter=function(n){var t=e.props.context.onNodeDragEnter;n.preventDefault(),n.stopPropagation(),t(n,(0,l.Z)(e))},e.onDragOver=function(n){var t=e.props.context.onNodeDragOver;n.preventDefault(),n.stopPropagation(),t(n,(0,l.Z)(e))},e.onDragLeave=function(n){var t=e.props.context.onNodeDragLeave;n.stopPropagation(),t(n,(0,l.Z)(e))},e.onDragEnd=function(n){var t=e.props.context.onNodeDragEnd;n.stopPropagation(),e.setState({dragNodeHighlight:!1}),t(n,(0,l.Z)(e))},e.onDrop=function(n){var t=e.props.context.onNodeDrop;n.preventDefault(),n.stopPropagation(),e.setState({dragNodeHighlight:!1}),t(n,(0,l.Z)(e))},e.onExpand=function(n){var t=e.props,o=t.loading,r=t.context.onNodeExpand;o||r(n,(0,k.F)(e.props))},e.setSelectHandle=function(n){e.selectHandle=n},e.getNodeState=function(){var n=e.props.expanded;return e.isLeaf()?null:n?y:m},e.hasChildren=function(){var n=e.props.eventKey;return!!((e.props.context.keyEntities[n]||{}).children||[]).length},e.isLeaf=function(){var n=e.props,t=n.isLeaf,o=n.loaded,r=e.props.context.loadData,a=e.hasChildren();return!1!==t&&(t||!r&&!a||r&&o&&!a)},e.isDisabled=function(){var n=e.props.disabled;return!(!e.props.context.disabled&&!n)},e.isCheckable=function(){var n=e.props.checkable,t=e.props.context.checkable;return!(!t||!1===n)&&t},e.syncLoadData=function(n){var t=n.expanded,o=n.loading,r=n.loaded,a=e.props.context,c=a.loadData,i=a.onNodeLoad;o||c&&t&&!e.isLeaf()&&(e.hasChildren()||r||i((0,k.F)(e.props)))},e.renderSwitcherIconDom=function(n){var t=e.props.switcherIcon,o=e.props.context.switcherIcon,r=t||o;return"function"==typeof r?r((0,i.Z)((0,i.Z)({},e.props),{},{isLeaf:n})):r},e.renderSwitcher=function(){var n=e.props.expanded,t=e.props.context.prefixCls;if(e.isLeaf()){var r=e.renderSwitcherIconDom(!0);return!1!==r?o.createElement("span",{className:h()("".concat(t,"-switcher"),"".concat(t,"-switcher-noop"))},r):null}var a=h()("".concat(t,"-switcher"),"".concat(t,"-switcher_").concat(n?y:m)),c=e.renderSwitcherIconDom(!1);return!1!==c?o.createElement("span",{onClick:e.onExpand,className:a},c):null},e.renderCheckbox=function(){var n=e.props,t=n.checked,r=n.halfChecked,a=n.disableCheckbox,c=e.props.context.prefixCls,i=e.isDisabled(),d=e.isCheckable();if(!d)return null;var s="boolean"!=typeof d?d:null;return o.createElement("span",{className:h()("".concat(c,"-checkbox"),t&&"".concat(c,"-checkbox-checked"),!t&&r&&"".concat(c,"-checkbox-indeterminate"),(i||a)&&"".concat(c,"-checkbox-disabled")),onClick:e.onCheck},s)},e.renderIcon=function(){var n=e.props.loading,t=e.props.context.prefixCls;return o.createElement("span",{className:h()("".concat(t,"-iconEle"),"".concat(t,"-icon__").concat(e.getNodeState()||"docu"),n&&"".concat(t,"-icon_loading"))})},e.renderSelector=function(){var n,t,r=e.state.dragNodeHighlight,a=e.props,c=a.title,i=a.selected,d=a.icon,s=a.loading,l=a.data,p=e.props.context,f=p.prefixCls,u=p.showIcon,v=p.icon,g=p.draggable,k=p.loadData,x=p.titleRender,y=e.isDisabled(),m="function"==typeof g?g(l):g,b="".concat(f,"-node-content-wrapper");if(u){var D=d||v;n=D?o.createElement("span",{className:h()("".concat(f,"-iconEle"),"".concat(f,"-icon__customize"))},"function"==typeof D?D(e.props):D):e.renderIcon()}else k&&s&&(n=e.renderIcon());t="function"==typeof c?c(l):x?x(l):c;var C=o.createElement("span",{className:"".concat(f,"-title")},t);return o.createElement("span",{ref:e.setSelectHandle,title:"string"==typeof c?c:"",className:h()("".concat(b),"".concat(b,"-").concat(e.getNodeState()||"normal"),!y&&(i||r)&&"".concat(f,"-node-selected"),!y&&m&&"draggable"),draggable:!y&&m||void 0,"aria-grabbed":!y&&m||void 0,onMouseEnter:e.onMouseEnter,onMouseLeave:e.onMouseLeave,onContextMenu:e.onContextMenu,onClick:e.onSelectorClick,onDoubleClick:e.onSelectorDoubleClick,onDragStart:m?e.onDragStart:void 0},n,C,e.renderDropIndicator())},e.renderDropIndicator=function(){var n=e.props,t=n.disabled,o=n.eventKey,r=e.props.context,a=r.draggable,c=r.dropLevelOffset,i=r.dropPosition,d=r.prefixCls,s=r.indent,l=r.dropIndicatorRender,p=r.dragOverNodeKey,f=r.direction;return!t&&!1!==a&&p===o?l({dropPosition:i,dropLevelOffset:c,indent:s,prefixCls:d,direction:f}):null},e}return(0,s.Z)(t,[{key:"componentDidMount",value:function(){this.syncLoadData(this.props)}},{key:"componentDidUpdate",value:function(){this.syncLoadData(this.props)}},{key:"isSelectable",value:function(){var e=this.props.selectable,n=this.props.context.selectable;return"boolean"==typeof e?e:n}},{key:"render",value:function(){var e,n=this.props,t=n.eventKey,i=n.className,d=n.style,s=n.dragOver,l=n.dragOverGapTop,p=n.dragOverGapBottom,f=n.isLeaf,u=n.isStart,v=n.isEnd,y=n.expanded,m=n.selected,b=n.checked,D=n.halfChecked,C=n.loading,E=n.domRef,S=n.active,Z=n.data,w=n.onMouseMove,L=(0,c.Z)(n,x),O=this.props.context,M=O.prefixCls,P=O.filterTreeNode,K=O.draggable,I=O.keyEntities,F=O.dropContainerKey,G=O.dropTargetKey,T=this.isDisabled(),H=N(L),_=(I[t]||{}).level,j=v[v.length-1],A="function"==typeof K?K(Z):K;return o.createElement("div",(0,r.Z)({ref:E,className:h()(i,"".concat(M,"-treenode"),(e={},(0,a.Z)(e,"".concat(M,"-treenode-disabled"),T),(0,a.Z)(e,"".concat(M,"-treenode-switcher-").concat(y?"open":"close"),!f),(0,a.Z)(e,"".concat(M,"-treenode-checkbox-checked"),b),(0,a.Z)(e,"".concat(M,"-treenode-checkbox-indeterminate"),D),(0,a.Z)(e,"".concat(M,"-treenode-selected"),m),(0,a.Z)(e,"".concat(M,"-treenode-loading"),C),(0,a.Z)(e,"".concat(M,"-treenode-active"),S),(0,a.Z)(e,"".concat(M,"-treenode-leaf-last"),j),(0,a.Z)(e,"drop-target",G===t),(0,a.Z)(e,"drop-container",F===t),(0,a.Z)(e,"drag-over",!T&&s),(0,a.Z)(e,"drag-over-gap-top",!T&&l),(0,a.Z)(e,"drag-over-gap-bottom",!T&&p),(0,a.Z)(e,"filter-node",P&&P((0,k.F)(this.props))),e)),style:d,onDragEnter:A?this.onDragEnter:void 0,onDragOver:A?this.onDragOver:void 0,onDragLeave:A?this.onDragLeave:void 0,onDrop:A?this.onDrop:void 0,onDragEnd:A?this.onDragEnd:void 0,onMouseMove:w},H),o.createElement(g,{prefixCls:M,level:_,isStart:u,isEnd:v}),this.renderSwitcher(),this.renderCheckbox(),this.renderSelector())}}]),t}(o.Component),D=function(e){return o.createElement(v.Consumer,null,(function(n){return o.createElement(b,(0,r.Z)({},e,{context:n}))}))};D.displayName="TreeNode",D.defaultProps={title:"---"},D.isTreeNode=1;function C(e,n){var t=e.slice(),o=t.indexOf(n);return o>=0&&t.splice(o,1),t}function E(e,n){var t=e.slice();return-1===t.indexOf(n)&&t.push(n),t}function S(e,n){return"".concat(e,"-").concat(n)}function N(e){var n={};return Object.keys(e).forEach((function(t){(t.startsWith("data-")||t.startsWith("aria-"))&&(n[t]=e[t])})),n}},7341:(e,n,t)=>{t.d(n,{S:()=>c});var o=t(334);function r(e,n){var t=new Set;return e.forEach((function(e){n.has(e)||t.add(e)})),t}function a(e){var n=e||{},t=n.disabled,o=n.disableCheckbox,r=n.checkable;return!(!t&&!o)||!1===r}function c(e,n,t,c){var i,d=[];i=c||a;var s,l=new Set(e.filter((function(e){var n=!!t[e];return n||d.push(e),n}))),p=new Map,f=0;return Object.keys(t).forEach((function(e){var n=t[e],o=n.level,r=p.get(o);r||(r=new Set,p.set(o,r)),r.add(n),f=Math.max(f,o)})),(0,o.ZP)(!d.length,"Tree missing follow keys: ".concat(d.slice(0,100).map((function(e){return"'".concat(e,"'")})).join(", "))),s=!0===n?function(e,n,t,o){for(var a=new Set(e),c=new Set,i=0;i<=t;i+=1)(n.get(i)||new Set).forEach((function(e){var n=e.key,t=e.node,r=e.children,c=void 0===r?[]:r;a.has(n)&&!o(t)&&c.filter((function(e){return!o(e.node)})).forEach((function(e){a.add(e.key)}))}));for(var d=new Set,s=t;s>=0;s-=1)(n.get(s)||new Set).forEach((function(e){var n=e.parent,t=e.node;if(!o(t)&&e.parent&&!d.has(e.parent.key))if(o(e.parent.node))d.add(n.key);else{var r=!0,i=!1;(n.children||[]).filter((function(e){return!o(e.node)})).forEach((function(e){var n=e.key,t=a.has(n);r&&!t&&(r=!1),i||!t&&!c.has(n)||(i=!0)})),r&&a.add(n.key),i&&c.add(n.key),d.add(n.key)}}));return{checkedKeys:Array.from(a),halfCheckedKeys:Array.from(r(c,a))}}(l,p,f,i):function(e,n,t,o,a){for(var c=new Set(e),i=new Set(n),d=0;d<=o;d+=1)(t.get(d)||new Set).forEach((function(e){var n=e.key,t=e.node,o=e.children,r=void 0===o?[]:o;c.has(n)||i.has(n)||a(t)||r.filter((function(e){return!a(e.node)})).forEach((function(e){c.delete(e.key)}))}));i=new Set;for(var s=new Set,l=o;l>=0;l-=1)(t.get(l)||new Set).forEach((function(e){var n=e.parent,t=e.node;if(!a(t)&&e.parent&&!s.has(e.parent.key))if(a(e.parent.node))s.add(n.key);else{var o=!0,r=!1;(n.children||[]).filter((function(e){return!a(e.node)})).forEach((function(e){var n=e.key,t=c.has(n);o&&!t&&(o=!1),r||!t&&!i.has(n)||(r=!0)})),o||c.delete(n.key),r&&i.add(n.key),s.add(n.key)}}));return{checkedKeys:Array.from(c),halfCheckedKeys:Array.from(r(i,c))}}(l,n.halfCheckedKeys,p,f,i),s}},1089:(e,n,t)=>{t.d(n,{I8:()=>s,F:()=>l});var o=t(1002),r=t(1413),a=(t(344),t(334)),c=t(2239);function i(e,n){return null!=e?e:n}function d(e,n,t){var r,a,d=null,s=(0,o.Z)(t);"function"===s||"string"===s?d=t:t&&"object"===s&&(r=t.childrenPropName,d=t.externalGetKey),r=r||"children",d?"string"==typeof d?a=function(e){return e[d]}:"function"==typeof d&&(a=function(e){return d(e)}):a=function(e,n){return i(e.key,n)},function t(o,i,d){var s=o?o[r]:e,l=o?(0,c.bt)(d.pos,i):"0";if(o){var p=a(o,l),f={node:o,index:i,pos:l,key:p,parentPos:d.node?d.pos:null,level:d.level+1};n(f)}s&&s.forEach((function(e,n){t(e,n,{node:o,pos:l,level:d?d.level+1:-1})}))}(null)}function s(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.initWrapper,o=n.processEntity,r=n.onProcessFinished,a=n.externalGetKey,c=n.childrenPropName,s=arguments.length>2?arguments[2]:void 0,l=a||s,p={},f={},u={posEntities:p,keyEntities:f};return t&&(u=t(u)||u),d(e,(function(e){var n=e.node,t=e.index,r=e.pos,a=e.key,c=e.parentPos,d={node:n,index:t,key:a,pos:r,level:e.level},s=i(a,r);p[r]=d,f[s]=d,d.parent=p[c],d.parent&&(d.parent.children=d.parent.children||[],d.parent.children.push(d)),o&&o(d,u)}),{externalGetKey:l,childrenPropName:c}),r&&r(u),u}function l(e){var n=e.data,t=e.expanded,o=e.selected,c=e.checked,i=e.loaded,d=e.loading,s=e.halfChecked,l=e.dragOver,p=e.dragOverGapTop,f=e.dragOverGapBottom,u=e.pos,h=e.active,v=(0,r.Z)((0,r.Z)({},n),{},{expanded:t,selected:o,checked:c,loaded:i,loading:d,halfChecked:s,dragOver:l,dragOverGapTop:p,dragOverGapBottom:f,pos:u,active:h});return"props"in v||Object.defineProperty(v,"props",{get:function(){return(0,a.ZP)(!1,"Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`."),e}}),v}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,